if(!window.global){
	var global = {}
}
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _webApiFactoryClassJs = __webpack_require__(1);
	
	var _webApiFactoryClassJs2 = _interopRequireDefault(_webApiFactoryClassJs);
	
	var _libAutobahn = __webpack_require__(6);
	
	var _libAutobahn2 = _interopRequireDefault(_libAutobahn);
	
	if (window) {
	    if (!window.EM) {
	        window.EM = {};
	    }
	    window.EM.webApi = _webApiFactoryClassJs2['default'];
	    window.EM.autobahn = _libAutobahn2['default'];
	}
	exports['default'] = _webApiFactoryClassJs2['default'];
	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _extendJs = __webpack_require__(2);
	
	var _webApiClassJs = __webpack_require__(3);
	
	var _webApiClassJs2 = _interopRequireDefault(_webApiClassJs);
	
	var _libAutobahn = __webpack_require__(6);
	
	var _libAutobahn2 = _interopRequireDefault(_libAutobahn);
	
	var WebApiFactory = (function () {
	    function WebApiFactory() {
	        _classCallCheck(this, WebApiFactory);
	    }
	
	    _createClass(WebApiFactory, null, [{
	        key: 'setURL',
	
	        /**
	         * Sets the webapi url
	         * @param uri {string}
	         */
	        value: function setURL(uri) {
	            WebApiFactory.config.url = uri;
	        }
	
	        /**
	         * sets relam domain, given by the integration team
	         * @param realm {String}
	         */
	    }, {
	        key: 'setRealm',
	        value: function setRealm(realm) {
	            WebApiFactory.config.realm = realm;
	        }
	
	        /**
	         *
	         * @param cometURL
	         */
	    }, {
	        key: 'setCometURL',
	        value: function setCometURL(cometURL) {
	            WebApiFactory.config.cometURL = cometURL;
	        }
	
	        /**
	         * Initializes the WebApi singleton instance
	         *
	         * @param config {Object}
	         * @param config.url {String} the api ws url
	         *      Mandatory if setURL was not used
	         * @param config.cometURL {String} the api comet url
	         *      Used for long polling fallback when WebSocket is not available
	         * @param config.realm {String} the domain realm
	         *      Mandatory if setRealm was not used
	         *
	         * @returns {Promise<WebApi>} promise with the singleton WebApi instance
	         */
	    }, {
	        key: 'init',
	        value: function init() {
	            var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	            if (!WebApiFactory.instance) {
	                WebApiFactory.config = WebApiFactory.extend(true, WebApiFactory.config, config);
	                WebApiFactory.instance = new _webApiClassJs2['default'](WebApiFactory.config);
	                WebApiFactory.instance.setDebug(WebApiFactory.isDebug);
	                return WebApiFactory.getInstance();
	            } else {
	                throw new Error('Called WebApiFactory.init multiple time is not permitted');
	            }
	        }
	
	        /**
	         * Get the singleton instance of WebApi
	         * @returns {Promise<WebApi>} return the WebApi instance
	         */
	    }, {
	        key: 'getInstance',
	        value: function getInstance() {
	            if (!WebApiFactory.instance) {
	                throw new ReferenceError('WebApi not instantiated, please call WebApiFactory.init before getInstance');
	            }
	            return WebApiFactory.instance;
	        }
	    }, {
	        key: 'extend',
	        value: _extendJs.extend,
	        enumerable: true
	    }, {
	        key: 'isArray',
	        value: _extendJs.isArray,
	        enumerable: true
	    }, {
	        key: 'isPlainObject',
	        value: _extendJs.isPlainObject,
	        enumerable: true
	    }, {
	        key: 'config',
	        value: {},
	        enumerable: true
	    }, {
	        key: 'instance',
	        value: null,
	        enumerable: true
	    }, {
	        key: 'isDebug',
	        value: false,
	        enumerable: true
	    }]);
	
	    return WebApiFactory;
	})();
	
	exports['default'] = WebApiFactory;
	module.exports = exports['default'];

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	var hasOwn = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	
	var isArray = function isArray(arr) {
	    if (typeof Array.isArray === 'function') {
	        return Array.isArray(arr);
	    }
	
	    return toStr.call(arr) === '[object Array]';
	};
	
	exports.isArray = isArray;
	var isPlainObject = function isPlainObject(obj) {
	    if (!obj || toStr.call(obj) !== '[object Object]') {
	        return false;
	    }
	
	    var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	    var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	    // Not own constructor property must be Object
	    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
	        return false;
	    }
	
	    // Own properties are enumerated firstly, so to speed up,
	    // if last one is own, then all properties are own.
	    var key;
	    for (key in obj) {/**/
	    }
	
	    return typeof key === 'undefined' || hasOwn.call(obj, key);
	};
	
	exports.isPlainObject = isPlainObject;
	var extend = function extend() {
	    var options,
	        name,
	        src,
	        copy,
	        copyIsArray,
	        clone,
	        target = arguments[0],
	        i = 1,
	        length = arguments.length,
	        deep = false;
	
	    // Handle a deep copy situation
	    if (typeof target === 'boolean') {
	        deep = target;
	        target = arguments[1] || {};
	        // skip the boolean and the target
	        i = 2;
	    } else if (typeof target !== 'object' && typeof target !== 'function' || target == null) {
	        target = {};
	    }
	
	    for (; i < length; ++i) {
	        options = arguments[i];
	        // Only deal with non-null/undefined values
	        if (options != null) {
	            // Extend the base object
	            for (name in options) {
	                src = target[name];
	                copy = options[name];
	
	                // Prevent never-ending loop
	                if (target !== copy) {
	                    // Recurse if we're merging plain objects or arrays
	                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
	                        if (copyIsArray) {
	                            copyIsArray = false;
	                            clone = src && isArray(src) ? src : [];
	                        } else {
	                            clone = src && isPlainObject(src) ? src : {};
	                        }
	
	                        // Never move original objects, clone them
	                        target[name] = extend(deep, clone, copy);
	
	                        // Don't bring in undefined values
	                    } else if (typeof copy !== 'undefined') {
	                            target[name] = copy;
	                        }
	                }
	            }
	        }
	    }
	    return target;
	};
	exports.extend = extend;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _extendJs = __webpack_require__(2);
	
	var _libCommetTransport = __webpack_require__(4);
	
	var _libCommetTransport2 = _interopRequireDefault(_libCommetTransport);
	
	var autobahn = __webpack_require__(6);
	
	autobahn.transports.register('comet', _libCommetTransport2['default']);
	
	var WebApi = (function () {
	    function WebApi(config) {
	        _classCallCheck(this, WebApi);
	
	        if (!config.url) {
	            throw new Error('WebApi wsuri is mandatory');
	        }
	        if (!config.realm) {
	            throw new Error('WebApi realm is mandatory');
	        }
	        this.config = config;
	        this.isDebug = false;
	    }
	
	    _createClass(WebApi, [{
	        key: 'setDebug',
	        value: function setDebug(isDebug) {
	            this.isDebug = isDebug;
	            window.AUTOBAHN_DEBUG = isDebug;
	        }
	
	        /**
	         *
	         * @param topic
	         * @param handler
	         * @param options
	         * @returns {*|Promise|Promise.<T>}
	         */
	    }, {
	        key: 'subscribe',
	        value: function subscribe(topic, handler, options) {
	            return this.getSession().then(function (session) {
	                return session.subscribe(topic, handler, options);
	            });
	        }
	    }, {
	        key: 'rxSubscribe',
	        value: function rxSubscribe(topic, options) {
	            var _this = this;
	
	            return Rx.Observable.create(function (obs) {
	                var isUnsbscribed = false;
	                var unsubscribe = function unsubscribe() {
	                    isUnsbscribed = true;
	                };
	
	                _this.subscribe(topic, function (argv, kwargs, meta) {
	                    obs.onNext(kwargs, argv, meta);
	                }, options).then(function (abSub) {
	                    if (isUnsbscribed) {
	                        abSub.unsubscribe();
	                    } else {
	                        unsubscribe = function () {
	                            isUnsbscribed = true;
	                            abSub.unsubscribe();
	                        };
	                    }
	
	                    abSub.on_unsubscribe.then(function () {
	                        obs.onCompleted();
	                    });
	                }, function (err) {
	                    obs.onError(err);
	                    obs.onCompleted();
	                });
	                return function () {
	                    unsubscribe();
	                };
	            });
	        }
	
	        /**
	         *
	         * @param procedure {URI} the URI of the procedure to register
	         * @param endpoint {Function} the function that provides the procedure implementation
	         *      The endpoint must be a callable with params
	         *      `function (args, kwargs, details)`
	         *      where:
	         *      * args is an array with call arguments
	         *      * kwargs is an object with call arguments
	         *      * details is an object which provides call metadata*
	         *
	         * @param options {Object} optional - specifies options for registration (see below)
	         * @returns {Promise.<autobahn.Registration>} a promise that resolves to an instance of autobahn.Registration
	         *      when successful, or rejects with an instance of autobahn.Error when unsuccessful.
	         */
	    }, {
	        key: 'register',
	        value: function register(procedure, endpoint, options) {
	            return this.getSession().then(function (session) {
	                return session.register(procedure, endpoint, options);
	            });
	        }
	    }, {
	        key: 'unsubscribe',
	        value: function unsubscribe(subscription) {
	            return this.getSession().then(function (session) {
	                return session.unsubscribe(subscription);
	            });
	        }
	    }, {
	        key: 'unregister',
	        value: function unregister(registration) {
	            return this.getSession().then(function (session) {
	                return session.unregister(registration);
	            });
	        }
	    }, {
	        key: 'connect',
	        value: function connect() {
	            var _this2 = this;
	
	            var connection = new autobahn.Connection((0, _extendJs.extend)(true, {
	                transports: [{
	                    type: 'websocket',
	                    url: this.config.url
	                }, {
	                    type: 'comet',
	                    url: this.config.cometURL
	                }]
	            }, this.config));
	
	            var deferred = autobahn.when.defer();
	            connection.onopen = function (session) {
	                deferred.resolve(session);
	            };
	
	            connection.onclose = function () {
	                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                    args[_key] = arguments[_key];
	                }
	
	                if (_this2._session) {
	                    deferred.reject.apply(args);
	                }
	                _this2._session = null;
	                if (typeof _this2.onclose === 'function') {
	                    _this2.onclose.apply(args);
	                }
	            };
	            this._session = deferred.promise;
	            connection.open();
	            return this._session;
	        }
	    }, {
	        key: 'getSession',
	        value: function getSession() {
	            if (this._session) {
	                return this._session;
	            }
	            return this.connect();
	        }
	    }, {
	        key: 'call',
	        value: function call(procedure, params, options) {
	            return this.callRaw(procedure, [], params, options).then(function (response) {
	                return response.kwargs;
	            });
	        }
	    }, {
	        key: 'callRaw',
	        value: function callRaw(procedure, args, kwargs, options) {
	            return this.getSession().then(function (session) {
	                return session.call(procedure, args, kwargs, options);
	            });
	        }
	    }]);
	
	    return WebApi;
	})();
	
	exports['default'] = WebApi;
	module.exports = exports['default'];

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _commetTransportClassJs = __webpack_require__(5);
	
	var _commetTransportClassJs2 = _interopRequireDefault(_commetTransportClassJs);
	
	var CometTransportFactory = (function () {
	    function CometTransportFactory(config) {
	        _classCallCheck(this, CometTransportFactory);
	
	        this.config = config;
	        this.info = {
	            type: 'comet',
	            protocol: 'wamp.2.json'
	        };
	    }
	
	    _createClass(CometTransportFactory, [{
	        key: 'create',
	        value: function create() {
	            return new _commetTransportClassJs2['default'](this.config);
	        }
	    }]);
	
	    return CometTransportFactory;
	})();
	
	exports['default'] = CometTransportFactory;
	
	CometTransportFactory.prototype.type = "comet";
	module.exports = exports['default'];

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var EmComet = (function () {
	    function EmComet(options) {
	        _classCallCheck(this, EmComet);
	
	        this._init = function () {
	
	            if (typeof this.onopen === 'function' && typeof this.onmessage === 'function') {
	                this._connect();
	            } else {
	                this._initTimeoutId = setTimeout(this._init.bind(this), 300);
	            }
	        };
	
	        this.protocol = "wamp";
	        this.onopen = null;
	        this.onmessage = null;
	        this.onclose = null;
	        this._errorCount = 0;
	        this.sessionID = void 0;
	        this.FALLBACK_API_URL = options.url;
	        this.closed = true;
	        this._init();
	    }
	
	    _createClass(EmComet, [{
	        key: "send",
	        value: function send(text) {
	            var $form, $hidden, $iframe, iid, url;
	            url = this.FALLBACK_API_URL + '/api/send?sid=' + this.sessionID + "&v=2&message=" + encodeURIComponent(JSON.stringify(text));
	            if (text.length <= 1500) {
	                jQuery.ajax({
	                    type: "GET",
	                    url: url,
	                    dataType: 'jsonp'
	                });
	            } else {
	                iid = "iframe_" + new Date().getTime() + Math.random();
	                $iframe = $('<iframe id="' + iid + '" name="' + iid + '" style="display:none" width="1px" height="1px"></iframe>').appendTo(document.body);
	                $form = $('<form style="display:none" method="post"></form>').appendTo($iframe);
	                $form.attr('target', iid).attr('action', url);
	                $hidden = $('<input type="hidden" name="message" />').appendTo($form);
	                $hidden.val(text);
	                $form.submit();
	            }
	        }
	    }, {
	        key: "close",
	        value: function close(status) {
	            this.closed = true;
	            if (typeof this.onclose === 'function') {
	                this.onclose({
	                    code: status || 1000,
	                    reason: "comet closed",
	                    wasClean: true
	                });
	            }
	        }
	    }, {
	        key: "_connect",
	        value: function _connect() {
	            var me = this;
	            var sendConnect;
	            this._errorCount = 0;
	            sendConnect = function () {
	                var url;
	                url = me.FALLBACK_API_URL + '/api/connect?v=2&jsoncallback=?';
	                jQuery.ajax({
	                    type: "GET",
	                    url: url,
	                    dataType: 'jsonp'
	                }).then(function (data) {
	                    var json;
	                    json = JSON.parse(data);
	                    if (json instanceof Array && json.length > 1 && json[0] === 0) {
	                        //    //json[0] = 2;
	                        me.sessionID = json[1];
	                        me.onopen();
	                        me.closed = false;
	                        me._afterInit();
	                    } else {
	                        sendConnect();
	                    }
	                }, function (err) {
	                    me._errorCount++;
	                    if (me._errorCount > 3) {
	                        if (typeof me.onclose === 'function') {
	                            me.onclose({
	                                code: 1001,
	                                reason: err,
	                                wasClean: false
	                            });
	                        }
	                    } else {
	                        sendConnect();
	                    }
	                });
	            };
	            sendConnect();
	        }
	    }, {
	        key: "_afterInit",
	        value: function _afterInit() {
	            var me = this;
	            var receiveMsg = function receiveMsg() {
	                var url;
	                url = me.FALLBACK_API_URL + '/api/messages?sid=' + me.sessionID + "&jsoncallback=?";
	                jQuery.ajax({
	                    url: url,
	                    method: 'GET',
	                    dataType: 'jsonp'
	                }).then(function (json) {
	                    var i, len;
	                    me._errorCount = 0;
	                    if (json.success) {
	                        if (json.messages !== null && json.messages instanceof Array) {
	                            for (i = 0, len = json.messages.length; i < len; i++) {
	                                me.onmessage(JSON.parse(json.messages[i]));
	                            }
	                        }
	                        if (!me.closed) {
	                            receiveMsg();
	                        }
	                    } else {
	                        if (typeof me.onclose === 'function') {
	                            return me.onclose({
	                                code: 1001,
	                                reason: '',
	                                wasClean: false
	                            });
	                        }
	                    }
	                }, function (error) {
	                    if (++me._errorCount > 3) {
	                        if (typeof me.onclose === 'function') {
	                            me.onclose({
	                                code: 1001,
	                                reason: '',
	                                wasClean: false
	                            });
	                        }
	                    } else {
	                        if (!me.closed) {
	                            receiveMsg();
	                        }
	                    }
	                });
	            };
	            if (!me.closed) {
	                receiveMsg();
	            }
	        }
	    }]);
	
	    return EmComet;
	})();
	
	exports["default"] = EmComet;
	module.exports = exports["default"];

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	//
	//  AutobahnJS - http://autobahn.ws, http://wamp.ws
	//
	//  A JavaScript library for WAMP ("The Web Application Messaging Protocol").
	//
	//  Copyright (C) 2011-2014 Tavendo GmbH, http://tavendo.com
	//
	//  Licensed under the MIT License.
	//  http://www.opensource.org/licenses/mit-license.php
	//
	///////////////////////////////////////////////////////////////////////////////
	
	'use strict';
	
	module.exports = __webpack_require__(7);

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {///////////////////////////////////////////////////////////////////////////////
	//
	//  AutobahnJS - http://autobahn.ws, http://wamp.ws
	//
	//  A JavaScript library for WAMP ("The Web Application Messaging Protocol").
	//
	//  Copyright (C) 2011-2014 Tavendo GmbH, http://tavendo.com
	//
	//  Licensed under the MIT License.
	//  http://www.opensource.org/licenses/mit-license.php
	//
	///////////////////////////////////////////////////////////////////////////////
	
	// Polyfills for <= IE9
	
	'use strict';
	
	var when = __webpack_require__(8);
	//var fn = require("when/function");
	
	if ('AUTOBAHN_DEBUG' in window && AUTOBAHN_DEBUG) {
	   // https://github.com/cujojs/when/blob/master/docs/api.md#whenmonitor
	   __webpack_require__(29);
	   if ('console' in window) {
	      console.log("AutobahnJS debug enabled");
	   }
	}
	
	var util = __webpack_require__(34);
	var log = __webpack_require__(35);
	var session = __webpack_require__(36);
	var connection = __webpack_require__(39);
	var configure = __webpack_require__(40);
	
	var persona = __webpack_require__(43);
	var cra = __webpack_require__(44);
	
	exports.version = '0.9.7-em-build';
	
	exports.transports = configure.transports;
	
	exports.Connection = connection.Connection;
	
	exports.Session = session.Session;
	exports.Invocation = session.Invocation;
	exports.Event = session.Event;
	exports.Result = session.Result;
	exports.Error = session.Error;
	exports.Subscription = session.Subscription;
	exports.Registration = session.Registration;
	exports.Publication = session.Publication;
	
	exports.auth_persona = persona.auth;
	exports.auth_cra = cra;
	
	exports.when = when;
	
	exports.util = util;
	exports.log = log;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
			var timed = __webpack_require__(18);
			var array = __webpack_require__(11);
			var flow = __webpack_require__(14);
			var fold = __webpack_require__(15);
			var inspect = __webpack_require__(16);
			var generate = __webpack_require__(17);
			var progress = __webpack_require__(9);
			var withThis = __webpack_require__(23);
			var unhandledRejection = __webpack_require__(24);
			var TimeoutError = __webpack_require__(22);
	
			var Promise = [array, flow, fold, generate, progress, inspect, withThis, timed, unhandledRejection].reduce(function (Promise, feature) {
				return feature(Promise);
			}, __webpack_require__(26));
	
			var apply = __webpack_require__(13)(Promise);
	
			// Public API
	
			when.promise = promise; // Create a pending promise
			when.resolve = Promise.resolve; // Create a resolved promise
			when.reject = Promise.reject; // Create a rejected promise
	
			when.lift = lift; // lift a function to return promises
			when['try'] = attempt; // call a function and return a promise
			when.attempt = attempt; // alias for when.try
	
			when.iterate = Promise.iterate; // DEPRECATED (use cujojs/most streams) Generate a stream of promises
			when.unfold = Promise.unfold; // DEPRECATED (use cujojs/most streams) Generate a stream of promises
	
			when.join = join; // Join 2 or more promises
	
			when.all = all; // Resolve a list of promises
			when.settle = settle; // Settle a list of promises
	
			when.any = lift(Promise.any); // One-winner race
			when.some = lift(Promise.some); // Multi-winner race
			when.race = lift(Promise.race); // First-to-settle race
	
			when.map = map; // Array.map() for promises
			when.filter = filter; // Array.filter() for promises
			when.reduce = lift(Promise.reduce); // Array.reduce() for promises
			when.reduceRight = lift(Promise.reduceRight); // Array.reduceRight() for promises
	
			when.isPromiseLike = isPromiseLike; // Is something promise-like, aka thenable
	
			when.Promise = Promise; // Promise constructor
			when.defer = defer; // Create a {promise, resolve, reject} tuple
	
			// Error types
	
			when.TimeoutError = TimeoutError;
	
			/**
	   * Get a trusted promise for x, or by transforming x with onFulfilled
	   *
	   * @param {*} x
	   * @param {function?} onFulfilled callback to be called when x is
	   *   successfully fulfilled.  If promiseOrValue is an immediate value, callback
	   *   will be invoked immediately.
	   * @param {function?} onRejected callback to be called when x is
	   *   rejected.
	   * @param {function?} onProgress callback to be called when progress updates
	   *   are issued for x. @deprecated
	   * @returns {Promise} a new promise that will fulfill with the return
	   *   value of callback or errback or the completion value of promiseOrValue if
	   *   callback and/or errback is not supplied.
	   */
			function when(x, onFulfilled, onRejected, onProgress) {
				var p = Promise.resolve(x);
				if (arguments.length < 2) {
					return p;
				}
	
				return p.then(onFulfilled, onRejected, onProgress);
			}
	
			/**
	   * Creates a new promise whose fate is determined by resolver.
	   * @param {function} resolver function(resolve, reject, notify)
	   * @returns {Promise} promise whose fate is determine by resolver
	   */
			function promise(resolver) {
				return new Promise(resolver);
			}
	
			/**
	   * Lift the supplied function, creating a version of f that returns
	   * promises, and accepts promises as arguments.
	   * @param {function} f
	   * @returns {Function} version of f that returns promises
	   */
			function lift(f) {
				return function () {
					for (var i = 0, l = arguments.length, a = new Array(l); i < l; ++i) {
						a[i] = arguments[i];
					}
					return apply(f, this, a);
				};
			}
	
			/**
	   * Call f in a future turn, with the supplied args, and return a promise
	   * for the result.
	   * @param {function} f
	   * @returns {Promise}
	   */
			function attempt(f /*, args... */) {
				/*jshint validthis:true */
				for (var i = 0, l = arguments.length - 1, a = new Array(l); i < l; ++i) {
					a[i] = arguments[i + 1];
				}
				return apply(f, this, a);
			}
	
			/**
	   * Creates a {promise, resolver} pair, either or both of which
	   * may be given out safely to consumers.
	   * @return {{promise: Promise, resolve: function, reject: function, notify: function}}
	   */
			function defer() {
				return new Deferred();
			}
	
			function Deferred() {
				var p = Promise._defer();
	
				function resolve(x) {
					p._handler.resolve(x);
				}
				function reject(x) {
					p._handler.reject(x);
				}
				function notify(x) {
					p._handler.notify(x);
				}
	
				this.promise = p;
				this.resolve = resolve;
				this.reject = reject;
				this.notify = notify;
				this.resolver = { resolve: resolve, reject: reject, notify: notify };
			}
	
			/**
	   * Determines if x is promise-like, i.e. a thenable object
	   * NOTE: Will return true for *any thenable object*, and isn't truly
	   * safe, since it may attempt to access the `then` property of x (i.e.
	   *  clever/malicious getters may do weird things)
	   * @param {*} x anything
	   * @returns {boolean} true if x is promise-like
	   */
			function isPromiseLike(x) {
				return x && typeof x.then === 'function';
			}
	
			/**
	   * Return a promise that will resolve only once all the supplied arguments
	   * have resolved. The resolution value of the returned promise will be an array
	   * containing the resolution values of each of the arguments.
	   * @param {...*} arguments may be a mix of promises and values
	   * @returns {Promise}
	   */
			function join() /* ...promises */{
				return Promise.all(arguments);
			}
	
			/**
	   * Return a promise that will fulfill once all input promises have
	   * fulfilled, or reject when any one input promise rejects.
	   * @param {array|Promise} promises array (or promise for an array) of promises
	   * @returns {Promise}
	   */
			function all(promises) {
				return when(promises, Promise.all);
			}
	
			/**
	   * Return a promise that will always fulfill with an array containing
	   * the outcome states of all input promises.  The returned promise
	   * will only reject if `promises` itself is a rejected promise.
	   * @param {array|Promise} promises array (or promise for an array) of promises
	   * @returns {Promise} promise for array of settled state descriptors
	   */
			function settle(promises) {
				return when(promises, Promise.settle);
			}
	
			/**
	   * Promise-aware array map function, similar to `Array.prototype.map()`,
	   * but input array may contain promises or values.
	   * @param {Array|Promise} promises array of anything, may contain promises and values
	   * @param {function(x:*, index:Number):*} mapFunc map function which may
	   *  return a promise or value
	   * @returns {Promise} promise that will fulfill with an array of mapped values
	   *  or reject if any input promise rejects.
	   */
			function map(promises, mapFunc) {
				return when(promises, function (promises) {
					return Promise.map(promises, mapFunc);
				});
			}
	
			/**
	   * Filter the provided array of promises using the provided predicate.  Input may
	   * contain promises and values
	   * @param {Array|Promise} promises array of promises and values
	   * @param {function(x:*, index:Number):boolean} predicate filtering predicate.
	   *  Must return truthy (or promise for truthy) for items to retain.
	   * @returns {Promise} promise that will fulfill with an array containing all items
	   *  for which predicate returned truthy.
	   */
			function filter(promises, predicate) {
				return when(promises, function (promises) {
					return Promise.filter(promises, predicate);
				});
			}
	
			return when;
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/**
	 * Promises/A+ and when() implementation
	 * when is part of the cujoJS family of libraries (http://cujojs.com/)
	 * @author Brian Cavalier
	 * @author John Hann
	 */

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			return function progress(Promise) {
	
				/**
	    * @deprecated
	    * Register a progress handler for this promise
	    * @param {function} onProgress
	    * @returns {Promise}
	    */
				Promise.prototype.progress = function (onProgress) {
					return this.then(void 0, void 0, onProgress);
				};
	
				return Promise;
			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
			var state = __webpack_require__(12);
			var applier = __webpack_require__(13);
	
			return function array(Promise) {
	
				var applyFold = applier(Promise);
				var toPromise = Promise.resolve;
				var all = Promise.all;
	
				var ar = Array.prototype.reduce;
				var arr = Array.prototype.reduceRight;
				var slice = Array.prototype.slice;
	
				// Additional array combinators
	
				Promise.any = any;
				Promise.some = some;
				Promise.settle = settle;
	
				Promise.map = map;
				Promise.filter = filter;
				Promise.reduce = reduce;
				Promise.reduceRight = reduceRight;
	
				/**
	    * When this promise fulfills with an array, do
	    * onFulfilled.apply(void 0, array)
	    * @param {function} onFulfilled function to apply
	    * @returns {Promise} promise for the result of applying onFulfilled
	    */
				Promise.prototype.spread = function (onFulfilled) {
					return this.then(all).then(function (array) {
						return onFulfilled.apply(this, array);
					});
				};
	
				return Promise;
	
				/**
	    * One-winner competitive race.
	    * Return a promise that will fulfill when one of the promises
	    * in the input array fulfills, or will reject when all promises
	    * have rejected.
	    * @param {array} promises
	    * @returns {Promise} promise for the first fulfilled value
	    */
				function any(promises) {
					var p = Promise._defer();
					var resolver = p._handler;
					var l = promises.length >>> 0;
	
					var pending = l;
					var errors = [];
	
					for (var h, x, i = 0; i < l; ++i) {
						x = promises[i];
						if (x === void 0 && !(i in promises)) {
							--pending;
							continue;
						}
	
						h = Promise._handler(x);
						if (h.state() > 0) {
							resolver.become(h);
							Promise._visitRemaining(promises, i, h);
							break;
						} else {
							h.visit(resolver, handleFulfill, handleReject);
						}
					}
	
					if (pending === 0) {
						resolver.reject(new RangeError('any(): array must not be empty'));
					}
	
					return p;
	
					function handleFulfill(x) {
						/*jshint validthis:true*/
						errors = null;
						this.resolve(x); // this === resolver
					}
	
					function handleReject(e) {
						/*jshint validthis:true*/
						if (this.resolved) {
							// this === resolver
							return;
						}
	
						errors.push(e);
						if (--pending === 0) {
							this.reject(errors);
						}
					}
				}
	
				/**
	    * N-winner competitive race
	    * Return a promise that will fulfill when n input promises have
	    * fulfilled, or will reject when it becomes impossible for n
	    * input promises to fulfill (ie when promises.length - n + 1
	    * have rejected)
	    * @param {array} promises
	    * @param {number} n
	    * @returns {Promise} promise for the earliest n fulfillment values
	    *
	    * @deprecated
	    */
				function some(promises, n) {
					/*jshint maxcomplexity:7*/
					var p = Promise._defer();
					var resolver = p._handler;
	
					var results = [];
					var errors = [];
	
					var l = promises.length >>> 0;
					var nFulfill = 0;
					var nReject;
					var x, i; // reused in both for() loops
	
					// First pass: count actual array items
					for (i = 0; i < l; ++i) {
						x = promises[i];
						if (x === void 0 && !(i in promises)) {
							continue;
						}
						++nFulfill;
					}
	
					// Compute actual goals
					n = Math.max(n, 0);
					nReject = nFulfill - n + 1;
					nFulfill = Math.min(n, nFulfill);
	
					if (n > nFulfill) {
						resolver.reject(new RangeError('some(): array must contain at least ' + n + ' item(s), but had ' + nFulfill));
					} else if (nFulfill === 0) {
						resolver.resolve(results);
					}
	
					// Second pass: observe each array item, make progress toward goals
					for (i = 0; i < l; ++i) {
						x = promises[i];
						if (x === void 0 && !(i in promises)) {
							continue;
						}
	
						Promise._handler(x).visit(resolver, fulfill, reject, resolver.notify);
					}
	
					return p;
	
					function fulfill(x) {
						/*jshint validthis:true*/
						if (this.resolved) {
							// this === resolver
							return;
						}
	
						results.push(x);
						if (--nFulfill === 0) {
							errors = null;
							this.resolve(results);
						}
					}
	
					function reject(e) {
						/*jshint validthis:true*/
						if (this.resolved) {
							// this === resolver
							return;
						}
	
						errors.push(e);
						if (--nReject === 0) {
							results = null;
							this.reject(errors);
						}
					}
				}
	
				/**
	    * Apply f to the value of each promise in a list of promises
	    * and return a new list containing the results.
	    * @param {array} promises
	    * @param {function(x:*, index:Number):*} f mapping function
	    * @returns {Promise}
	    */
				function map(promises, f) {
					return Promise._traverse(f, promises);
				}
	
				/**
	    * Filter the provided array of promises using the provided predicate.  Input may
	    * contain promises and values
	    * @param {Array} promises array of promises and values
	    * @param {function(x:*, index:Number):boolean} predicate filtering predicate.
	    *  Must return truthy (or promise for truthy) for items to retain.
	    * @returns {Promise} promise that will fulfill with an array containing all items
	    *  for which predicate returned truthy.
	    */
				function filter(promises, predicate) {
					var a = slice.call(promises);
					return Promise._traverse(predicate, a).then(function (keep) {
						return filterSync(a, keep);
					});
				}
	
				function filterSync(promises, keep) {
					// Safe because we know all promises have fulfilled if we've made it this far
					var l = keep.length;
					var filtered = new Array(l);
					for (var i = 0, j = 0; i < l; ++i) {
						if (keep[i]) {
							filtered[j++] = Promise._handler(promises[i]).value;
						}
					}
					filtered.length = j;
					return filtered;
				}
	
				/**
	    * Return a promise that will always fulfill with an array containing
	    * the outcome states of all input promises.  The returned promise
	    * will never reject.
	    * @param {Array} promises
	    * @returns {Promise} promise for array of settled state descriptors
	    */
				function settle(promises) {
					return all(promises.map(settleOne));
				}
	
				function settleOne(p) {
					var h = Promise._handler(p);
					if (h.state() === 0) {
						return toPromise(p).then(state.fulfilled, state.rejected);
					}
	
					h._unreport();
					return state.inspect(h);
				}
	
				/**
	    * Traditional reduce function, similar to `Array.prototype.reduce()`, but
	    * input may contain promises and/or values, and reduceFunc
	    * may return either a value or a promise, *and* initialValue may
	    * be a promise for the starting value.
	    * @param {Array|Promise} promises array or promise for an array of anything,
	    *      may contain a mix of promises and values.
	    * @param {function(accumulated:*, x:*, index:Number):*} f reduce function
	    * @returns {Promise} that will resolve to the final reduced value
	    */
				function reduce(promises, f /*, initialValue */) {
					return arguments.length > 2 ? ar.call(promises, liftCombine(f), arguments[2]) : ar.call(promises, liftCombine(f));
				}
	
				/**
	    * Traditional reduce function, similar to `Array.prototype.reduceRight()`, but
	    * input may contain promises and/or values, and reduceFunc
	    * may return either a value or a promise, *and* initialValue may
	    * be a promise for the starting value.
	    * @param {Array|Promise} promises array or promise for an array of anything,
	    *      may contain a mix of promises and values.
	    * @param {function(accumulated:*, x:*, index:Number):*} f reduce function
	    * @returns {Promise} that will resolve to the final reduced value
	    */
				function reduceRight(promises, f /*, initialValue */) {
					return arguments.length > 2 ? arr.call(promises, liftCombine(f), arguments[2]) : arr.call(promises, liftCombine(f));
				}
	
				function liftCombine(f) {
					return function (z, x, i) {
						return applyFold(f, void 0, [z, x, i]);
					};
				}
			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			return {
				pending: toPendingState,
				fulfilled: toFulfilledState,
				rejected: toRejectedState,
				inspect: inspect
			};
	
			function toPendingState() {
				return { state: 'pending' };
			}
	
			function toRejectedState(e) {
				return { state: 'rejected', reason: e };
			}
	
			function toFulfilledState(x) {
				return { state: 'fulfilled', value: x };
			}
	
			function inspect(handler) {
				var state = handler.state();
				return state === 0 ? toPendingState() : state > 0 ? toFulfilledState(handler.value) : toRejectedState(handler.value);
			}
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			makeApply.tryCatchResolve = tryCatchResolve;
	
			return makeApply;
	
			function makeApply(Promise, call) {
				if (arguments.length < 2) {
					call = tryCatchResolve;
				}
	
				return apply;
	
				function apply(f, thisArg, args) {
					var p = Promise._defer();
					var l = args.length;
					var params = new Array(l);
					callAndResolve({ f: f, thisArg: thisArg, args: args, params: params, i: l - 1, call: call }, p._handler);
	
					return p;
				}
	
				function callAndResolve(c, h) {
					if (c.i < 0) {
						return call(c.f, c.thisArg, c.params, h);
					}
	
					var handler = Promise._handler(c.args[c.i]);
					handler.fold(callAndResolveNext, c, void 0, h);
				}
	
				function callAndResolveNext(c, x, h) {
					c.params[c.i] = x;
					c.i -= 1;
					callAndResolve(c, h);
				}
			}
	
			function tryCatchResolve(f, thisArg, args, resolver) {
				try {
					resolver.resolve(f.apply(thisArg, args));
				} catch (e) {
					resolver.reject(e);
				}
			}
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			return function flow(Promise) {
	
				var resolve = Promise.resolve;
				var reject = Promise.reject;
				var origCatch = Promise.prototype['catch'];
	
				/**
	    * Handle the ultimate fulfillment value or rejection reason, and assume
	    * responsibility for all errors.  If an error propagates out of result
	    * or handleFatalError, it will be rethrown to the host, resulting in a
	    * loud stack track on most platforms and a crash on some.
	    * @param {function?} onResult
	    * @param {function?} onError
	    * @returns {undefined}
	    */
				Promise.prototype.done = function (onResult, onError) {
					this._handler.visit(this._handler.receiver, onResult, onError);
				};
	
				/**
	    * Add Error-type and predicate matching to catch.  Examples:
	    * promise.catch(TypeError, handleTypeError)
	    *   .catch(predicate, handleMatchedErrors)
	    *   .catch(handleRemainingErrors)
	    * @param onRejected
	    * @returns {*}
	    */
				Promise.prototype['catch'] = Promise.prototype.otherwise = function (onRejected) {
					if (arguments.length < 2) {
						return origCatch.call(this, onRejected);
					}
	
					if (typeof onRejected !== 'function') {
						return this.ensure(rejectInvalidPredicate);
					}
	
					return origCatch.call(this, createCatchFilter(arguments[1], onRejected));
				};
	
				/**
	    * Wraps the provided catch handler, so that it will only be called
	    * if the predicate evaluates truthy
	    * @param {?function} handler
	    * @param {function} predicate
	    * @returns {function} conditional catch handler
	    */
				function createCatchFilter(handler, predicate) {
					return function (e) {
						return evaluatePredicate(e, predicate) ? handler.call(this, e) : reject(e);
					};
				}
	
				/**
	    * Ensures that onFulfilledOrRejected will be called regardless of whether
	    * this promise is fulfilled or rejected.  onFulfilledOrRejected WILL NOT
	    * receive the promises' value or reason.  Any returned value will be disregarded.
	    * onFulfilledOrRejected may throw or return a rejected promise to signal
	    * an additional error.
	    * @param {function} handler handler to be called regardless of
	    *  fulfillment or rejection
	    * @returns {Promise}
	    */
				Promise.prototype['finally'] = Promise.prototype.ensure = function (handler) {
					if (typeof handler !== 'function') {
						return this;
					}
	
					return this.then(function (x) {
						return runSideEffect(handler, this, identity, x);
					}, function (e) {
						return runSideEffect(handler, this, reject, e);
					});
				};
	
				function runSideEffect(handler, thisArg, propagate, value) {
					var result = handler.call(thisArg);
					return maybeThenable(result) ? propagateValue(result, propagate, value) : propagate(value);
				}
	
				function propagateValue(result, propagate, x) {
					return resolve(result).then(function () {
						return propagate(x);
					});
				}
	
				/**
	    * Recover from a failure by returning a defaultValue.  If defaultValue
	    * is a promise, it's fulfillment value will be used.  If defaultValue is
	    * a promise that rejects, the returned promise will reject with the
	    * same reason.
	    * @param {*} defaultValue
	    * @returns {Promise} new promise
	    */
				Promise.prototype['else'] = Promise.prototype.orElse = function (defaultValue) {
					return this.then(void 0, function () {
						return defaultValue;
					});
				};
	
				/**
	    * Shortcut for .then(function() { return value; })
	    * @param  {*} value
	    * @return {Promise} a promise that:
	    *  - is fulfilled if value is not a promise, or
	    *  - if value is a promise, will fulfill with its value, or reject
	    *    with its reason.
	    */
				Promise.prototype['yield'] = function (value) {
					return this.then(function () {
						return value;
					});
				};
	
				/**
	    * Runs a side effect when this promise fulfills, without changing the
	    * fulfillment value.
	    * @param {function} onFulfilledSideEffect
	    * @returns {Promise}
	    */
				Promise.prototype.tap = function (onFulfilledSideEffect) {
					return this.then(onFulfilledSideEffect)['yield'](this);
				};
	
				return Promise;
			};
	
			function rejectInvalidPredicate() {
				throw new TypeError('catch predicate must be a function');
			}
	
			function evaluatePredicate(e, predicate) {
				return isError(predicate) ? e instanceof predicate : predicate(e);
			}
	
			function isError(predicate) {
				return predicate === Error || predicate != null && predicate.prototype instanceof Error;
			}
	
			function maybeThenable(x) {
				return (typeof x === 'object' || typeof x === 'function') && x !== null;
			}
	
			function identity(x) {
				return x;
			}
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			return function fold(Promise) {
	
				Promise.prototype.fold = function (f, z) {
					var promise = this._beget();
	
					this._handler.fold(function (z, x, to) {
						Promise._handler(z).fold(function (x, z, to) {
							to.resolve(f.call(this, z, x));
						}, x, this, to);
					}, z, promise._handler.receiver, promise._handler);
	
					return promise;
				};
	
				return Promise;
			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author Jeff Escalante */

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
			var inspect = __webpack_require__(12).inspect;
	
			return function inspection(Promise) {
	
				Promise.prototype.inspect = function () {
					return inspect(Promise._handler(this));
				};
	
				return Promise;
			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			return function generate(Promise) {
	
				var resolve = Promise.resolve;
	
				Promise.iterate = iterate;
				Promise.unfold = unfold;
	
				return Promise;
	
				/**
	    * @deprecated Use github.com/cujojs/most streams and most.iterate
	    * Generate a (potentially infinite) stream of promised values:
	    * x, f(x), f(f(x)), etc. until condition(x) returns true
	    * @param {function} f function to generate a new x from the previous x
	    * @param {function} condition function that, given the current x, returns
	    *  truthy when the iterate should stop
	    * @param {function} handler function to handle the value produced by f
	    * @param {*|Promise} x starting value, may be a promise
	    * @return {Promise} the result of the last call to f before
	    *  condition returns true
	    */
				function iterate(f, condition, handler, x) {
					return unfold(function (x) {
						return [x, f(x)];
					}, condition, handler, x);
				}
	
				/**
	    * @deprecated Use github.com/cujojs/most streams and most.unfold
	    * Generate a (potentially infinite) stream of promised values
	    * by applying handler(generator(seed)) iteratively until
	    * condition(seed) returns true.
	    * @param {function} unspool function that generates a [value, newSeed]
	    *  given a seed.
	    * @param {function} condition function that, given the current seed, returns
	    *  truthy when the unfold should stop
	    * @param {function} handler function to handle the value produced by unspool
	    * @param x {*|Promise} starting value, may be a promise
	    * @return {Promise} the result of the last value produced by unspool before
	    *  condition returns true
	    */
				function unfold(unspool, condition, handler, x) {
					return resolve(x).then(function (seed) {
						return resolve(condition(seed)).then(function (done) {
							return done ? seed : resolve(unspool(seed)).spread(next);
						});
					});
	
					function next(item, newSeed) {
						return resolve(handler(item)).then(function () {
							return unfold(unspool, condition, handler, newSeed);
						});
					}
				}
			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
			var env = __webpack_require__(19);
			var TimeoutError = __webpack_require__(22);
	
			function setTimeout(f, ms, x, y) {
				return env.setTimer(function () {
					f(x, y, ms);
				}, ms);
			}
	
			return function timed(Promise) {
				/**
	    * Return a new promise whose fulfillment value is revealed only
	    * after ms milliseconds
	    * @param {number} ms milliseconds
	    * @returns {Promise}
	    */
				Promise.prototype.delay = function (ms) {
					var p = this._beget();
					this._handler.fold(handleDelay, ms, void 0, p._handler);
					return p;
				};
	
				function handleDelay(ms, x, h) {
					setTimeout(resolveDelay, ms, x, h);
				}
	
				function resolveDelay(x, h) {
					h.resolve(x);
				}
	
				/**
	    * Return a new promise that rejects after ms milliseconds unless
	    * this promise fulfills earlier, in which case the returned promise
	    * fulfills with the same value.
	    * @param {number} ms milliseconds
	    * @param {Error|*=} reason optional rejection reason to use, defaults
	    *   to a TimeoutError if not provided
	    * @returns {Promise}
	    */
				Promise.prototype.timeout = function (ms, reason) {
					var p = this._beget();
					var h = p._handler;
	
					var t = setTimeout(onTimeout, ms, reason, p._handler);
	
					this._handler.visit(h, function onFulfill(x) {
						env.clearTimer(t);
						this.resolve(x); // this = h
					}, function onReject(x) {
						env.clearTimer(t);
						this.reject(x); // this = h
					}, h.notify);
	
					return p;
				};
	
				function onTimeout(reason, h, ms) {
					var e = typeof reason === 'undefined' ? new TimeoutError('timed out after ' + ms + 'ms') : reason;
					h.reject(e);
				}
	
				return Promise;
			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;var require;/* WEBPACK VAR INJECTION */(function(process) {/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */
	
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
			/*jshint maxcomplexity:6*/
	
			// Sniff "best" async scheduling option
			// Prefer process.nextTick or MutationObserver, then check for
			// setTimeout, and finally vertx, since its the only env that doesn't
			// have setTimeout
	
			var MutationObs;
			var capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;
	
			// Default env
			var setTimer = function setTimer(f, ms) {
				return setTimeout(f, ms);
			};
			var clearTimer = function clearTimer(t) {
				return clearTimeout(t);
			};
			var asap = function asap(f) {
				return capturedSetTimeout(f, 0);
			};
	
			// Detect specific env
			if (isNode()) {
				// Node
				asap = function (f) {
					return process.nextTick(f);
				};
			} else if (MutationObs = hasMutationObserver()) {
				// Modern browser
				asap = initMutationObserver(MutationObs);
			} else if (!capturedSetTimeout) {
				// vert.x
				var vertxRequire = require;
				var vertx = __webpack_require__(21);
				setTimer = function (f, ms) {
					return vertx.setTimer(ms, f);
				};
				clearTimer = vertx.cancelTimer;
				asap = vertx.runOnLoop || vertx.runOnContext;
			}
	
			return {
				setTimer: setTimer,
				clearTimer: clearTimer,
				asap: asap
			};
	
			function isNode() {
				return typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]';
			}
	
			function hasMutationObserver() {
				return typeof MutationObserver === 'function' && MutationObserver || typeof WebKitMutationObserver === 'function' && WebKitMutationObserver;
			}
	
			function initMutationObserver(MutationObserver) {
				var scheduled;
				var node = document.createTextNode('');
				var o = new MutationObserver(run);
				o.observe(node, { characterData: true });
	
				function run() {
					var f = scheduled;
					scheduled = void 0;
					f();
				}
	
				var i = 0;
				return function (f) {
					scheduled = f;
					node.data = i ^= 1;
				};
			}
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20)))

/***/ },
/* 20 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	'use strict';
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	// TODO(shtylman)
	process.cwd = function () {
	    return '/';
	};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {
	    return 0;
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			/**
	   * Custom error type for promises rejected by promise.timeout
	   * @param {string} message
	   * @constructor
	   */
			function TimeoutError(message) {
				Error.call(this);
				this.message = message;
				this.name = TimeoutError.name;
				if (typeof Error.captureStackTrace === 'function') {
					Error.captureStackTrace(this, TimeoutError);
				}
			}
	
			TimeoutError.prototype = Object.create(Error.prototype);
			TimeoutError.prototype.constructor = TimeoutError;
	
			return TimeoutError;
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			return function addWith(Promise) {
				/**
	    * Returns a promise whose handlers will be called with `this` set to
	    * the supplied receiver.  Subsequent promises derived from the
	    * returned promise will also have their handlers called with receiver
	    * as `this`. Calling `with` with undefined or no arguments will return
	    * a promise whose handlers will again be called in the usual Promises/A+
	    * way (no `this`) thus safely undoing any previous `with` in the
	    * promise chain.
	    *
	    * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+
	    * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)
	    *
	    * @param {object} receiver `this` value for all handlers attached to
	    *  the returned promise.
	    * @returns {Promise}
	    */
				Promise.prototype['with'] = Promise.prototype.withThis = function (receiver) {
					var p = this._beget();
					var child = p._handler;
					child.receiver = receiver;
					this._handler.chain(child, receiver);
					return p;
				};
	
				return Promise;
			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
			var setTimer = __webpack_require__(19).setTimer;
			var format = __webpack_require__(25);
	
			return function unhandledRejection(Promise) {
	
				var logError = noop;
				var logInfo = noop;
				var localConsole;
	
				if (typeof console !== 'undefined') {
					// Alias console to prevent things like uglify's drop_console option from
					// removing console.log/error. Unhandled rejections fall into the same
					// category as uncaught exceptions, and build tools shouldn't silence them.
					localConsole = console;
					logError = typeof localConsole.error !== 'undefined' ? function (e) {
						localConsole.error(e);
					} : function (e) {
						localConsole.log(e);
					};
	
					logInfo = typeof localConsole.info !== 'undefined' ? function (e) {
						localConsole.info(e);
					} : function (e) {
						localConsole.log(e);
					};
				}
	
				Promise.onPotentiallyUnhandledRejection = function (rejection) {
					enqueue(report, rejection);
				};
	
				Promise.onPotentiallyUnhandledRejectionHandled = function (rejection) {
					enqueue(unreport, rejection);
				};
	
				Promise.onFatalRejection = function (rejection) {
					enqueue(throwit, rejection.value);
				};
	
				var tasks = [];
				var reported = [];
				var running = null;
	
				function report(r) {
					if (!r.handled) {
						reported.push(r);
						logError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));
					}
				}
	
				function unreport(r) {
					var i = reported.indexOf(r);
					if (i >= 0) {
						reported.splice(i, 1);
						logInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));
					}
				}
	
				function enqueue(f, x) {
					tasks.push(f, x);
					if (running === null) {
						running = setTimer(flush, 0);
					}
				}
	
				function flush() {
					running = null;
					while (tasks.length > 0) {
						tasks.shift()(tasks.shift());
					}
				}
	
				return Promise;
			};
	
			function throwit(e) {
				throw e;
			}
	
			function noop() {}
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			return {
				formatError: formatError,
				formatObject: formatObject,
				tryStringify: tryStringify
			};
	
			/**
	   * Format an error into a string.  If e is an Error and has a stack property,
	   * it's returned.  Otherwise, e is formatted using formatObject, with a
	   * warning added about e not being a proper Error.
	   * @param {*} e
	   * @returns {String} formatted string, suitable for output to developers
	   */
			function formatError(e) {
				var s = typeof e === 'object' && e !== null && e.stack ? e.stack : formatObject(e);
				return e instanceof Error ? s : s + ' (WARNING: non-Error used)';
			}
	
			/**
	   * Format an object, detecting "plain" objects and running them through
	   * JSON.stringify if possible.
	   * @param {Object} o
	   * @returns {string}
	   */
			function formatObject(o) {
				var s = String(o);
				if (s === '[object Object]' && typeof JSON !== 'undefined') {
					s = tryStringify(o, s);
				}
				return s;
			}
	
			/**
	   * Try to return the result of JSON.stringify(x).  If that fails, return
	   * defaultValue
	   * @param {*} x
	   * @param {*} defaultValue
	   * @returns {String|*} JSON.stringify(x) or defaultValue
	   */
			function tryStringify(x, defaultValue) {
				try {
					return JSON.stringify(x);
				} catch (e) {
					return defaultValue;
				}
			}
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
			var makePromise = __webpack_require__(27);
			var Scheduler = __webpack_require__(28);
			var async = __webpack_require__(19).asap;
	
			return makePromise({
				scheduler: new Scheduler(async)
			});
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process) {/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			return function makePromise(environment) {
	
				var tasks = environment.scheduler;
				var emitRejection = initEmitRejection();
	
				var objectCreate = Object.create || function (proto) {
					function Child() {}
					Child.prototype = proto;
					return new Child();
				};
	
				/**
	    * Create a promise whose fate is determined by resolver
	    * @constructor
	    * @returns {Promise} promise
	    * @name Promise
	    */
				function Promise(resolver, handler) {
					this._handler = resolver === Handler ? handler : init(resolver);
				}
	
				/**
	    * Run the supplied resolver
	    * @param resolver
	    * @returns {Pending}
	    */
				function init(resolver) {
					var handler = new Pending();
	
					try {
						resolver(promiseResolve, promiseReject, promiseNotify);
					} catch (e) {
						promiseReject(e);
					}
	
					return handler;
	
					/**
	     * Transition from pre-resolution state to post-resolution state, notifying
	     * all listeners of the ultimate fulfillment or rejection
	     * @param {*} x resolution value
	     */
					function promiseResolve(x) {
						handler.resolve(x);
					}
					/**
	     * Reject this promise with reason, which will be used verbatim
	     * @param {Error|*} reason rejection reason, strongly suggested
	     *   to be an Error type
	     */
					function promiseReject(reason) {
						handler.reject(reason);
					}
	
					/**
	     * @deprecated
	     * Issue a progress event, notifying all progress listeners
	     * @param {*} x progress event payload to pass to all listeners
	     */
					function promiseNotify(x) {
						handler.notify(x);
					}
				}
	
				// Creation
	
				Promise.resolve = resolve;
				Promise.reject = reject;
				Promise.never = never;
	
				Promise._defer = defer;
				Promise._handler = getHandler;
	
				/**
	    * Returns a trusted promise. If x is already a trusted promise, it is
	    * returned, otherwise returns a new trusted Promise which follows x.
	    * @param  {*} x
	    * @return {Promise} promise
	    */
				function resolve(x) {
					return isPromise(x) ? x : new Promise(Handler, new Async(getHandler(x)));
				}
	
				/**
	    * Return a reject promise with x as its reason (x is used verbatim)
	    * @param {*} x
	    * @returns {Promise} rejected promise
	    */
				function reject(x) {
					return new Promise(Handler, new Async(new Rejected(x)));
				}
	
				/**
	    * Return a promise that remains pending forever
	    * @returns {Promise} forever-pending promise.
	    */
				function never() {
					return foreverPendingPromise; // Should be frozen
				}
	
				/**
	    * Creates an internal {promise, resolver} pair
	    * @private
	    * @returns {Promise}
	    */
				function defer() {
					return new Promise(Handler, new Pending());
				}
	
				// Transformation and flow control
	
				/**
	    * Transform this promise's fulfillment value, returning a new Promise
	    * for the transformed result.  If the promise cannot be fulfilled, onRejected
	    * is called with the reason.  onProgress *may* be called with updates toward
	    * this promise's fulfillment.
	    * @param {function=} onFulfilled fulfillment handler
	    * @param {function=} onRejected rejection handler
	    * @param {function=} onProgress @deprecated progress handler
	    * @return {Promise} new promise
	    */
				Promise.prototype.then = function (onFulfilled, onRejected, onProgress) {
					var parent = this._handler;
					var state = parent.join().state();
	
					if (typeof onFulfilled !== 'function' && state > 0 || typeof onRejected !== 'function' && state < 0) {
						// Short circuit: value will not change, simply share handler
						return new this.constructor(Handler, parent);
					}
	
					var p = this._beget();
					var child = p._handler;
	
					parent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);
	
					return p;
				};
	
				/**
	    * If this promise cannot be fulfilled due to an error, call onRejected to
	    * handle the error. Shortcut for .then(undefined, onRejected)
	    * @param {function?} onRejected
	    * @return {Promise}
	    */
				Promise.prototype['catch'] = function (onRejected) {
					return this.then(void 0, onRejected);
				};
	
				/**
	    * Creates a new, pending promise of the same type as this promise
	    * @private
	    * @returns {Promise}
	    */
				Promise.prototype._beget = function () {
					return begetFrom(this._handler, this.constructor);
				};
	
				function begetFrom(parent, Promise) {
					var child = new Pending(parent.receiver, parent.join().context);
					return new Promise(Handler, child);
				}
	
				// Array combinators
	
				Promise.all = all;
				Promise.race = race;
				Promise._traverse = traverse;
	
				/**
	    * Return a promise that will fulfill when all promises in the
	    * input array have fulfilled, or will reject when one of the
	    * promises rejects.
	    * @param {array} promises array of promises
	    * @returns {Promise} promise for array of fulfillment values
	    */
				function all(promises) {
					return traverseWith(snd, null, promises);
				}
	
				/**
	    * Array<Promise<X>> -> Promise<Array<f(X)>>
	    * @private
	    * @param {function} f function to apply to each promise's value
	    * @param {Array} promises array of promises
	    * @returns {Promise} promise for transformed values
	    */
				function traverse(f, promises) {
					return traverseWith(tryCatch2, f, promises);
				}
	
				function traverseWith(tryMap, f, promises) {
					var handler = typeof f === 'function' ? mapAt : settleAt;
	
					var resolver = new Pending();
					var pending = promises.length >>> 0;
					var results = new Array(pending);
	
					for (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {
						x = promises[i];
	
						if (x === void 0 && !(i in promises)) {
							--pending;
							continue;
						}
	
						traverseAt(promises, handler, i, x, resolver);
					}
	
					if (pending === 0) {
						resolver.become(new Fulfilled(results));
					}
	
					return new Promise(Handler, resolver);
	
					function mapAt(i, x, resolver) {
						if (!resolver.resolved) {
							traverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);
						}
					}
	
					function settleAt(i, x, resolver) {
						results[i] = x;
						if (--pending === 0) {
							resolver.become(new Fulfilled(results));
						}
					}
				}
	
				function traverseAt(promises, handler, i, x, resolver) {
					if (maybeThenable(x)) {
						var h = getHandlerMaybeThenable(x);
						var s = h.state();
	
						if (s === 0) {
							h.fold(handler, i, void 0, resolver);
						} else if (s > 0) {
							handler(i, h.value, resolver);
						} else {
							resolver.become(h);
							visitRemaining(promises, i + 1, h);
						}
					} else {
						handler(i, x, resolver);
					}
				}
	
				Promise._visitRemaining = visitRemaining;
				function visitRemaining(promises, start, handler) {
					for (var i = start; i < promises.length; ++i) {
						markAsHandled(getHandler(promises[i]), handler);
					}
				}
	
				function markAsHandled(h, handler) {
					if (h === handler) {
						return;
					}
	
					var s = h.state();
					if (s === 0) {
						h.visit(h, void 0, h._unreport);
					} else if (s < 0) {
						h._unreport();
					}
				}
	
				/**
	    * Fulfill-reject competitive race. Return a promise that will settle
	    * to the same state as the earliest input promise to settle.
	    *
	    * WARNING: The ES6 Promise spec requires that race()ing an empty array
	    * must return a promise that is pending forever.  This implementation
	    * returns a singleton forever-pending promise, the same singleton that is
	    * returned by Promise.never(), thus can be checked with ===
	    *
	    * @param {array} promises array of promises to race
	    * @returns {Promise} if input is non-empty, a promise that will settle
	    * to the same outcome as the earliest input promise to settle. if empty
	    * is empty, returns a promise that will never settle.
	    */
				function race(promises) {
					if (typeof promises !== 'object' || promises === null) {
						return reject(new TypeError('non-iterable passed to race()'));
					}
	
					// Sigh, race([]) is untestable unless we return *something*
					// that is recognizable without calling .then() on it.
					return promises.length === 0 ? never() : promises.length === 1 ? resolve(promises[0]) : runRace(promises);
				}
	
				function runRace(promises) {
					var resolver = new Pending();
					var i, x, h;
					for (i = 0; i < promises.length; ++i) {
						x = promises[i];
						if (x === void 0 && !(i in promises)) {
							continue;
						}
	
						h = getHandler(x);
						if (h.state() !== 0) {
							resolver.become(h);
							visitRemaining(promises, i + 1, h);
							break;
						} else {
							h.visit(resolver, resolver.resolve, resolver.reject);
						}
					}
					return new Promise(Handler, resolver);
				}
	
				// Promise internals
				// Below this, everything is @private
	
				/**
	    * Get an appropriate handler for x, without checking for cycles
	    * @param {*} x
	    * @returns {object} handler
	    */
				function getHandler(x) {
					if (isPromise(x)) {
						return x._handler.join();
					}
					return maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);
				}
	
				/**
	    * Get a handler for thenable x.
	    * NOTE: You must only call this if maybeThenable(x) == true
	    * @param {object|function|Promise} x
	    * @returns {object} handler
	    */
				function getHandlerMaybeThenable(x) {
					return isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);
				}
	
				/**
	    * Get a handler for potentially untrusted thenable x
	    * @param {*} x
	    * @returns {object} handler
	    */
				function getHandlerUntrusted(x) {
					try {
						var untrustedThen = x.then;
						return typeof untrustedThen === 'function' ? new Thenable(untrustedThen, x) : new Fulfilled(x);
					} catch (e) {
						return new Rejected(e);
					}
				}
	
				/**
	    * Handler for a promise that is pending forever
	    * @constructor
	    */
				function Handler() {}
	
				Handler.prototype.when = Handler.prototype.become = Handler.prototype.notify // deprecated
				 = Handler.prototype.fail = Handler.prototype._unreport = Handler.prototype._report = noop;
	
				Handler.prototype._state = 0;
	
				Handler.prototype.state = function () {
					return this._state;
				};
	
				/**
	    * Recursively collapse handler chain to find the handler
	    * nearest to the fully resolved value.
	    * @returns {object} handler nearest the fully resolved value
	    */
				Handler.prototype.join = function () {
					var h = this;
					while (h.handler !== void 0) {
						h = h.handler;
					}
					return h;
				};
	
				Handler.prototype.chain = function (to, receiver, fulfilled, rejected, progress) {
					this.when({
						resolver: to,
						receiver: receiver,
						fulfilled: fulfilled,
						rejected: rejected,
						progress: progress
					});
				};
	
				Handler.prototype.visit = function (receiver, fulfilled, rejected, progress) {
					this.chain(failIfRejected, receiver, fulfilled, rejected, progress);
				};
	
				Handler.prototype.fold = function (f, z, c, to) {
					this.when(new Fold(f, z, c, to));
				};
	
				/**
	    * Handler that invokes fail() on any handler it becomes
	    * @constructor
	    */
				function FailIfRejected() {}
	
				inherit(Handler, FailIfRejected);
	
				FailIfRejected.prototype.become = function (h) {
					h.fail();
				};
	
				var failIfRejected = new FailIfRejected();
	
				/**
	    * Handler that manages a queue of consumers waiting on a pending promise
	    * @constructor
	    */
				function Pending(receiver, inheritedContext) {
					Promise.createContext(this, inheritedContext);
	
					this.consumers = void 0;
					this.receiver = receiver;
					this.handler = void 0;
					this.resolved = false;
				}
	
				inherit(Handler, Pending);
	
				Pending.prototype._state = 0;
	
				Pending.prototype.resolve = function (x) {
					this.become(getHandler(x));
				};
	
				Pending.prototype.reject = function (x) {
					if (this.resolved) {
						return;
					}
	
					this.become(new Rejected(x));
				};
	
				Pending.prototype.join = function () {
					if (!this.resolved) {
						return this;
					}
	
					var h = this;
	
					while (h.handler !== void 0) {
						h = h.handler;
						if (h === this) {
							return this.handler = cycle();
						}
					}
	
					return h;
				};
	
				Pending.prototype.run = function () {
					var q = this.consumers;
					var handler = this.handler;
					this.handler = this.handler.join();
					this.consumers = void 0;
	
					for (var i = 0; i < q.length; ++i) {
						handler.when(q[i]);
					}
				};
	
				Pending.prototype.become = function (handler) {
					if (this.resolved) {
						return;
					}
	
					this.resolved = true;
					this.handler = handler;
					if (this.consumers !== void 0) {
						tasks.enqueue(this);
					}
	
					if (this.context !== void 0) {
						handler._report(this.context);
					}
				};
	
				Pending.prototype.when = function (continuation) {
					if (this.resolved) {
						tasks.enqueue(new ContinuationTask(continuation, this.handler));
					} else {
						if (this.consumers === void 0) {
							this.consumers = [continuation];
						} else {
							this.consumers.push(continuation);
						}
					}
				};
	
				/**
	    * @deprecated
	    */
				Pending.prototype.notify = function (x) {
					if (!this.resolved) {
						tasks.enqueue(new ProgressTask(x, this));
					}
				};
	
				Pending.prototype.fail = function (context) {
					var c = typeof context === 'undefined' ? this.context : context;
					this.resolved && this.handler.join().fail(c);
				};
	
				Pending.prototype._report = function (context) {
					this.resolved && this.handler.join()._report(context);
				};
	
				Pending.prototype._unreport = function () {
					this.resolved && this.handler.join()._unreport();
				};
	
				/**
	    * Wrap another handler and force it into a future stack
	    * @param {object} handler
	    * @constructor
	    */
				function Async(handler) {
					this.handler = handler;
				}
	
				inherit(Handler, Async);
	
				Async.prototype.when = function (continuation) {
					tasks.enqueue(new ContinuationTask(continuation, this));
				};
	
				Async.prototype._report = function (context) {
					this.join()._report(context);
				};
	
				Async.prototype._unreport = function () {
					this.join()._unreport();
				};
	
				/**
	    * Handler that wraps an untrusted thenable and assimilates it in a future stack
	    * @param {function} then
	    * @param {{then: function}} thenable
	    * @constructor
	    */
				function Thenable(then, thenable) {
					Pending.call(this);
					tasks.enqueue(new AssimilateTask(then, thenable, this));
				}
	
				inherit(Pending, Thenable);
	
				/**
	    * Handler for a fulfilled promise
	    * @param {*} x fulfillment value
	    * @constructor
	    */
				function Fulfilled(x) {
					Promise.createContext(this);
					this.value = x;
				}
	
				inherit(Handler, Fulfilled);
	
				Fulfilled.prototype._state = 1;
	
				Fulfilled.prototype.fold = function (f, z, c, to) {
					runContinuation3(f, z, this, c, to);
				};
	
				Fulfilled.prototype.when = function (cont) {
					runContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);
				};
	
				var errorId = 0;
	
				/**
	    * Handler for a rejected promise
	    * @param {*} x rejection reason
	    * @constructor
	    */
				function Rejected(x) {
					Promise.createContext(this);
	
					this.id = ++errorId;
					this.value = x;
					this.handled = false;
					this.reported = false;
	
					this._report();
				}
	
				inherit(Handler, Rejected);
	
				Rejected.prototype._state = -1;
	
				Rejected.prototype.fold = function (f, z, c, to) {
					to.become(this);
				};
	
				Rejected.prototype.when = function (cont) {
					if (typeof cont.rejected === 'function') {
						this._unreport();
					}
					runContinuation1(cont.rejected, this, cont.receiver, cont.resolver);
				};
	
				Rejected.prototype._report = function (context) {
					tasks.afterQueue(new ReportTask(this, context));
				};
	
				Rejected.prototype._unreport = function () {
					if (this.handled) {
						return;
					}
					this.handled = true;
					tasks.afterQueue(new UnreportTask(this));
				};
	
				Rejected.prototype.fail = function (context) {
					this.reported = true;
					emitRejection('unhandledRejection', this);
					Promise.onFatalRejection(this, context === void 0 ? this.context : context);
				};
	
				function ReportTask(rejection, context) {
					this.rejection = rejection;
					this.context = context;
				}
	
				ReportTask.prototype.run = function () {
					if (!this.rejection.handled && !this.rejection.reported) {
						this.rejection.reported = true;
						emitRejection('unhandledRejection', this.rejection) || Promise.onPotentiallyUnhandledRejection(this.rejection, this.context);
					}
				};
	
				function UnreportTask(rejection) {
					this.rejection = rejection;
				}
	
				UnreportTask.prototype.run = function () {
					if (this.rejection.reported) {
						emitRejection('rejectionHandled', this.rejection) || Promise.onPotentiallyUnhandledRejectionHandled(this.rejection);
					}
				};
	
				// Unhandled rejection hooks
				// By default, everything is a noop
	
				Promise.createContext = Promise.enterContext = Promise.exitContext = Promise.onPotentiallyUnhandledRejection = Promise.onPotentiallyUnhandledRejectionHandled = Promise.onFatalRejection = noop;
	
				// Errors and singletons
	
				var foreverPendingHandler = new Handler();
				var foreverPendingPromise = new Promise(Handler, foreverPendingHandler);
	
				function cycle() {
					return new Rejected(new TypeError('Promise cycle'));
				}
	
				// Task runners
	
				/**
	    * Run a single consumer
	    * @constructor
	    */
				function ContinuationTask(continuation, handler) {
					this.continuation = continuation;
					this.handler = handler;
				}
	
				ContinuationTask.prototype.run = function () {
					this.handler.join().when(this.continuation);
				};
	
				/**
	    * Run a queue of progress handlers
	    * @constructor
	    */
				function ProgressTask(value, handler) {
					this.handler = handler;
					this.value = value;
				}
	
				ProgressTask.prototype.run = function () {
					var q = this.handler.consumers;
					if (q === void 0) {
						return;
					}
	
					for (var c, i = 0; i < q.length; ++i) {
						c = q[i];
						runNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);
					}
				};
	
				/**
	    * Assimilate a thenable, sending it's value to resolver
	    * @param {function} then
	    * @param {object|function} thenable
	    * @param {object} resolver
	    * @constructor
	    */
				function AssimilateTask(then, thenable, resolver) {
					this._then = then;
					this.thenable = thenable;
					this.resolver = resolver;
				}
	
				AssimilateTask.prototype.run = function () {
					var h = this.resolver;
					tryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);
	
					function _resolve(x) {
						h.resolve(x);
					}
					function _reject(x) {
						h.reject(x);
					}
					function _notify(x) {
						h.notify(x);
					}
				};
	
				function tryAssimilate(then, thenable, resolve, reject, notify) {
					try {
						then.call(thenable, resolve, reject, notify);
					} catch (e) {
						reject(e);
					}
				}
	
				/**
	    * Fold a handler value with z
	    * @constructor
	    */
				function Fold(f, z, c, to) {
					this.f = f;this.z = z;this.c = c;this.to = to;
					this.resolver = failIfRejected;
					this.receiver = this;
				}
	
				Fold.prototype.fulfilled = function (x) {
					this.f.call(this.c, this.z, x, this.to);
				};
	
				Fold.prototype.rejected = function (x) {
					this.to.reject(x);
				};
	
				Fold.prototype.progress = function (x) {
					this.to.notify(x);
				};
	
				// Other helpers
	
				/**
	    * @param {*} x
	    * @returns {boolean} true iff x is a trusted Promise
	    */
				function isPromise(x) {
					return x instanceof Promise;
				}
	
				/**
	    * Test just enough to rule out primitives, in order to take faster
	    * paths in some code
	    * @param {*} x
	    * @returns {boolean} false iff x is guaranteed *not* to be a thenable
	    */
				function maybeThenable(x) {
					return (typeof x === 'object' || typeof x === 'function') && x !== null;
				}
	
				function runContinuation1(f, h, receiver, next) {
					if (typeof f !== 'function') {
						return next.become(h);
					}
	
					Promise.enterContext(h);
					tryCatchReject(f, h.value, receiver, next);
					Promise.exitContext();
				}
	
				function runContinuation3(f, x, h, receiver, next) {
					if (typeof f !== 'function') {
						return next.become(h);
					}
	
					Promise.enterContext(h);
					tryCatchReject3(f, x, h.value, receiver, next);
					Promise.exitContext();
				}
	
				/**
	    * @deprecated
	    */
				function runNotify(f, x, h, receiver, next) {
					if (typeof f !== 'function') {
						return next.notify(x);
					}
	
					Promise.enterContext(h);
					tryCatchReturn(f, x, receiver, next);
					Promise.exitContext();
				}
	
				function tryCatch2(f, a, b) {
					try {
						return f(a, b);
					} catch (e) {
						return reject(e);
					}
				}
	
				/**
	    * Return f.call(thisArg, x), or if it throws return a rejected promise for
	    * the thrown exception
	    */
				function tryCatchReject(f, x, thisArg, next) {
					try {
						next.become(getHandler(f.call(thisArg, x)));
					} catch (e) {
						next.become(new Rejected(e));
					}
				}
	
				/**
	    * Same as above, but includes the extra argument parameter.
	    */
				function tryCatchReject3(f, x, y, thisArg, next) {
					try {
						f.call(thisArg, x, y, next);
					} catch (e) {
						next.become(new Rejected(e));
					}
				}
	
				/**
	    * @deprecated
	    * Return f.call(thisArg, x), or if it throws, *return* the exception
	    */
				function tryCatchReturn(f, x, thisArg, next) {
					try {
						next.notify(f.call(thisArg, x));
					} catch (e) {
						next.notify(e);
					}
				}
	
				function inherit(Parent, Child) {
					Child.prototype = objectCreate(Parent.prototype);
					Child.prototype.constructor = Child;
				}
	
				function snd(x, y) {
					return y;
				}
	
				function noop() {}
	
				function initEmitRejection() {
					/*global process, self, CustomEvent*/
					if (typeof process !== 'undefined' && process !== null && typeof process.emit === 'function') {
						// Returning falsy here means to call the default
						// onPotentiallyUnhandledRejection API.  This is safe even in
						// browserify since process.emit always returns falsy in browserify:
						return function (type, rejection) {
							return type === 'unhandledRejection' ? process.emit(type, rejection.value, rejection) : process.emit(type, rejection);
						};
					} else if (typeof self !== 'undefined' && typeof CustomEvent === 'function') {
						return (function (noop, self, CustomEvent) {
							var hasCustomEvent = false;
							try {
								var ev = new CustomEvent('unhandledRejection');
								hasCustomEvent = ev instanceof CustomEvent;
							} catch (e) {}
	
							return !hasCustomEvent ? noop : function (type, rejection) {
								var ev = new CustomEvent(type, {
									detail: {
										reason: rejection.value,
										key: rejection
									},
									bubbles: false,
									cancelable: true
								});
	
								return !self.dispatchEvent(ev);
							};
						})(noop, self, CustomEvent);
					}
	
					return noop;
				}
	
				return Promise;
			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */ // https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			// Credit to Twisol (https://github.com/Twisol) for suggesting
			// this type of extensible queue + trampoline approach for next-tick conflation.
	
			/**
	   * Async task scheduler
	   * @param {function} async function to schedule a single async function
	   * @constructor
	   */
			function Scheduler(async) {
				this._async = async;
				this._running = false;
	
				this._queue = this;
				this._queueLen = 0;
				this._afterQueue = {};
				this._afterQueueLen = 0;
	
				var self = this;
				this.drain = function () {
					self._drain();
				};
			}
	
			/**
	   * Enqueue a task
	   * @param {{ run:function }} task
	   */
			Scheduler.prototype.enqueue = function (task) {
				this._queue[this._queueLen++] = task;
				this.run();
			};
	
			/**
	   * Enqueue a task to run after the main task queue
	   * @param {{ run:function }} task
	   */
			Scheduler.prototype.afterQueue = function (task) {
				this._afterQueue[this._afterQueueLen++] = task;
				this.run();
			};
	
			Scheduler.prototype.run = function () {
				if (!this._running) {
					this._running = true;
					this._async(this.drain);
				}
			};
	
			/**
	   * Drain the handler queue entirely, and then the after queue
	   */
			Scheduler.prototype._drain = function () {
				var i = 0;
				for (; i < this._queueLen; ++i) {
					this._queue[i].run();
					this._queue[i] = void 0;
				}
	
				this._queueLen = 0;
				this._running = false;
	
				for (i = 0; i < this._afterQueueLen; ++i) {
					this._afterQueue[i].run();
					this._afterQueue[i] = void 0;
				}
	
				this._afterQueueLen = 0;
			};
	
			return Scheduler;
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
			var monitor = __webpack_require__(30);
			var Promise = __webpack_require__(8).Promise;
	
			return monitor(Promise);
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
			var PromiseMonitor = __webpack_require__(31);
			var ConsoleReporter = __webpack_require__(33);
	
			var promiseMonitor = new PromiseMonitor(new ConsoleReporter());
	
			return function (Promise) {
				return promiseMonitor.monitor(Promise);
			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
			var defaultStackJumpSeparator = 'from execution context:';
			var defaultStackFilter = /[\s\(\/\\](node|module|timers)\.js:|when([\/\\]{1,2}(lib|monitor|es6-shim)[\/\\]{1,2}|\.js)|(new\sPromise)\b|(\b(PromiseMonitor|ConsoleReporter|Scheduler|RunHandlerTask|ProgressTask|Promise|.*Handler)\.[\w_]\w\w+\b)|\b(tryCatch\w+|getHandler\w*)\b/i;
	
			var setTimer = __webpack_require__(19).setTimer;
			var error = __webpack_require__(32);
	
			var executionContext = [];
	
			function PromiseMonitor(reporter) {
				this.logDelay = 0;
				this.stackFilter = defaultStackFilter;
				this.stackJumpSeparator = defaultStackJumpSeparator;
				this.filterDuplicateFrames = true;
	
				this._reporter = reporter;
				if (typeof reporter.configurePromiseMonitor === 'function') {
					reporter.configurePromiseMonitor(this);
				}
	
				this._traces = [];
				this._traceTask = 0;
	
				var self = this;
				this._doLogTraces = function () {
					self._logTraces();
				};
			}
	
			PromiseMonitor.prototype.monitor = function (Promise) {
				var self = this;
				Promise.createContext = function (p, context) {
					p.context = self.createContext(p, context);
				};
	
				Promise.enterContext = function (p) {
					executionContext.push(p.context);
				};
	
				Promise.exitContext = function () {
					executionContext.pop();
				};
	
				Promise.onPotentiallyUnhandledRejection = function (rejection, extraContext) {
					return self.addTrace(rejection, extraContext);
				};
	
				Promise.onPotentiallyUnhandledRejectionHandled = function (rejection) {
					return self.removeTrace(rejection);
				};
	
				Promise.onFatalRejection = function (rejection, extraContext) {
					return self.fatal(rejection, extraContext);
				};
	
				return this;
			};
	
			PromiseMonitor.prototype.createContext = function (at, parentContext) {
				var context = {
					parent: parentContext || executionContext[executionContext.length - 1],
					stack: void 0
				};
				error.captureStack(context, at.constructor);
				return context;
			};
	
			PromiseMonitor.prototype.addTrace = function (handler, extraContext) {
				var t, i;
	
				for (i = this._traces.length - 1; i >= 0; --i) {
					t = this._traces[i];
					if (t.handler === handler) {
						break;
					}
				}
	
				if (i >= 0) {
					t.extraContext = extraContext;
				} else {
					this._traces.push({
						handler: handler,
						extraContext: extraContext
					});
				}
	
				this.logTraces();
			};
	
			PromiseMonitor.prototype.removeTrace = function () /*handler*/{
				this.logTraces();
			};
	
			PromiseMonitor.prototype.fatal = function (handler, extraContext) {
				var err = new Error();
				err.stack = this._createLongTrace(handler.value, handler.context, extraContext).join('\n');
				setTimer(function () {
					throw err;
				}, 0);
			};
	
			PromiseMonitor.prototype.logTraces = function () {
				if (!this._traceTask) {
					this._traceTask = setTimer(this._doLogTraces, this.logDelay);
				}
			};
	
			PromiseMonitor.prototype._logTraces = function () {
				this._traceTask = void 0;
				this._traces = this._traces.filter(filterHandled);
				this._reporter.log(this.formatTraces(this._traces));
			};
	
			PromiseMonitor.prototype.formatTraces = function (traces) {
				return traces.map(function (t) {
					return this._createLongTrace(t.handler.value, t.handler.context, t.extraContext);
				}, this);
			};
	
			PromiseMonitor.prototype._createLongTrace = function (e, context, extraContext) {
				var trace = error.parse(e) || [String(e) + ' (WARNING: non-Error used)'];
				trace = filterFrames(this.stackFilter, trace, 0);
				this._appendContext(trace, context);
				this._appendContext(trace, extraContext);
				return this.filterDuplicateFrames ? this._removeDuplicates(trace) : trace;
			};
	
			PromiseMonitor.prototype._removeDuplicates = function (trace) {
				var seen = {};
				var sep = this.stackJumpSeparator;
				var count = 0;
				return trace.reduceRight(function (deduped, line, i) {
					if (i === 0) {
						deduped.unshift(line);
					} else if (line === sep) {
						if (count > 0) {
							deduped.unshift(line);
							count = 0;
						}
					} else if (!seen[line]) {
						seen[line] = true;
						deduped.unshift(line);
						++count;
					}
					return deduped;
				}, []);
			};
	
			PromiseMonitor.prototype._appendContext = function (trace, context) {
				trace.push.apply(trace, this._createTrace(context));
			};
	
			PromiseMonitor.prototype._createTrace = function (traceChain) {
				var trace = [];
				var stack;
	
				while (traceChain) {
					stack = error.parse(traceChain);
	
					if (stack) {
						stack = filterFrames(this.stackFilter, stack);
						appendStack(trace, stack, this.stackJumpSeparator);
					}
	
					traceChain = traceChain.parent;
				}
	
				return trace;
			};
	
			function appendStack(trace, stack, separator) {
				if (stack.length > 1) {
					stack[0] = separator;
					trace.push.apply(trace, stack);
				}
			}
	
			function filterFrames(stackFilter, stack) {
				return stack.filter(function (frame) {
					return !stackFilter.test(frame);
				});
			}
	
			function filterHandled(t) {
				return !t.handler.handled;
			}
	
			return PromiseMonitor;
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			var parse, captureStack, format;
	
			if (Error.captureStackTrace) {
				// Use Error.captureStackTrace if available
				parse = function (e) {
					return e && e.stack && e.stack.split('\n');
				};
	
				format = formatAsString;
				captureStack = Error.captureStackTrace;
			} else {
				// Otherwise, do minimal feature detection to determine
				// how to capture and format reasonable stacks.
				parse = function (e) {
					var stack = e && e.stack && e.stack.split('\n');
					if (stack && e.message) {
						stack.unshift(e.message);
					}
					return stack;
				};
	
				(function () {
					var e = new Error();
					if (typeof e.stack !== 'string') {
						format = formatAsString;
						captureStack = captureSpiderMonkeyStack;
					} else {
						format = formatAsErrorWithStack;
						captureStack = useStackDirectly;
					}
				})();
			}
	
			function captureSpiderMonkeyStack(host) {
				try {
					throw new Error();
				} catch (err) {
					host.stack = err.stack;
				}
			}
	
			function useStackDirectly(host) {
				host.stack = new Error().stack;
			}
	
			function formatAsString(longTrace) {
				return join(longTrace);
			}
	
			function formatAsErrorWithStack(longTrace) {
				var e = new Error();
				e.stack = formatAsString(longTrace);
				return e;
			}
	
			// About 5-10x faster than String.prototype.join o_O
			function join(a) {
				var sep = false;
				var s = '';
				for (var i = 0; i < a.length; ++i) {
					if (sep) {
						s += '\n' + a[i];
					} else {
						s += a[i];
						sep = true;
					}
				}
				return s;
			}
	
			return {
				parse: parse,
				format: format,
				captureStack: captureStack
			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
			var error = __webpack_require__(32);
			var unhandledRejectionsMsg = '[promises] Unhandled rejections: ';
			var allHandledMsg = '[promises] All previously unhandled rejections have now been handled';
	
			function ConsoleReporter() {
				this._previouslyReported = false;
			}
	
			ConsoleReporter.prototype = initDefaultLogging();
	
			ConsoleReporter.prototype.log = function (traces) {
				if (traces.length === 0) {
					if (this._previouslyReported) {
						this._previouslyReported = false;
						this.msg(allHandledMsg);
					}
					return;
				}
	
				this._previouslyReported = true;
				this.groupStart(unhandledRejectionsMsg + traces.length);
				try {
					this._log(traces);
				} finally {
					this.groupEnd();
				}
			};
	
			ConsoleReporter.prototype._log = function (traces) {
				for (var i = 0; i < traces.length; ++i) {
					this.warn(error.format(traces[i]));
				}
			};
	
			function initDefaultLogging() {
				/*jshint maxcomplexity:7*/
				var log, warn, groupStart, groupEnd;
	
				if (typeof console === 'undefined') {
					log = warn = consoleNotAvailable;
				} else {
					// Alias console to prevent things like uglify's drop_console option from
					// removing console.log/error. Unhandled rejections fall into the same
					// category as uncaught exceptions, and build tools shouldn't silence them.
					var localConsole = console;
					if (typeof localConsole.error === 'function' && typeof localConsole.dir === 'function') {
						warn = function (s) {
							localConsole.error(s);
						};
	
						log = function (s) {
							localConsole.log(s);
						};
	
						if (typeof localConsole.groupCollapsed === 'function') {
							groupStart = function (s) {
								localConsole.groupCollapsed(s);
							};
							groupEnd = function () {
								localConsole.groupEnd();
							};
						}
					} else {
						// IE8 has console.log and JSON, so we can make a
						// reasonably useful warn() from those.
						// Credit to webpro (https://github.com/webpro) for this idea
						// typeof localConsole.log will return 'object' in IE8, so can't test it with === 'function'
						// Since this is more of a corner case for IE8, I'm ok to check it with !== 'undefined' to reduce complexity
						if (typeof localConsole.log !== 'undefined' && typeof JSON !== 'undefined') {
							log = warn = function (x) {
								if (typeof x !== 'string') {
									try {
										x = JSON.stringify(x);
									} catch (e) {}
								}
								localConsole.log(x);
							};
						} else {
							log = warn = consoleNotAvailable;
						}
					}
				}
	
				return {
					msg: log,
					warn: warn,
					groupStart: groupStart || warn,
					groupEnd: groupEnd || consoleNotAvailable
				};
			}
	
			function consoleNotAvailable() {}
	
			return ConsoleReporter;
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {///////////////////////////////////////////////////////////////////////////////
	//
	//  AutobahnJS - http://autobahn.ws, http://wamp.ws
	//
	//  A JavaScript library for WAMP ("The Web Application Messaging Protocol").
	//
	//  Copyright (C) 2011-2014 Tavendo GmbH, http://tavendo.com
	//
	//  Licensed under the MIT License.
	//  http://www.opensource.org/licenses/mit-license.php
	//
	///////////////////////////////////////////////////////////////////////////////
	
	'use strict';
	
	var log = __webpack_require__(35);
	
	var when = __webpack_require__(8);
	
	var rand_normal = function rand_normal(mean, sd) {
	   // Derive a Gaussian from Uniform random variables
	   // http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
	   var x1, x2, rad;
	
	   do {
	      x1 = 2 * Math.random() - 1;
	      x2 = 2 * Math.random() - 1;
	      rad = x1 * x1 + x2 * x2;
	   } while (rad >= 1 || rad == 0);
	
	   var c = Math.sqrt(-2 * Math.log(rad) / rad);
	
	   return (mean || 0) + x1 * c * (sd || 1);
	};
	
	var assert = function assert(cond, text) {
	   if (cond) {
	      return;
	   }
	   if (assert.useDebugger || 'AUTOBAHN_DEBUG' in window && AUTOBAHN_DEBUG) {
	      debugger;
	   }
	
	   throw new Error(text || "Assertion failed!");
	};
	
	// Helper to do HTTP/POST requests returning deferreds. This function is
	// supposed to work on IE8, IE9 and old Android WebKit browsers. We don't care
	// if it works with other browsers.
	//
	var http_post = function http_post(url, data, timeout) {
	
	   log.debug("new http_post request", url, data, timeout);
	
	   var d = when.defer();
	   var req = new XMLHttpRequest();
	
	   req.onreadystatechan = function () {
	
	      if (req.readyState === 4) {
	
	         // Normalize IE's response to HTTP 204 when Win error 1223.
	         // http://stackoverflow.com/a/10047236/884770
	         //
	         var status = req.status === 1223 ? 204 : req.status;
	
	         if (status === 200) {
	
	            // response with content
	            //
	            d.resolve(req.responseText);
	         }if (status === 204) {
	
	            // empty response
	            //
	            d.resolve();
	         } else {
	
	            // anything else is a fail
	            //
	            var statusText = null;
	            try {
	               statusText = req.statusText;
	            } catch (e) {
	               // IE8 fucks up on this
	            }
	            d.reject({ code: status, text: statusText });
	         }
	      }
	   };
	
	   req.open("POST", url, true);
	   req.setRequestHeader("Content-type", "application/json; charset=utf-8");
	
	   if (timeout > 0) {
	      req.timeout = timeout; // request timeout in ms
	
	      req.ontimeout = function () {
	         d.reject({ code: 501, text: "request timeout" });
	      };
	   }
	
	   if (data) {
	      req.send(data);
	   } else {
	      req.send();
	   }
	
	   if (d.promise.then) {
	      // whenjs has the actual user promise in an attribute
	      return d.promise;
	   } else {
	      return d;
	   }
	};
	
	exports.rand_normal = rand_normal;
	exports.assert = assert;
	exports.http_post = http_post;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 35 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {///////////////////////////////////////////////////////////////////////////////
	//
	//  AutobahnJS - http://autobahn.ws, http://wamp.ws
	//
	//  A JavaScript library for WAMP ("The Web Application Messaging Protocol").
	//
	//  Copyright (C) 2011-2014 Tavendo GmbH, http://tavendo.com
	//
	//  Licensed under the MIT License.
	//  http://www.opensource.org/licenses/mit-license.php
	//
	///////////////////////////////////////////////////////////////////////////////
	
	'use strict';
	
	var debug = function debug() {};
	
	if ('AUTOBAHN_DEBUG' in window && AUTOBAHN_DEBUG && 'console' in window) {
	   debug = function () {
	      console.log.apply(console, arguments);
	   };
	}
	
	exports.debug = debug;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {///////////////////////////////////////////////////////////////////////////////
	//
	//  AutobahnJS - http://autobahn.ws, http://wamp.ws
	//
	//  A JavaScript library for WAMP ("The Web Application Messaging Protocol").
	//
	//  Copyright (C) 2011-2014 Tavendo GmbH, http://tavendo.com
	//
	//  Licensed under the MIT License.
	//  http://www.opensource.org/licenses/mit-license.php
	//
	///////////////////////////////////////////////////////////////////////////////
	
	// require('assert') would be nice .. but it does not
	// work with Google Closure after Browserify
	
	'use strict';
	
	var when = __webpack_require__(8);
	var when_fn = __webpack_require__(37);
	
	var log = __webpack_require__(35);
	var util = __webpack_require__(34);
	
	// IE fallback (http://afuchs.tumblr.com/post/23550124774/date-now-in-ie8)
	Date.now = Date.now || function () {
	   return +new Date();
	};
	
	// WAMP "Advanced Profile" support in AutobahnJS per role
	//
	var WAMP_FEATURES = {
	   caller: {
	      features: {
	         caller_identification: true,
	         progressive_call_results: true
	      }
	   },
	   callee: {
	      features: {
	         caller_identification: true,
	         pattern_based_registration: true,
	         shared_registration: true,
	         progressive_call_results: true,
	         registration_revocation: true
	      }
	   },
	   publisher: {
	      features: {
	         publisher_identification: true,
	         subscriber_blackwhite_listing: true,
	         publisher_exclusion: true
	      }
	   },
	   subscriber: {
	      features: {
	         publisher_identification: true,
	         pattern_based_subscription: true,
	         subscription_revocation: true
	      }
	   }
	};
	
	// generate a WAMP ID
	//
	function newid() {
	   return Math.floor(Math.random() * 9007199254740992);
	}
	
	var Invocation = function Invocation(caller, progress, procedure) {
	
	   var self = this;
	
	   self.caller = caller;
	   self.progress = progress;
	   self.procedure = procedure;
	};
	
	var Event = function Event(publication, publisher, topic) {
	
	   var self = this;
	
	   self.publication = publication;
	   self.publisher = publisher;
	   self.topic = topic;
	};
	
	var Result = function Result(args, kwargs) {
	
	   var self = this;
	
	   self.args = args || [];
	   self.kwargs = kwargs || {};
	};
	
	var Error = function Error(error, args, kwargs) {
	
	   var self = this;
	
	   self.error = error;
	   self.args = args || [];
	   self.kwargs = kwargs || {};
	};
	
	var Subscription = function Subscription(topic, handler, options, session, id) {
	
	   var self = this;
	
	   self.topic = topic;
	   self.handler = handler;
	   self.options = options || {};
	   self.session = session;
	   self.id = id;
	
	   self.active = true;
	
	   // this will fire when the handler is unsubscribed
	   self._on_unsubscribe = session._defer();
	
	   if (self._on_unsubscribe.promise.then) {
	      // whenjs has the actual user promise in an attribute
	      self.on_unsubscribe = self._on_unsubscribe.promise;
	   } else {
	      self.on_unsubscribe = self._on_unsubscribe;
	   }
	};
	
	Subscription.prototype.unsubscribe = function () {
	
	   var self = this;
	   return self.session.unsubscribe(self);
	};
	
	var Registration = function Registration(procedure, endpoint, options, session, id) {
	
	   var self = this;
	
	   self.procedure = procedure;
	   self.endpoint = endpoint;
	   self.options = options || {};
	   self.session = session;
	   self.id = id;
	
	   self.active = true;
	
	   // this will fire when the endpoint is unregistered
	   self._on_unregister = session._defer();
	
	   if (self._on_unregister.promise.then) {
	      // whenjs has the actual user promise in an attribute
	      self.on_unregister = self._on_unregister.promise;
	   } else {
	      self.on_unregister = self._on_unregister;
	   }
	};
	
	Registration.prototype.unregister = function () {
	
	   var self = this;
	   return self.session.unregister(self);
	};
	
	var Publication = function Publication(id) {
	
	   var self = this;
	   self.id = id;
	};
	
	var MSG_TYPE = {
	   HELLO: 1,
	   WELCOME: 2,
	   ABORT: 3,
	   CHALLENGE: 4,
	   AUTHENTICATE: 5,
	   GOODBYE: 6,
	   HEARTBEAT: 7,
	   ERROR: 8,
	   PUBLISH: 16,
	   PUBLISHED: 17,
	   SUBSCRIBE: 32,
	   SUBSCRIBED: 33,
	   UNSUBSCRIBE: 34,
	   UNSUBSCRIBED: 35,
	   EVENT: 36,
	   CALL: 48,
	   CANCEL: 49,
	   RESULT: 50,
	   REGISTER: 64,
	   REGISTERED: 65,
	   UNREGISTER: 66,
	   UNREGISTERED: 67,
	   INVOCATION: 68,
	   INTERRUPT: 69,
	   YIELD: 70
	};
	
	var Session = function Session(socket, defer, onchallenge) {
	
	   var self = this;
	
	   // the transport connection (WebSocket object)
	   self._socket = socket;
	
	   // the Deferred factory to use
	   self._defer = defer;
	
	   // the WAMP authentication challenge handler
	   self._onchallenge = onchallenge;
	
	   // the WAMP session ID
	   self._id = null;
	
	   // the WAMP realm joined
	   self._realm = null;
	
	   // the WAMP features in use
	   self._features = null;
	
	   // closing state
	   self._goodbye_sent = false;
	   self._transport_is_closing = false;
	
	   // outstanding requests;
	   self._publish_reqs = {};
	   self._subscribe_reqs = {};
	   self._unsubscribe_reqs = {};
	   self._call_reqs = {};
	   self._register_reqs = {};
	   self._unregister_reqs = {};
	
	   // subscriptions in place;
	   self._subscriptions = {};
	
	   // registrations in place;
	   self._registrations = {};
	
	   // incoming invocations;
	   self._invocations = {};
	
	   // prefix shortcuts for URIs
	   self._prefixes = {};
	
	   // the defaults for 'disclose_me'
	   self._caller_disclose_me = false;
	   self._publisher_disclose_me = false;
	
	   self._send_wamp = function (msg) {
	      // forward WAMP message to be sent to WAMP transport
	      self._socket.send(msg);
	   };
	
	   self._protocol_violation = function (reason) {
	      log.debug("failing transport due to protocol violation: " + reason);
	      self._socket.close(1002, "protocol violation: " + reason);
	   };
	
	   self._MESSAGE_MAP = {};
	   self._MESSAGE_MAP[MSG_TYPE.ERROR] = {};
	
	   self._process_SUBSCRIBED = function (msg) {
	      //
	      // process SUBSCRIBED reply to SUBSCRIBE
	      //
	      var request = msg[1];
	      var subscription = msg[2];
	
	      if (request in self._subscribe_reqs) {
	
	         var r = self._subscribe_reqs[request];
	
	         var d = r[0];
	         var topic = r[1];
	         var handler = r[2];
	         var options = r[3];
	
	         if (!(subscription in self._subscriptions)) {
	            self._subscriptions[subscription] = [];
	         }
	         var sub = new Subscription(topic, handler, options, self, subscription);
	         self._subscriptions[subscription].push(sub);
	
	         d.resolve(sub);
	
	         delete self._subscribe_reqs[request];
	      } else {
	         self._protocol_violation("SUBSCRIBED received for non-pending request ID " + request);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.SUBSCRIBED] = self._process_SUBSCRIBED;
	
	   self._process_SUBSCRIBE_ERROR = function (msg) {
	      //
	      // process ERROR reply to SUBSCRIBE
	      //
	      var request = msg[2];
	      if (request in self._subscribe_reqs) {
	
	         var details = msg[3];
	         var error = new Error(msg[4], msg[5], msg[6]);
	
	         var r = self._subscribe_reqs[request];
	
	         var d = r[0];
	
	         d.reject(error);
	
	         delete self._subscribe_reqs[request];
	      } else {
	         self._protocol_violation("SUBSCRIBE-ERROR received for non-pending request ID " + request);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.SUBSCRIBE] = self._process_SUBSCRIBE_ERROR;
	
	   self._process_UNSUBSCRIBED = function (msg) {
	      //
	      // process UNSUBSCRIBED reply to UNSUBSCRIBE
	      //
	      var request = msg[1];
	
	      if (request in self._unsubscribe_reqs) {
	
	         var r = self._unsubscribe_reqs[request];
	
	         var d = r[0];
	         var subscription = r[1];
	
	         if (subscription.id in self._subscriptions) {
	            var subs = self._subscriptions[subscription.id];
	            // the following should actually be NOP, since UNSUBSCRIBE was
	            // only sent when subs got empty
	            for (var i = 0; i < subs.length; ++i) {
	               subs[i].active = false;
	               subs[i].on_unsubscribe.resolve();
	            }
	            delete self._subscriptions[subscription];
	         }
	
	         d.resolve(true);
	
	         delete self._unsubscribe_reqs[request];
	      } else {
	
	         if (request === 0) {
	
	            // router actively revoked our subscription
	            //
	            var details = msg[2];
	            var subscription_id = details.subscription;
	            var reason = details.reason;
	
	            if (subscription_id in self._subscriptions) {
	               var subs = self._subscriptions[subscription_id];
	               for (var i = 0; i < subs.length; ++i) {
	                  subs[i].active = false;
	                  subs[i]._on_unsubscribe.resolve(reason);
	               }
	               delete self._subscriptions[subscription_id];
	            } else {
	               self._protocol_violation("non-voluntary UNSUBSCRIBED received for non-existing subscription ID " + subscription_id);
	            }
	         } else {
	            self._protocol_violation("UNSUBSCRIBED received for non-pending request ID " + request);
	         }
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.UNSUBSCRIBED] = self._process_UNSUBSCRIBED;
	
	   self._process_UNSUBSCRIBE_ERROR = function (msg) {
	      //
	      // process ERROR reply to UNSUBSCRIBE
	      //
	      var request = msg[2];
	      if (request in self._unsubscribe_reqs) {
	
	         var details = msg[3];
	         var error = new Error(msg[4], msg[5], msg[6]);
	
	         var r = self._unsubscribe_reqs[request];
	
	         var d = r[0];
	         var subscription = r[1];
	
	         d.reject(error);
	
	         delete self._unsubscribe_reqs[request];
	      } else {
	         self._protocol_violation("UNSUBSCRIBE-ERROR received for non-pending request ID " + request);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.UNSUBSCRIBE] = self._process_UNSUBSCRIBE_ERROR;
	
	   self._process_PUBLISHED = function (msg) {
	      //
	      // process PUBLISHED reply to PUBLISH
	      //
	      var request = msg[1];
	      var publication = msg[2];
	
	      if (request in self._publish_reqs) {
	
	         var r = self._publish_reqs[request];
	
	         var d = r[0];
	         var options = r[1];
	
	         var pub = new Publication(publication);
	         d.resolve(pub);
	
	         delete self._publish_reqs[request];
	      } else {
	         self._protocol_violation("PUBLISHED received for non-pending request ID " + request);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.PUBLISHED] = self._process_PUBLISHED;
	
	   self._process_PUBLISH_ERROR = function (msg) {
	      //
	      // process ERROR reply to PUBLISH
	      //
	      var request = msg[2];
	      if (request in self._publish_reqs) {
	
	         var details = msg[3];
	         var error = new Error(msg[4], msg[5], msg[6]);
	
	         var r = self._publish_reqs[request];
	
	         var d = r[0];
	         var options = r[1];
	
	         d.reject(error);
	
	         delete self._publish_reqs[request];
	      } else {
	         self._protocol_violation("PUBLISH-ERROR received for non-pending request ID " + request);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.PUBLISH] = self._process_PUBLISH_ERROR;
	
	   self._process_EVENT = function (msg) {
	      //
	      // process EVENT message
	      //
	      // [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id, Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentsKw|dict]
	
	      var subscription = msg[1];
	
	      if (subscription in self._subscriptions) {
	
	         var publication = msg[2];
	         var details = msg[3];
	
	         var args = msg[4] || [];
	         var kwargs = msg[5] || {};
	
	         var ed = new Event(publication, details.publisher, details.topic);
	
	         var subs = self._subscriptions[subscription];
	
	         for (var i = 0; i < subs.length; ++i) {
	            try {
	               subs[i].handler(args, kwargs, ed);
	            } catch (e) {
	               log.debug("Exception raised in event handler", e);
	            }
	         }
	      } else {
	         self._protocol_violation("EVENT received for non-subscribed subscription ID " + subscription);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.EVENT] = self._process_EVENT;
	
	   self._process_REGISTERED = function (msg) {
	      //
	      // process REGISTERED reply to REGISTER
	      //
	      var request = msg[1];
	      var registration = msg[2];
	
	      if (request in self._register_reqs) {
	
	         var r = self._register_reqs[request];
	
	         var d = r[0];
	         var procedure = r[1];
	         var endpoint = r[2];
	         var options = r[3];
	
	         var reg = new Registration(procedure, endpoint, options, self, registration);
	
	         self._registrations[registration] = reg;
	
	         d.resolve(reg);
	
	         delete self._register_reqs[request];
	      } else {
	         self._protocol_violation("REGISTERED received for non-pending request ID " + request);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.REGISTERED] = self._process_REGISTERED;
	
	   self._process_REGISTER_ERROR = function (msg) {
	      //
	      // process ERROR reply to REGISTER
	      //
	      var request = msg[2];
	      if (request in self._register_reqs) {
	
	         var details = msg[3];
	         var error = new Error(msg[4], msg[5], msg[6]);
	
	         var r = self._register_reqs[request];
	
	         var d = r[0];
	
	         d.reject(error);
	
	         delete self._register_reqs[request];
	      } else {
	         self._protocol_violation("REGISTER-ERROR received for non-pending request ID " + request);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.REGISTER] = self._process_REGISTER_ERROR;
	
	   self._process_UNREGISTERED = function (msg) {
	      //
	      // process UNREGISTERED reply to UNREGISTER
	      //
	      var request = msg[1];
	
	      if (request in self._unregister_reqs) {
	
	         var r = self._unregister_reqs[request];
	
	         var d = r[0];
	         var registration = r[1];
	
	         if (registration.id in self._registrations) {
	            delete self._registrations[registration.id];
	         }
	
	         registration.active = false;
	         d.resolve();
	
	         delete self._unregister_reqs[request];
	      } else {
	
	         if (request === 0) {
	
	            // the router actively revoked our registration
	            //
	            var details = msg[2];
	            var registration_id = details.registration;
	            var reason = details.reason;
	
	            if (registration_id in self._registrations) {
	               var registration = self._registrations[registration_id];
	               registration.active = false;
	               registration._on_unregister.resolve(reason);
	               delete self._registrations[registration_id];
	            } else {
	               self._protocol_violation("non-voluntary UNREGISTERED received for non-existing registration ID " + registration_id);
	            }
	         } else {
	            self._protocol_violation("UNREGISTERED received for non-pending request ID " + request);
	         }
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.UNREGISTERED] = self._process_UNREGISTERED;
	
	   self._process_UNREGISTER_ERROR = function (msg) {
	      //
	      // process ERROR reply to UNREGISTER
	      //
	      var request = msg[2];
	      if (request in self._unregister_reqs) {
	
	         var details = msg[3];
	         var error = new Error(msg[4], msg[5], msg[6]);
	
	         var r = self._unregister_reqs[request];
	
	         var d = r[0];
	         var registration = r[1];
	
	         d.reject(error);
	
	         delete self._unregister_reqs[request];
	      } else {
	         self._protocol_violation("UNREGISTER-ERROR received for non-pending request ID " + request);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.UNREGISTER] = self._process_UNREGISTER_ERROR;
	
	   self._process_RESULT = function (msg) {
	      //
	      // process RESULT reply to CALL
	      //
	      var request = msg[1];
	      if (request in self._call_reqs) {
	
	         var details = msg[2];
	
	         var args = msg[3] || [];
	         var kwargs = msg[4] || {};
	
	         // maybe wrap complex result:
	         var result = null;
	         if (args.length > 1 || Object.keys(kwargs).length > 0) {
	            // wrap complex result is more than 1 positional result OR
	            // non-empty keyword result
	            result = new Result(args, kwargs);
	         } else if (args.length > 0) {
	            // single positional result
	            result = args[0];
	         }
	
	         var r = self._call_reqs[request];
	
	         var d = r[0];
	         var options = r[1];
	
	         if (details.progress) {
	            if (options && options.receive_progress) {
	               d.notify(result);
	            }
	         } else {
	            d.resolve(result);
	            delete self._call_reqs[request];
	         }
	      } else {
	         self._protocol_violation("CALL-RESULT received for non-pending request ID " + request);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.RESULT] = self._process_RESULT;
	
	   self._process_CALL_ERROR = function (msg) {
	      //
	      // process ERROR reply to CALL
	      //
	      var request = msg[2];
	      if (request in self._call_reqs) {
	
	         var details = msg[3];
	         var error = new Error(msg[4], msg[5], msg[6]);
	
	         var r = self._call_reqs[request];
	
	         var d = r[0];
	         var options = r[1];
	
	         d.reject(error);
	
	         delete self._call_reqs[request];
	      } else {
	         self._protocol_violation("CALL-ERROR received for non-pending request ID " + request);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.ERROR][MSG_TYPE.CALL] = self._process_CALL_ERROR;
	
	   self._process_INVOCATION = function (msg) {
	      //
	      // process INVOCATION message
	      //
	      // [INVOCATION, Request|id, REGISTERED.Registration|id, Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]
	      //
	      var request = msg[1];
	      var registration = msg[2];
	
	      var details = msg[3];
	      // receive_progress
	      // timeout
	      // caller
	
	      if (registration in self._registrations) {
	
	         var endpoint = self._registrations[registration].endpoint;
	
	         var args = msg[4] || [];
	         var kwargs = msg[5] || {};
	
	         // create progress function for invocation
	         //
	         var progress = null;
	         if (details.receive_progress) {
	
	            progress = function (args, kwargs) {
	               var progress_msg = [MSG_TYPE.YIELD, request, { progress: true }];
	
	               args = args || [];
	               kwargs = kwargs || {};
	
	               var kwargs_len = Object.keys(kwargs).length;
	               if (args.length || kwargs_len) {
	                  progress_msg.push(args);
	                  if (kwargs_len) {
	                     progress_msg.push(kwargs);
	                  }
	               }
	               self._send_wamp(progress_msg);
	            };
	         };
	
	         var cd = new Invocation(details.caller, progress, details.procedure);
	
	         // We use the following whenjs call wrapper, which automatically
	         // wraps a plain, non-promise value in a (immediately resolved) promise
	         //
	         // See: https://github.com/cujojs/when/blob/master/docs/api.md#fncall
	         //
	         when_fn.call(endpoint, args, kwargs, cd).then(function (res) {
	            // construct YIELD message
	            // FIXME: Options
	            //
	            var reply = [MSG_TYPE.YIELD, request, {}];
	
	            if (res instanceof Result) {
	               var kwargs_len = Object.keys(res.kwargs).length;
	               if (res.args.length || kwargs_len) {
	                  reply.push(res.args);
	                  if (kwargs_len) {
	                     reply.push(res.kwargs);
	                  }
	               }
	            } else {
	               reply.push([res]);
	            }
	
	            // send WAMP message
	            //
	            self._send_wamp(reply);
	         }, function (err) {
	            // construct ERROR message
	            // [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict, Error|uri, Arguments|list, ArgumentsKw|dict]
	
	            var reply = [MSG_TYPE.ERROR, MSG_TYPE.INVOCATION, request, {}];
	
	            if (err instanceof Error) {
	
	               reply.push(err.error);
	
	               var kwargs_len = Object.keys(err.kwargs).length;
	               if (err.args.length || kwargs_len) {
	                  reply.push(err.args);
	                  if (kwargs_len) {
	                     reply.push(err.kwargs);
	                  }
	               }
	            } else {
	               reply.push('wamp.error.runtime_error');
	               reply.push([err]);
	            }
	
	            // send WAMP message
	            //
	            self._send_wamp(reply);
	         });
	      } else {
	         self._protocol_violation("INVOCATION received for non-registered registration ID " + request);
	      }
	   };
	   self._MESSAGE_MAP[MSG_TYPE.INVOCATION] = self._process_INVOCATION;
	
	   // callback fired by WAMP transport on receiving a WAMP message
	   //
	   self._socket.onmessage = function (msg) {
	
	      var msg_type = msg[0];
	
	      // WAMP session not yet open
	      //
	      if (!self._id) {
	
	         // the first message must be WELCOME, ABORT or CHALLENGE ..
	         //
	         if (msg_type === MSG_TYPE.WELCOME) {
	
	            self._id = msg[1];
	
	            // determine actual set of advanced features that can be used
	            //
	            var rf = msg[2];
	            self._features = {};
	
	            if (rf.roles.broker) {
	               // "Basic Profile" is mandatory
	               self._features.subscriber = {};
	               self._features.publisher = {};
	
	               // fill in features that both peers support
	               if (rf.roles.broker.features) {
	
	                  for (var att in WAMP_FEATURES.publisher.features) {
	                     self._features.publisher[att] = WAMP_FEATURES.publisher.features[att] && rf.roles.broker.features[att];
	                  }
	
	                  for (var att in WAMP_FEATURES.subscriber.features) {
	                     self._features.subscriber[att] = WAMP_FEATURES.subscriber.features[att] && rf.roles.broker.features[att];
	                  }
	               }
	            }
	
	            if (rf.roles.dealer) {
	               // "Basic Profile" is mandatory
	               self._features.caller = {};
	               self._features.callee = {};
	
	               // fill in features that both peers support
	               if (rf.roles.dealer.features) {
	
	                  for (var att in WAMP_FEATURES.caller.features) {
	                     self._features.caller[att] = WAMP_FEATURES.caller.features[att] && rf.roles.dealer.features[att];
	                  }
	
	                  for (var att in WAMP_FEATURES.callee.features) {
	                     self._features.callee[att] = WAMP_FEATURES.callee.features[att] && rf.roles.dealer.features[att];
	                  }
	               }
	            }
	
	            if (self.onjoin) {
	               self.onjoin(msg[2]);
	            }
	         } else if (msg_type === MSG_TYPE.ABORT) {
	
	            var details = msg[1];
	            var reason = msg[2];
	
	            if (self.onleave) {
	               self.onleave(reason, details);
	            }
	         } else if (msg_type === MSG_TYPE.CHALLENGE) {
	
	            if (self._onchallenge) {
	
	               var method = msg[1];
	               var extra = msg[2];
	
	               when_fn.call(self._onchallenge, self, method, extra).then(function (signature) {
	                  var msg = [MSG_TYPE.AUTHENTICATE, signature, {}];
	                  self._send_wamp(msg);
	               }, function (err) {
	                  log.debug("onchallenge() raised:", err);
	
	                  var msg = [MSG_TYPE.ABORT, { message: "sorry, I cannot authenticate (onchallenge handler raised an exception)" }, "wamp.error.cannot_authenticate"];
	                  self._send_wamp(msg);
	                  self._socket.close(1000);
	               });
	            } else {
	               log.debug("received WAMP challenge, but no onchallenge() handler set");
	
	               var msg = [MSG_TYPE.ABORT, { message: "sorry, I cannot authenticate (no onchallenge handler set)" }, "wamp.error.cannot_authenticate"];
	               self._send_wamp(msg);
	               self._socket.close(1000);
	            }
	         } else {
	            self._protocol_violation("unexpected message type " + msg_type);
	         }
	
	         // WAMP session is open
	         //
	      } else {
	
	            if (msg_type === MSG_TYPE.GOODBYE) {
	
	               if (!self._goodbye_sent) {
	
	                  var reply = [MSG_TYPE.GOODBYE, {}, "wamp.error.goodbye_and_out"];
	                  self._send_wamp(reply);
	               }
	
	               self._id = null;
	               self._realm = null;
	               self._features = null;
	
	               var details = msg[1];
	               var reason = msg[2];
	
	               if (self.onleave) {
	                  self.onleave(reason, details);
	               }
	            } else {
	
	               if (msg_type === MSG_TYPE.ERROR) {
	
	                  var request_type = msg[1];
	                  if (request_type in self._MESSAGE_MAP[MSG_TYPE.ERROR]) {
	
	                     self._MESSAGE_MAP[msg_type][request_type](msg);
	                  } else {
	
	                     self._protocol_violation("unexpected ERROR message with request_type " + request_type);
	                  }
	               } else {
	
	                  if (msg_type in self._MESSAGE_MAP) {
	
	                     self._MESSAGE_MAP[msg_type](msg);
	                  } else {
	
	                     self._protocol_violation("unexpected message type " + msg_type);
	                  }
	               }
	            }
	         }
	   };
	
	   // session object constructed .. track creation time
	   //
	   if ('performance' in window && 'now' in performance) {
	      self._created = performance.now();
	   } else {
	      self._created = Date.now();
	   }
	};
	
	Object.defineProperty(Session.prototype, "defer", {
	   get: function get() {
	      return this._defer;
	   }
	});
	
	Object.defineProperty(Session.prototype, "id", {
	   get: function get() {
	      return this._id;
	   }
	});
	
	Object.defineProperty(Session.prototype, "realm", {
	   get: function get() {
	      return this._realm;
	   }
	});
	
	Object.defineProperty(Session.prototype, "isOpen", {
	   get: function get() {
	      return this.id !== null;
	   }
	});
	
	Object.defineProperty(Session.prototype, "features", {
	   get: function get() {
	      return this._features;
	   }
	});
	
	Object.defineProperty(Session.prototype, "caller_disclose_me", {
	   get: function get() {
	      return this._caller_disclose_me;
	   },
	   set: function set(newValue) {
	      this._caller_disclose_me = newValue;
	   }
	});
	
	Object.defineProperty(Session.prototype, "publisher_disclose_me", {
	   get: function get() {
	      return this._publisher_disclose_me;
	   },
	   set: function set(newValue) {
	      this._publisher_disclose_me = newValue;
	   }
	});
	
	Object.defineProperty(Session.prototype, "subscriptions", {
	   get: function get() {
	      var keys = Object.keys(this._subscriptions);
	      var vals = [];
	      for (var i = 0; i < keys.length; ++i) {
	         vals.push(this._subscriptions[keys[i]]);
	      }
	      return vals;
	   }
	});
	
	Object.defineProperty(Session.prototype, "registrations", {
	   get: function get() {
	      var keys = Object.keys(this._registrations);
	      var vals = [];
	      for (var i = 0; i < keys.length; ++i) {
	         vals.push(this._registrations[keys[i]]);
	      }
	      return vals;
	   }
	});
	
	Session.prototype.log = function () {
	   var self = this;
	
	   if ('console' in window) {
	
	      var header = null;
	      if (self._id && self._created) {
	
	         var now = null;
	         if ('performance' in window && 'now' in performance) {
	            now = performance.now() - self._created;
	         } else {
	            now = Date.now() - self._created;
	         }
	
	         header = "WAMP session " + self._id + " on '" + self._realm + "' at " + Math.round(now * 1000) / 1000 + " ms";
	      } else {
	         header = "WAMP session";
	      }
	
	      if ('group' in console) {
	         console.group(header);
	         for (var i = 0; i < arguments.length; i += 1) {
	            console.log(arguments[i]);
	         }
	         console.groupEnd();
	      } else {
	         var items = [header + ": "];
	         for (var i = 0; i < arguments.length; i += 1) {
	            items.push(arguments[i]);
	         }
	         console.log.apply(console, items);
	      }
	   }
	};
	
	Session.prototype.join = function (realm, authmethods, authid) {
	
	   util.assert(typeof realm === 'string', "Session.join: <realm> must be a string");
	   util.assert(!authmethods || Array.isArray(authmethods), "Session.join: <authmethods> must be an array []");
	   util.assert(!authid || typeof authid === 'string', "Session.join: <authid> must be a string");
	
	   var self = this;
	
	   if (self.isOpen) {
	      throw "session already open";
	   }
	
	   self._goodbye_sent = false;
	   self._realm = realm;
	
	   var details = {};
	   details.roles = WAMP_FEATURES;
	
	   if (authmethods) {
	      details.authmethods = authmethods;
	   }
	   if (authid) {
	      details.authid = authid;
	   }
	
	   var msg = [MSG_TYPE.HELLO, realm, details];
	   self._send_wamp(msg);
	};
	
	Session.prototype.leave = function (reason, message) {
	
	   util.assert(!reason || typeof reason === 'string', "Session.leave: <reason> must be a string");
	   util.assert(!message || typeof message === 'string', "Session.leave: <message> must be a string");
	
	   var self = this;
	
	   if (!self.isOpen) {
	      throw "session not open";
	   }
	
	   if (!reason) {
	      reason = "wamp.close.normal";
	   }
	
	   var details = {};
	   if (message) {
	      details.message = message;
	   }
	
	   var msg = [MSG_TYPE.GOODBYE, details, reason];
	   self._send_wamp(msg);
	   self._goodbye_sent = true;
	};
	
	Session.prototype.call = function (procedure, args, kwargs, options) {
	
	   util.assert(typeof procedure === 'string', "Session.call: <procedure> must be a string");
	   util.assert(!args || Array.isArray(args), "Session.call: <args> must be an array []");
	   util.assert(!kwargs || kwargs instanceof Object, "Session.call: <kwargs> must be an object {}");
	   util.assert(!options || options instanceof Object, "Session.call: <options> must be an object {}");
	
	   var self = this;
	
	   if (!self.isOpen) {
	      throw "session not open";
	   }
	
	   options = options || {};
	
	   // only set option if user hasn't set a value and global option is "on"
	   if (options.disclose_me === undefined && self._caller_disclose_me) {
	      options.disclose_me = true;
	   }
	
	   // create and remember new CALL request
	   //
	   var d = self._defer();
	   var request = newid();
	   self._call_reqs[request] = [d, options];
	
	   // construct CALL message
	   //
	   var msg = [MSG_TYPE.CALL, request, options, self.resolve(procedure)];
	   if (args) {
	      msg.push(args);
	      if (kwargs) {
	         msg.push(kwargs);
	      }
	   } else if (kwargs) {
	      msg.push([]);
	      msg.push(kwargs);
	   }
	
	   // send WAMP message
	   //
	   self._send_wamp(msg);
	
	   if (d.promise.then) {
	      // whenjs has the actual user promise in an attribute
	      return d.promise;
	   } else {
	      return d;
	   }
	};
	
	Session.prototype.publish = function (topic, args, kwargs, options) {
	
	   util.assert(typeof topic === 'string', "Session.publish: <topic> must be a string");
	   util.assert(!args || Array.isArray(args), "Session.publish: <args> must be an array []");
	   util.assert(!kwargs || kwargs instanceof Object, "Session.publish: <kwargs> must be an object {}");
	   util.assert(!options || options instanceof Object, "Session.publish: <options> must be an object {}");
	
	   var self = this;
	
	   if (!self.isOpen) {
	      throw "session not open";
	   }
	
	   options = options || {};
	
	   // only set option if user hasn't set a value and global option is "on"
	   if (options.disclose_me === undefined && self._publisher_disclose_me) {
	      options.disclose_me = true;
	   }
	
	   // create and remember new PUBLISH request
	   //
	   var d = null;
	   var request = newid();
	   if (options.acknowledge) {
	      d = self._defer();
	      self._publish_reqs[request] = [d, options];
	   }
	
	   // construct PUBLISH message
	   //
	   var msg = [MSG_TYPE.PUBLISH, request, options, self.resolve(topic)];
	   if (args) {
	      msg.push(args);
	      if (kwargs) {
	         msg.push(kwargs);
	      }
	   } else if (kwargs) {
	      msg.push([]);
	      msg.push(kwargs);
	   }
	
	   // send WAMP message
	   //
	   self._send_wamp(msg);
	
	   if (d) {
	      if (d.promise.then) {
	         // whenjs has the actual user promise in an attribute
	         return d.promise;
	      } else {
	         return d;
	      }
	   }
	};
	
	Session.prototype.subscribe = function (topic, handler, options) {
	
	   util.assert(typeof topic === 'string', "Session.subscribe: <topic> must be a string");
	   util.assert(typeof handler === 'function', "Session.subscribe: <handler> must be a function");
	   util.assert(!options || options instanceof Object, "Session.subscribe: <options> must be an object {}");
	
	   var self = this;
	
	   if (!self.isOpen) {
	      throw "session not open";
	   }
	
	   // create an remember new SUBSCRIBE request
	   //
	   var request = newid();
	   var d = self._defer();
	   self._subscribe_reqs[request] = [d, topic, handler, options];
	
	   // construct SUBSCRIBE message
	   //
	   var msg = [MSG_TYPE.SUBSCRIBE, request];
	   if (options) {
	      msg.push(options);
	   } else {
	      msg.push({});
	   }
	   msg.push(self.resolve(topic));
	
	   // send WAMP message
	   //
	   self._send_wamp(msg);
	
	   if (d.promise.then) {
	      // whenjs has the actual user promise in an attribute
	      return d.promise;
	   } else {
	      return d;
	   }
	};
	
	Session.prototype.register = function (procedure, endpoint, options) {
	
	   util.assert(typeof procedure === 'string', "Session.register: <procedure> must be a string");
	   util.assert(typeof endpoint === 'function', "Session.register: <endpoint> must be a function");
	   util.assert(!options || options instanceof Object, "Session.register: <options> must be an object {}");
	
	   var self = this;
	
	   if (!self.isOpen) {
	      throw "session not open";
	   }
	
	   // create an remember new REGISTER request
	   //
	   var request = newid();
	   var d = self._defer();
	   self._register_reqs[request] = [d, procedure, endpoint, options];
	
	   // construct REGISTER message
	   //
	   var msg = [MSG_TYPE.REGISTER, request];
	   if (options) {
	      msg.push(options);
	   } else {
	      msg.push({});
	   }
	   msg.push(self.resolve(procedure));
	
	   // send WAMP message
	   //
	   self._send_wamp(msg);
	
	   if (d.promise.then) {
	      // whenjs has the actual user promise in an attribute
	      return d.promise;
	   } else {
	      return d;
	   }
	};
	
	Session.prototype.unsubscribe = function (subscription) {
	
	   util.assert(subscription instanceof Subscription, "Session.unsubscribe: <subscription> must be an instance of class autobahn.Subscription");
	
	   var self = this;
	
	   if (!self.isOpen) {
	      throw "session not open";
	   }
	
	   if (!subscription.active || !(subscription.id in self._subscriptions)) {
	      throw "subscription not active";
	   }
	
	   var subs = self._subscriptions[subscription.id];
	   var i = subs.indexOf(subscription);
	
	   if (i === -1) {
	      throw "subscription not active";
	   }
	
	   // remove handler subscription
	   subs.splice(i, 1);
	   subscription.active = false;
	
	   var d = self._defer();
	
	   if (subs.length) {
	      // there are still handlers on the subscription ..
	      d.resolve(false);
	   } else {
	
	      // no handlers left ..
	
	      // create and remember new UNSUBSCRIBE request
	      //
	      var request = newid();
	      self._unsubscribe_reqs[request] = [d, subscription.id];
	
	      // construct UNSUBSCRIBE message
	      //
	      var msg = [MSG_TYPE.UNSUBSCRIBE, request, subscription.id];
	
	      // send WAMP message
	      //
	      self._send_wamp(msg);
	   }
	
	   if (d.promise.then) {
	      // whenjs has the actual user promise in an attribute
	      return d.promise;
	   } else {
	      return d;
	   }
	};
	
	Session.prototype.unregister = function (registration) {
	
	   util.assert(registration instanceof Registration, "Session.unregister: <registration> must be an instance of class autobahn.Registration");
	
	   var self = this;
	
	   if (!self.isOpen) {
	      throw "session not open";
	   }
	
	   if (!registration.active || !(registration.id in self._registrations)) {
	      throw "registration not active";
	   }
	
	   // create and remember new UNREGISTER request
	   //
	   var request = newid();
	   var d = self._defer();
	   self._unregister_reqs[request] = [d, registration];
	
	   // construct UNREGISTER message
	   //
	   var msg = [MSG_TYPE.UNREGISTER, request, registration.id];
	
	   // send WAMP message
	   //
	   self._send_wamp(msg);
	
	   if (d.promise.then) {
	      // whenjs has the actual user promise in an attribute
	      return d.promise;
	   } else {
	      return d;
	   }
	};
	
	Session.prototype.prefix = function (prefix, uri) {
	
	   util.assert(typeof prefix === 'string', "Session.prefix: <prefix> must be a string");
	   util.assert(!uri || typeof uri === 'string', "Session.prefix: <uri> must be a string or falsy");
	
	   var self = this;
	
	   if (uri) {
	      self._prefixes[prefix] = uri;
	   } else {
	      if (prefix in self._prefixes) {
	         delete self._prefixes[prefix];
	      }
	   }
	};
	
	Session.prototype.resolve = function (curie) {
	
	   util.assert(typeof curie === 'string', "Session.resolve: <curie> must be a string");
	
	   var self = this;
	
	   // skip if not a CURIE
	   var i = curie.indexOf(":");
	   if (i >= 0) {
	      var prefix = curie.substring(0, i);
	      if (prefix in self._prefixes) {
	         return self._prefixes[prefix] + '.' + curie.substring(i + 1);
	      } else {
	         throw "cannot resolve CURIE prefix '" + prefix + "'";
	      }
	   } else {
	      return curie;
	   }
	};
	
	exports.Session = Session;
	
	exports.Invocation = Invocation;
	exports.Event = Event;
	exports.Result = Result;
	exports.Error = Error;
	exports.Subscription = Subscription;
	exports.Registration = Registration;
	exports.Publication = Publication;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2013-2014 original author or authors */
	
	'use strict';
	
	(function (define) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
			var when = __webpack_require__(8);
			var attempt = when['try'];
			var _liftAll = __webpack_require__(38);
			var _apply = __webpack_require__(13)(when.Promise);
			var slice = Array.prototype.slice;
	
			return {
				lift: lift,
				liftAll: liftAll,
				call: attempt,
				apply: apply,
				compose: compose
			};
	
			/**
	   * Takes a function and an optional array of arguments (that might be promises),
	   * and calls the function. The return value is a promise whose resolution
	   * depends on the value returned by the function.
	   * @param {function} f function to be called
	   * @param {Array} [args] array of arguments to func
	   * @returns {Promise} promise for the return value of func
	   */
			function apply(f, args) {
				// slice args just in case the caller passed an Arguments instance
				return _apply(f, this, args == null ? [] : slice.call(args));
			}
	
			/**
	   * Takes a 'regular' function and returns a version of that function that
	   * returns a promise instead of a plain value, and handles thrown errors by
	   * returning a rejected promise. Also accepts a list of arguments to be
	   * prepended to the new function, as does Function.prototype.bind.
	   *
	   * The resulting function is promise-aware, in the sense that it accepts
	   * promise arguments, and waits for their resolution.
	   * @param {Function} f function to be bound
	   * @param {...*} [args] arguments to be prepended for the new function @deprecated
	   * @returns {Function} a promise-returning function
	   */
			function lift(f /*, args... */) {
				var args = arguments.length > 1 ? slice.call(arguments, 1) : [];
				return function () {
					return _apply(f, this, args.concat(slice.call(arguments)));
				};
			}
	
			/**
	   * Lift all the functions/methods on src
	   * @param {object|function} src source whose functions will be lifted
	   * @param {function?} combine optional function for customizing the lifting
	   *  process. It is passed dst, the lifted function, and the property name of
	   *  the original function on src.
	   * @param {(object|function)?} dst option destination host onto which to place lifted
	   *  functions. If not provided, liftAll returns a new object.
	   * @returns {*} If dst is provided, returns dst with lifted functions as
	   *  properties.  If dst not provided, returns a new object with lifted functions.
	   */
			function liftAll(src, combine, dst) {
				return _liftAll(lift, combine, dst, src);
			}
	
			/**
	   * Composes multiple functions by piping their return values. It is
	   * transparent to whether the functions return 'regular' values or promises:
	   * the piped argument is always a resolved value. If one of the functions
	   * throws or returns a rejected promise, the composed promise will be also
	   * rejected.
	   *
	   * The arguments (or promises to arguments) given to the returned function (if
	   * any), are passed directly to the first function on the 'pipeline'.
	   * @param {Function} f the function to which the arguments will be passed
	   * @param {...Function} [funcs] functions that will be composed, in order
	   * @returns {Function} a promise-returning composition of the functions
	   */
			function compose(f /*, funcs... */) {
				var funcs = slice.call(arguments, 1);
	
				return function () {
					var thisArg = this;
					var args = slice.call(arguments);
					var firstPromise = attempt.apply(thisArg, [f].concat(args));
	
					return when.reduce(funcs, function (arg, func) {
						return func.call(thisArg, arg);
					}, firstPromise);
				};
			}
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/**
	 * Collection of helper functions for wrapping and executing 'traditional'
	 * synchronous functions in a promise interface.
	 *
	 * @author Brian Cavalier
	 * @contributor Renato Zannon
	 */

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	'use strict';
	
	(function (define) {
		'use strict';
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
			return function liftAll(liftOne, combine, dst, src) {
				if (typeof combine === 'undefined') {
					combine = defaultCombine;
				}
	
				return Object.keys(src).reduce(function (dst, key) {
					var f = src[key];
					return typeof f === 'function' ? combine(dst, liftOne(f), key) : dst;
				}, typeof dst === 'undefined' ? defaultDst(src) : dst);
			};
	
			function defaultCombine(o, f, k) {
				o[k] = f;
				return o;
			}
	
			function defaultDst(src) {
				return typeof src === 'function' ? src.bind() : Object.create(src);
			}
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));
	/** @author John Hann */

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {///////////////////////////////////////////////////////////////////////////////
	//
	//  AutobahnJS - http://autobahn.ws, http://wamp.ws
	//
	//  A JavaScript library for WAMP ("The Web Application Messaging Protocol").
	//
	//  Copyright (C) 2011-2014 Tavendo GmbH, http://tavendo.com
	//
	//  Licensed under the MIT License.
	//  http://www.opensource.org/licenses/mit-license.php
	//
	///////////////////////////////////////////////////////////////////////////////
	
	'use strict';
	
	var when = __webpack_require__(8);
	
	var session = __webpack_require__(36);
	var util = __webpack_require__(34);
	var log = __webpack_require__(35);
	var autobahn = __webpack_require__(7);
	
	var Connection = function Connection(options) {
	
	   var self = this;
	
	   self._options = options;
	
	   // Deferred factory
	   //
	   if (options && options.use_es6_promises) {
	
	      if ('Promise' in window) {
	         // ES6-based deferred factory
	         //
	         self._defer = function () {
	            var deferred = {};
	
	            deferred.promise = new Promise(function (resolve, reject) {
	               deferred.resolve = resolve;
	               deferred.reject = reject;
	            });
	
	            return deferred;
	         };
	      } else {
	
	         log.debug("Warning: ES6 promises requested, but not found! Falling back to whenjs.");
	
	         // whenjs-based deferred factory
	         //
	         self._defer = when.defer;
	      }
	   } else if (options && options.use_deferred) {
	
	      // use explicit deferred factory, e.g. jQuery.Deferred or Q.defer
	      //
	      self._defer = options.use_deferred;
	   } else {
	
	      // whenjs-based deferred factory
	      //
	      self._defer = when.defer;
	   }
	
	   // WAMP transport
	   //
	   // backward compatiblity
	   if (!self._options.transports) {
	      self._options.transports = [{
	         type: 'websocket',
	         url: self._options.url
	      }];
	   }
	   self._transport_factories = [];
	   self._init_transport_factories();
	
	   // WAMP session
	   //
	   self._session = null;
	   self._session_close_reason = null;
	   self._session_close_message = null;
	
	   // automatic reconnection configuration
	   //
	
	   // enable automatic reconnect if host is unreachable
	   if (self._options.retry_if_unreachable !== undefined) {
	      self._retry_if_unreachable = self._options.retry_if_unreachable;
	   } else {
	      self._retry_if_unreachable = true;
	   }
	
	   // maximum number of reconnection attempts
	   self._max_retries = self._options.max_retries || 15;
	
	   // initial retry delay in seconds
	   self._initial_retry_delay = self._options.initial_retry_delay || 1.5;
	
	   // maximum seconds between reconnection attempts
	   self._max_retry_delay = self._options.max_retry_delay || 300;
	
	   // the growth factor applied to the retry delay on each retry cycle
	   self._retry_delay_growth = self._options.retry_delay_growth || 1.5;
	
	   // the SD of a Gaussian to jitter the delay on each retry cycle
	   // as a fraction of the mean
	   self._retry_delay_jitter = self._options.retry_delay_jitter || 0.1;
	
	   // reconnection tracking
	   //
	
	   // total number of successful connections
	   self._connect_successes = 0;
	
	   // controls if we should try to reconnect
	   self._retry = false;
	
	   // current number of reconnect cycles we went through
	   self._retry_count = 0;
	
	   // the current retry delay
	   self._retry_delay = self._initial_retry_delay;
	
	   // flag indicating if we are currently in a reconnect cycle
	   self._is_retrying = false;
	
	   // when retrying, this is the timer object returned from window.setTimeout()
	   self._retry_timer = null;
	};
	
	Connection.prototype._create_transport = function () {
	   for (var i = 0; i < this._transport_factories.length; ++i) {
	      var transport_factory = this._transport_factories[i];
	      log.debug("trying to create WAMP transport of type: " + transport_factory.type);
	      try {
	         var transport = transport_factory.create();
	         if (transport) {
	            log.debug("using WAMP transport type: " + transport_factory.type);
	            return transport;
	         }
	      } catch (e) {
	         // ignore
	         log.debug("could not create WAMP transport '" + transport_factory.type + "': " + e);
	      }
	   }
	
	   // could not create any WAMP transport
	   return null;
	};
	
	Connection.prototype._init_transport_factories = function () {
	   // WAMP transport
	   //
	   var transports, transport_options, transport_factory, transport_factory_klass;
	
	   util.assert(this._options.transports, "No transport.factory specified");
	   transports = this._options.transports;
	   //if(typeof transports === "object") {
	   //    this._options.transports = [transports];
	   //}
	   for (var i = 0; i < this._options.transports.length; ++i) {
	      // cascading transports until we find one which works
	      transport_options = this._options.transports[i];
	
	      if (!transport_options.url) {
	         // defaulting to options.url if none is provided
	         transport_options.url = this._options.url;
	      }
	      if (!transport_options.protocols) {
	         transport_options.protocols = this._options.protocols;
	      }
	      util.assert(transport_options.type, "No transport.type specified");
	      util.assert(typeof transport_options.type === "string", "transport.type must be a string");
	      try {
	         transport_factory_klass = autobahn.transports.get(transport_options.type);
	         if (transport_factory_klass) {
	            transport_factory = new transport_factory_klass(transport_options);
	            this._transport_factories.push(transport_factory);
	         }
	      } catch (exc) {
	         console.error(exc);
	      }
	   }
	};
	
	Connection.prototype._autoreconnect_reset_timer = function () {
	
	   var self = this;
	
	   if (self._retry_timer) {
	      clearTimeout(self._retry_timer);
	   }
	   self._retry_timer = null;
	};
	
	Connection.prototype._autoreconnect_reset = function () {
	
	   var self = this;
	
	   self._autoreconnect_reset_timer();
	
	   self._retry_count = 0;
	   self._retry_delay = self._initial_retry_delay;
	   self._is_retrying = false;
	};
	
	Connection.prototype._autoreconnect_advance = function () {
	
	   var self = this;
	
	   // jitter retry delay
	   if (self._retry_delay_jitter) {
	      self._retry_delay = util.rand_normal(self._retry_delay, self._retry_delay * self._retry_delay_jitter);
	   }
	
	   // cap the retry delay
	   if (self._retry_delay > self._max_retry_delay) {
	      self._retry_delay = self._max_retry_delay;
	   }
	
	   // count number of retries
	   self._retry_count += 1;
	
	   var res;
	   if (self._retry && self._retry_count <= self._max_retries) {
	      res = {
	         count: self._retry_count,
	         delay: self._retry_delay,
	         will_retry: true
	      };
	   } else {
	      res = {
	         count: null,
	         delay: null,
	         will_retry: false
	      };
	   }
	
	   // retry delay growth for next retry cycle
	   if (self._retry_delay_growth) {
	      self._retry_delay = self._retry_delay * self._retry_delay_growth;
	   }
	
	   return res;
	};
	
	Connection.prototype.open = function () {
	
	   var self = this;
	
	   if (self._transport) {
	      throw "connection already open (or opening)";
	   }
	
	   self._autoreconnect_reset();
	   self._retry = true;
	
	   function retry() {
	
	      // create a WAMP transport
	      self._transport = self._create_transport();
	
	      if (!self._transport) {
	         // failed to create a WAMP transport
	         self._retry = false;
	         if (self.onclose) {
	            var details = {
	               reason: null,
	               message: null,
	               retry_delay: null,
	               retry_count: null,
	               will_retry: false
	            };
	            self.onclose("unsupported", details);
	         }
	         return;
	      }
	
	      // create a new WAMP session using the WebSocket connection as transport
	      self._session = new session.Session(self._transport, self._defer, self._options.onchallenge);
	      self._session_close_reason = null;
	      self._session_close_message = null;
	
	      self._transport.onopen = function () {
	
	         // reset auto-reconnect timer and tracking
	         self._autoreconnect_reset();
	
	         // log successful connections
	         self._connect_successes += 1;
	
	         // start WAMP session
	         self._session.join(self._options.realm, self._options.authmethods, self._options.authid);
	      };
	
	      self._session.onjoin = function (details) {
	         if (self.onopen) {
	            try {
	               self.onopen(self._session, details);
	            } catch (e) {
	               log.debug("Exception raised from app code while firing Connection.onopen()", e);
	            }
	         }
	      };
	
	      //
	      // ... WAMP session is now attached to realm.
	      //
	
	      self._session.onleave = function (reason, details) {
	         self._session_close_reason = reason;
	         self._session_close_message = details.message || "";
	         self._retry = false;
	         self._transport.close(1000);
	      };
	
	      self._transport.onclose = function (evt) {
	
	         // remove any pending reconnect timer
	         self._autoreconnect_reset_timer();
	
	         self._transport = null;
	
	         var reason = null;
	         if (self._connect_successes === 0) {
	            reason = "unreachable";
	            if (!self._retry_if_unreachable) {
	               self._retry = false;
	            }
	         } else if (!evt.wasClean) {
	            reason = "lost";
	         } else {
	            reason = "closed";
	         }
	
	         var next_retry = self._autoreconnect_advance();
	
	         // fire app code handler
	         //
	         if (self.onclose) {
	            var details = {
	               reason: self._session_close_reason,
	               message: self._session_close_message,
	               retry_delay: next_retry.delay,
	               retry_count: next_retry.count,
	               will_retry: next_retry.will_retry
	            };
	            try {
	               // Connection.onclose() allows to cancel any subsequent retry attempt
	               var stop_retrying = self.onclose(reason, details);
	            } catch (e) {
	               log.debug("Exception raised from app code while firing Connection.onclose()", e);
	            }
	         }
	
	         // reset session info
	         //
	         if (self._session) {
	            self._session._id = null;
	            self._session = null;
	            self._session_close_reason = null;
	            self._session_close_message = null;
	         }
	
	         // automatic reconnection
	         //
	         if (self._retry && !stop_retrying) {
	
	            if (next_retry.will_retry) {
	
	               self._is_retrying = true;
	
	               log.debug("retrying in " + next_retry.delay + " s");
	               self._retry_timer = setTimeout(retry, next_retry.delay * 1000);
	            } else {
	               log.debug("giving up trying to reconnect");
	            }
	         }
	      };
	   }
	
	   retry();
	};
	
	Connection.prototype.close = function (reason, message) {
	   var self = this;
	
	   if (!self._transport && !self._is_retrying) {
	      throw "connection already closed";
	   }
	
	   // the app wants to close .. don't retry
	   self._retry = false;
	
	   if (self._session && self._session.isOpen) {
	      // if there is an open session, close that first.
	      self._session.leave(reason, message);
	   } else if (self._transport) {
	      // no session active: just close the transport
	      self._transport.close(1000);
	   }
	};
	
	Object.defineProperty(Connection.prototype, "defer", {
	   get: function get() {
	      return this._defer;
	   }
	});
	
	Object.defineProperty(Connection.prototype, "session", {
	   get: function get() {
	      return this._session;
	   }
	});
	
	Object.defineProperty(Connection.prototype, "isOpen", {
	   get: function get() {
	      if (this._session && this._session.isOpen) {
	         return true;
	      } else {
	         return false;
	      }
	   }
	});
	
	Object.defineProperty(Connection.prototype, "isConnected", {
	   get: function get() {
	      if (this._transport) {
	         return true;
	      } else {
	         return false;
	      }
	   }
	});
	
	Object.defineProperty(Connection.prototype, "transport", {
	   get: function get() {
	      if (this._transport) {
	         return this._transport;
	      } else {
	         return { info: { type: 'none', url: null, protocol: null } };
	      }
	   }
	});
	
	Object.defineProperty(Connection.prototype, "isRetrying", {
	   get: function get() {
	      return this._is_retrying;
	   }
	});
	
	exports.Connection = Connection;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	//
	//  AutobahnJS - http://autobahn.ws, http://wamp.ws
	//
	//  A JavaScript library for WAMP ("The Web Application Messaging Protocol").
	//
	//  Copyright (C) 2011-2014 Tavendo GmbH, http://tavendo.com
	//
	//  Licensed under the MIT License.
	//  http://www.opensource.org/licenses/mit-license.php
	//
	///////////////////////////////////////////////////////////////////////////////
	
	"use strict";
	
	function Transports() {
	   this._repository = {};
	}
	
	Transports.prototype.register = function (name, factory) {
	   this._repository[name] = factory;
	};
	
	Transports.prototype.isRegistered = function (name) {
	   return this._repository[name] ? true : false;
	};
	
	Transports.prototype.get = function (name) {
	   if (this._repository[name] !== undefined) {
	      return this._repository[name];
	   } else {
	      throw "no such transport: " + name;
	   }
	};
	
	Transports.prototype.list = function () {
	   var items = [];
	   for (var name in this._repository) {
	      items.push(name);
	   }
	   return items;
	};
	
	var _transports = new Transports();
	
	// register default transports
	var websocket = __webpack_require__(41);
	_transports.register("websocket", websocket.Factory);
	
	var longpoll = __webpack_require__(42);
	_transports.register("longpoll", longpoll.Factory);
	
	exports.transports = _transports;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {///////////////////////////////////////////////////////////////////////////////
	//
	//  AutobahnJS - http://autobahn.ws, http://wamp.ws
	//
	//  A JavaScript library for WAMP ("The Web Application Messaging Protocol").
	//
	//  Copyright (C) 2011-2014 Tavendo GmbH, http://tavendo.com
	//
	//  Licensed under the MIT License.
	//  http://www.opensource.org/licenses/mit-license.php
	//
	///////////////////////////////////////////////////////////////////////////////
	
	'use strict';
	
	var util = __webpack_require__(34);
	var log = __webpack_require__(35);
	
	function Factory(options) {
	   var self = this;
	
	   util.assert(options.url !== undefined, "options.url missing");
	   util.assert(typeof options.url === "string", "options.url must be a string");
	
	   if (!options.protocols) {
	      options.protocols = ['wamp.2.json'];
	   } else {
	      util.assert(Array.isArray(options.protocols), "options.protocols must be an array");
	   }
	
	   self._options = options;
	}
	
	Factory.prototype.type = "websocket";
	
	Factory.prototype.create = function () {
	
	   var self = this;
	
	   // the WAMP transport we create
	   var transport = {};
	
	   // these will get defined further below
	   transport.protocol = undefined;
	   transport.send = undefined;
	   transport.close = undefined;
	
	   // these will get overridden by the WAMP session using this transport
	   transport.onmessage = function () {};
	   transport.onopen = function () {};
	   transport.onclose = function () {};
	
	   transport.info = {
	      type: 'websocket',
	      url: null,
	      protocol: 'wamp.2.json'
	   };
	
	   // Test below used to be via the 'window' object in the browser.
	   // This fails when running in a Web worker.
	   //
	   // running in Node.js
	   //
	   if (global.process && global.process.versions.node) {
	
	      (function () {
	
	         //var WebSocket = require('ws'); // https://github.com/einaros/ws
	         var websocket;
	
	         var protocols;
	         if (self._options.protocols) {
	            protocols = self._options.protocols;
	            if (Array.isArray(protocols)) {
	               protocols = protocols.join(',');
	            }
	            websocket = new WebSocket(self._options.url, { protocol: protocols });
	         } else {
	            websocket = new WebSocket(self._options.url);
	         }
	
	         transport.send = function (msg) {
	            var payload = JSON.stringify(msg);
	            websocket.send(payload, { binary: false });
	         };
	
	         transport.close = function (code, reason) {
	            websocket.close();
	         };
	
	         websocket.on('open', function () {
	            transport.onopen();
	         });
	
	         websocket.on('message', function (data, flags) {
	            if (flags.binary) {
	               // FIXME!
	            } else {
	                  var msg = JSON.parse(data);
	                  transport.onmessage(msg);
	               }
	         });
	
	         // FIXME: improve mapping to WS API for the following
	         // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Close_codes
	         //
	         websocket.on('close', function (code, message) {
	            z;
	            var details = {
	               code: code,
	               reason: message,
	               wasClean: code === 1000
	            };
	            transport.onclose(details);
	         });
	
	         websocket.on('error', function (error) {
	            var details = {
	               code: 1006,
	               reason: '',
	               wasClean: false
	            };
	            transport.onclose(details);
	         });
	      })();
	      //
	      // running in the browser
	      //
	   } else {
	
	         (function () {
	
	            var websocket;
	
	            // Chrome, MSIE, newer Firefox
	            if ("WebSocket" in window) {
	
	               if (self._options.protocols) {
	                  websocket = new global.WebSocket(self._options.url, self._options.protocols);
	               } else {
	                  websocket = new global.WebSocket(self._options.url);
	               }
	
	               // older versions of Firefox prefix the WebSocket object
	            } else if ("MozWebSocket" in window) {
	
	                  if (self._options.protocols) {
	                     websocket = new global.MozWebSocket(self._options.url, self._options.protocols);
	                  } else {
	                     websocket = new global.MozWebSocket(self._options.url);
	                  }
	               } else {
	                  throw "browser does not support WebSocket or WebSocket in Web workers";
	               }
	
	            websocket.onmessage = function (evt) {
	               log.debug("WebSocket transport receive", evt.data);
	
	               var msg = JSON.parse(evt.data);
	               transport.onmessage(msg);
	            };
	
	            websocket.onopen = function () {
	               transport.info.url = self._options.url;
	               transport.onopen();
	            };
	
	            websocket.onclose = function (evt) {
	               var details = {
	                  code: evt.code,
	                  reason: evt.message,
	                  wasClean: evt.wasClean
	               };
	               transport.onclose(details);
	            };
	
	            // do NOT do the following, since that will make
	            // transport.onclose() fire twice (browsers already fire
	            // websocket.onclose() for errors also)
	            //websocket.onerror = websocket.onclose;
	
	            transport.send = function (msg) {
	               var payload = JSON.stringify(msg);
	               log.debug("WebSocket transport send", payload);
	               websocket.send(payload);
	            };
	
	            transport.close = function (code, reason) {
	               websocket.close(code, reason);
	            };
	         })();
	      }
	
	   return transport;
	};
	
	exports.Factory = Factory;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	//
	//  AutobahnJS - http://autobahn.ws, http://wamp.ws
	//
	//  A JavaScript library for WAMP ("The Web Application Messaging Protocol").
	//
	//  Copyright (C) 2011-2014 Tavendo GmbH, http://tavendo.com
	//
	//  Licensed under the MIT License.
	//  http://www.opensource.org/licenses/mit-license.php
	//
	///////////////////////////////////////////////////////////////////////////////
	
	'use strict';
	
	var util = __webpack_require__(34);
	var log = __webpack_require__(35);
	
	var when = __webpack_require__(8);
	
	function Factory(options) {
	   var self = this;
	
	   util.assert(options.url !== undefined, "options.url missing");
	   util.assert(typeof options.url === "string", "options.url must be a string");
	
	   self._options = options;
	};
	
	Factory.prototype.type = "longpoll";
	
	Factory.prototype.create = function () {
	
	   var self = this;
	
	   log.debug("longpoll.Factory.create");
	
	   // the WAMP transport we create
	   var transport = {};
	
	   // these will get defined further below
	   transport.protocol = undefined;
	   transport.send = undefined;
	   transport.close = undefined;
	
	   // these will get overridden by the WAMP session using this transport
	   transport.onmessage = function () {};
	   transport.onopen = function () {};
	   transport.onclose = function () {};
	
	   transport.info = {
	      type: 'longpoll',
	      url: null,
	      protocol: 'wamp.2.json'
	   };
	
	   transport._run = function () {
	
	      var session_info = null;
	      var send_buffer = [];
	      var is_closing = false;
	
	      var txseq = 0;
	      var rxseq = 0;
	
	      var options = { 'protocols': ['wamp.2.json'] };
	      var request_timeout = self._options.request_timeout || 2000;
	
	      util.http_post(self._options.url + '/open', JSON.stringify(options), request_timeout).then(function (payload) {
	
	         session_info = JSON.parse(payload);
	         var base_url = self._options.url + '/' + session_info.transport;
	
	         transport.info.url = base_url;
	
	         log.debug("longpoll.Transport: open", session_info);
	
	         transport.close = function (code, reason) {
	
	            if (is_closing) {
	               throw "transport is already closing";
	            }
	
	            is_closing = true;
	
	            util.http_post(base_url + '/close', null, request_timeout).then(function () {
	               log.debug("longpoll.Transport: transport closed");
	               var details = {
	                  code: 1000,
	                  reason: "transport closed",
	                  wasClean: true
	               };
	               transport.onclose(details);
	            }, function (err) {
	               log.debug("longpoll.Transport: could not close transport", err.code, err.text);
	            });
	         };
	
	         transport.send = function (msg) {
	
	            if (is_closing) {
	               throw "transport is closing or closed already";
	            }
	
	            txseq += 1;
	
	            log.debug("longpoll.Transport: sending message ...", msg);
	
	            var payload = JSON.stringify(msg);
	
	            util.http_post(base_url + '/send', payload, request_timeout).then(function () {
	               // ok, message sent
	               log.debug("longpoll.Transport: message sent");
	            }, function (err) {
	               log.debug("longpoll.Transport: could not send message", err.code, err.text);
	
	               is_closing = true;
	               var details = {
	                  code: 1001,
	                  reason: "transport send failure (HTTP/POST status " + err.code + " - '" + err.text + "')",
	                  wasClean: false
	               };
	               transport.onclose(details);
	            });
	         };
	
	         function receive() {
	
	            rxseq += 1;
	
	            log.debug("longpoll.Transport: polling for message ...");
	
	            util.http_post(base_url + '/receive', null, request_timeout).then(function (payload) {
	
	               if (payload) {
	
	                  var msg = JSON.parse(payload);
	
	                  log.debug("longpoll.Transport: message received", msg);
	
	                  transport.onmessage(msg);
	               }
	
	               if (!is_closing) {
	                  receive();
	               }
	            }, function (err) {
	               log.debug("longpoll.Transport: could not receive message", err.code, err.text);
	
	               is_closing = true;
	               var details = {
	                  code: 1001,
	                  reason: "transport receive failure (HTTP/POST status " + err.code + " - '" + err.text + "')",
	                  wasClean: false
	               };
	               transport.onclose(details);
	            });
	         }
	
	         receive();
	
	         transport.onopen();
	      }, function (err) {
	         log.debug("longpoll.Transport: could not open transport", err.code, err.text);
	
	         is_closing = true;
	         var details = {
	            code: 1001,
	            reason: "transport open failure (HTTP/POST status " + err.code + " - '" + err.text + "')",
	            wasClean: false
	         };
	         transport.onclose(details);
	      });
	   };
	
	   transport._run();
	
	   return transport;
	};
	
	exports.Factory = Factory;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	//
	//  AutobahnJS - http://autobahn.ws, http://wamp.ws
	//
	//  A JavaScript library for WAMP ("The Web Application Messaging Protocol").
	//
	//  Copyright (C) 2011-2014 Tavendo GmbH, http://tavendo.com
	//
	//  Licensed under the MIT License.
	//  http://www.opensource.org/licenses/mit-license.php
	//
	///////////////////////////////////////////////////////////////////////////////
	
	"use strict";
	
	var when = __webpack_require__(8);
	var when_fn = __webpack_require__(37);
	
	function auth(session, user, extra) {
	
	   // Persona Issues:
	   //
	   // Chrome: https://github.com/mozilla/persona/issues/4083
	   // IE11: https://groups.google.com/forum/#!topic/mozilla.dev.identity/keEkVpvfLA8
	
	   var d = session.defer();
	
	   navigator.id.watch({
	      loggedInUser: user,
	      onlogin: function onlogin(assertion) {
	         // A user has logged in! Here you need to:
	         // 1. Send the assertion to your backend for verification and to create a session.
	         // 2. Update your UI.
	         d.resolve(assertion);
	      },
	      onlogout: function onlogout() {
	         // A user has logged out! Here you need to:
	         // Tear down the user's session by redirecting the user or making a call to your backend.
	         // Also, make sure loggedInUser will get set to null on the next page load.
	         // (That's a literal JavaScript null. Not false, 0, or undefined. null.)
	         session.leave("wamp.close.logout");
	      }
	   });
	
	   if (d.promise.then) {
	      // whenjs has the actual user promise in an attribute
	      return d.promise;
	   } else {
	      return d;
	   }
	}
	
	exports.auth = auth;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	//
	//  AutobahnJS - http://autobahn.ws, http://wamp.ws
	//
	//  A JavaScript library for WAMP ("The Web Application Messaging Protocol").
	//
	//  Copyright (C) 2011-2014 Tavendo GmbH, http://tavendo.com
	//
	//  Licensed under the MIT License.
	//  http://www.opensource.org/licenses/mit-license.php
	//
	///////////////////////////////////////////////////////////////////////////////
	
	// require('assert') would be nice .. but it does not
	// work with Google Closure after Browserify
	
	'use strict';
	
	var crypto = __webpack_require__(45);
	
	// PBKDF2-base key derivation function for salted WAMP-CRA
	//
	function derive_key(secret, salt, iterations, keylen) {
	   var iterations = iterations || 1000;
	   var keylen = keylen || 32;
	   var config = {
	      keySize: keylen / 4,
	      iterations: iterations,
	      hasher: crypto.algo.SHA256
	   };
	   var key = crypto.PBKDF2(secret, salt, config);
	   return key.toString(crypto.enc.Base64);
	}
	
	function sign(key, challenge) {
	   return crypto.HmacSHA256(challenge, key).toString(crypto.enc.Base64);
	}
	
	exports.sign = sign;
	exports.derive_key = derive_key;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(48), __webpack_require__(49), __webpack_require__(50), __webpack_require__(51), __webpack_require__(52), __webpack_require__(53), __webpack_require__(54), __webpack_require__(55), __webpack_require__(56), __webpack_require__(57), __webpack_require__(58), __webpack_require__(59), __webpack_require__(60), __webpack_require__(61), __webpack_require__(62), __webpack_require__(46), __webpack_require__(63), __webpack_require__(64), __webpack_require__(65), __webpack_require__(66), __webpack_require__(67), __webpack_require__(68), __webpack_require__(69), __webpack_require__(70), __webpack_require__(71), __webpack_require__(72), __webpack_require__(73), __webpack_require__(74), __webpack_require__(75), __webpack_require__(76), __webpack_require__(77), __webpack_require__(78));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
		} else {
			// Global (browser)
			root.CryptoJS = factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		return CryptoJS;
	});

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Cipher core components.
	  */
		CryptoJS.lib.Cipher || (function (undefined) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var WordArray = C_lib.WordArray;
			var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
			var C_enc = C.enc;
			var Utf8 = C_enc.Utf8;
			var Base64 = C_enc.Base64;
			var C_algo = C.algo;
			var EvpKDF = C_algo.EvpKDF;
	
			/**
	   * Abstract base cipher template.
	   *
	   * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	   * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	   * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	   * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	   */
			var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
				/**
	    * Configuration options.
	    *
	    * @property {WordArray} iv The IV to use for this operation.
	    */
				cfg: Base.extend(),
	
				/**
	    * Creates this cipher in encryption mode.
	    *
	    * @param {WordArray} key The key.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {Cipher} A cipher instance.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	    */
				createEncryptor: function createEncryptor(key, cfg) {
					return this.create(this._ENC_XFORM_MODE, key, cfg);
				},
	
				/**
	    * Creates this cipher in decryption mode.
	    *
	    * @param {WordArray} key The key.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {Cipher} A cipher instance.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	    */
				createDecryptor: function createDecryptor(key, cfg) {
					return this.create(this._DEC_XFORM_MODE, key, cfg);
				},
	
				/**
	    * Initializes a newly created cipher.
	    *
	    * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	    * @param {WordArray} key The key.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @example
	    *
	    *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	    */
				init: function init(xformMode, key, cfg) {
					// Apply config defaults
					this.cfg = this.cfg.extend(cfg);
	
					// Store transform mode and key
					this._xformMode = xformMode;
					this._key = key;
	
					// Set initial values
					this.reset();
				},
	
				/**
	    * Resets this cipher to its initial state.
	    *
	    * @example
	    *
	    *     cipher.reset();
	    */
				reset: function reset() {
					// Reset data buffer
					BufferedBlockAlgorithm.reset.call(this);
	
					// Perform concrete-cipher logic
					this._doReset();
				},
	
				/**
	    * Adds data to be encrypted or decrypted.
	    *
	    * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	    *
	    * @return {WordArray} The data after processing.
	    *
	    * @example
	    *
	    *     var encrypted = cipher.process('data');
	    *     var encrypted = cipher.process(wordArray);
	    */
				process: function process(dataUpdate) {
					// Append
					this._append(dataUpdate);
	
					// Process available blocks
					return this._process();
				},
	
				/**
	    * Finalizes the encryption or decryption process.
	    * Note that the finalize operation is effectively a destructive, read-once operation.
	    *
	    * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	    *
	    * @return {WordArray} The data after final processing.
	    *
	    * @example
	    *
	    *     var encrypted = cipher.finalize();
	    *     var encrypted = cipher.finalize('data');
	    *     var encrypted = cipher.finalize(wordArray);
	    */
				finalize: function finalize(dataUpdate) {
					// Final data update
					if (dataUpdate) {
						this._append(dataUpdate);
					}
	
					// Perform concrete-cipher logic
					var finalProcessedData = this._doFinalize();
	
					return finalProcessedData;
				},
	
				keySize: 128 / 32,
	
				ivSize: 128 / 32,
	
				_ENC_XFORM_MODE: 1,
	
				_DEC_XFORM_MODE: 2,
	
				/**
	    * Creates shortcut functions to a cipher's object interface.
	    *
	    * @param {Cipher} cipher The cipher to create a helper for.
	    *
	    * @return {Object} An object with encrypt and decrypt shortcut functions.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	    */
				_createHelper: (function () {
					function selectCipherStrategy(key) {
						if (typeof key == 'string') {
							return PasswordBasedCipher;
						} else {
							return SerializableCipher;
						}
					}
	
					return function (cipher) {
						return {
							encrypt: function encrypt(message, key, cfg) {
								return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
							},
	
							decrypt: function decrypt(ciphertext, key, cfg) {
								return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
							}
						};
					};
				})()
			});
	
			/**
	   * Abstract base stream cipher template.
	   *
	   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	   */
			var StreamCipher = C_lib.StreamCipher = Cipher.extend({
				_doFinalize: function _doFinalize() {
					// Process partial blocks
					var finalProcessedBlocks = this._process(!!'flush');
	
					return finalProcessedBlocks;
				},
	
				blockSize: 1
			});
	
			/**
	   * Mode namespace.
	   */
			var C_mode = C.mode = {};
	
			/**
	   * Abstract base block cipher mode template.
	   */
			var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
				/**
	    * Creates this mode for encryption.
	    *
	    * @param {Cipher} cipher A block cipher instance.
	    * @param {Array} iv The IV words.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	    */
				createEncryptor: function createEncryptor(cipher, iv) {
					return this.Encryptor.create(cipher, iv);
				},
	
				/**
	    * Creates this mode for decryption.
	    *
	    * @param {Cipher} cipher A block cipher instance.
	    * @param {Array} iv The IV words.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	    */
				createDecryptor: function createDecryptor(cipher, iv) {
					return this.Decryptor.create(cipher, iv);
				},
	
				/**
	    * Initializes a newly created mode.
	    *
	    * @param {Cipher} cipher A block cipher instance.
	    * @param {Array} iv The IV words.
	    *
	    * @example
	    *
	    *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	    */
				init: function init(cipher, iv) {
					this._cipher = cipher;
					this._iv = iv;
				}
			});
	
			/**
	   * Cipher Block Chaining mode.
	   */
			var CBC = C_mode.CBC = (function () {
				/**
	    * Abstract base CBC mode.
	    */
				var CBC = BlockCipherMode.extend();
	
				/**
	    * CBC encryptor.
	    */
				CBC.Encryptor = CBC.extend({
					/**
	     * Processes the data block at offset.
	     *
	     * @param {Array} words The data words to operate on.
	     * @param {number} offset The offset where the block starts.
	     *
	     * @example
	     *
	     *     mode.processBlock(data.words, offset);
	     */
					processBlock: function processBlock(words, offset) {
						// Shortcuts
						var cipher = this._cipher;
						var blockSize = cipher.blockSize;
	
						// XOR and encrypt
						xorBlock.call(this, words, offset, blockSize);
						cipher.encryptBlock(words, offset);
	
						// Remember this block to use with next block
						this._prevBlock = words.slice(offset, offset + blockSize);
					}
				});
	
				/**
	    * CBC decryptor.
	    */
				CBC.Decryptor = CBC.extend({
					/**
	     * Processes the data block at offset.
	     *
	     * @param {Array} words The data words to operate on.
	     * @param {number} offset The offset where the block starts.
	     *
	     * @example
	     *
	     *     mode.processBlock(data.words, offset);
	     */
					processBlock: function processBlock(words, offset) {
						// Shortcuts
						var cipher = this._cipher;
						var blockSize = cipher.blockSize;
	
						// Remember this block to use with next block
						var thisBlock = words.slice(offset, offset + blockSize);
	
						// Decrypt and XOR
						cipher.decryptBlock(words, offset);
						xorBlock.call(this, words, offset, blockSize);
	
						// This block becomes the previous block
						this._prevBlock = thisBlock;
					}
				});
	
				function xorBlock(words, offset, blockSize) {
					// Shortcut
					var iv = this._iv;
	
					// Choose mixing block
					if (iv) {
						var block = iv;
	
						// Remove IV for subsequent blocks
						this._iv = undefined;
					} else {
						var block = this._prevBlock;
					}
	
					// XOR blocks
					for (var i = 0; i < blockSize; i++) {
						words[offset + i] ^= block[i];
					}
				}
	
				return CBC;
			})();
	
			/**
	   * Padding namespace.
	   */
			var C_pad = C.pad = {};
	
			/**
	   * PKCS #5/7 padding strategy.
	   */
			var Pkcs7 = C_pad.Pkcs7 = {
				/**
	    * Pads data using the algorithm defined in PKCS #5/7.
	    *
	    * @param {WordArray} data The data to pad.
	    * @param {number} blockSize The multiple that the data should be padded to.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	    */
				pad: function pad(data, blockSize) {
					// Shortcut
					var blockSizeBytes = blockSize * 4;
	
					// Count padding bytes
					var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
	
					// Create padding word
					var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
	
					// Create padding
					var paddingWords = [];
					for (var i = 0; i < nPaddingBytes; i += 4) {
						paddingWords.push(paddingWord);
					}
					var padding = WordArray.create(paddingWords, nPaddingBytes);
	
					// Add padding
					data.concat(padding);
				},
	
				/**
	    * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	    *
	    * @param {WordArray} data The data to unpad.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	    */
				unpad: function unpad(data) {
					// Get number of padding bytes from last byte
					var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;
	
					// Remove padding
					data.sigBytes -= nPaddingBytes;
				}
			};
	
			/**
	   * Abstract base block cipher template.
	   *
	   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	   */
			var BlockCipher = C_lib.BlockCipher = Cipher.extend({
				/**
	    * Configuration options.
	    *
	    * @property {Mode} mode The block mode to use. Default: CBC
	    * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	    */
				cfg: Cipher.cfg.extend({
					mode: CBC,
					padding: Pkcs7
				}),
	
				reset: function reset() {
					// Reset cipher
					Cipher.reset.call(this);
	
					// Shortcuts
					var cfg = this.cfg;
					var iv = cfg.iv;
					var mode = cfg.mode;
	
					// Reset block mode
					if (this._xformMode == this._ENC_XFORM_MODE) {
						var modeCreator = mode.createEncryptor;
					} else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
							var modeCreator = mode.createDecryptor;
	
							// Keep at least one block in the buffer for unpadding
							this._minBufferSize = 1;
						}
					this._mode = modeCreator.call(mode, this, iv && iv.words);
				},
	
				_doProcessBlock: function _doProcessBlock(words, offset) {
					this._mode.processBlock(words, offset);
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcut
					var padding = this.cfg.padding;
	
					// Finalize
					if (this._xformMode == this._ENC_XFORM_MODE) {
						// Pad data
						padding.pad(this._data, this.blockSize);
	
						// Process final blocks
						var finalProcessedBlocks = this._process(!!'flush');
					} else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
							// Process final blocks
							var finalProcessedBlocks = this._process(!!'flush');
	
							// Unpad data
							padding.unpad(finalProcessedBlocks);
						}
	
					return finalProcessedBlocks;
				},
	
				blockSize: 128 / 32
			});
	
			/**
	   * A collection of cipher parameters.
	   *
	   * @property {WordArray} ciphertext The raw ciphertext.
	   * @property {WordArray} key The key to this ciphertext.
	   * @property {WordArray} iv The IV used in the ciphering operation.
	   * @property {WordArray} salt The salt used with a key derivation function.
	   * @property {Cipher} algorithm The cipher algorithm.
	   * @property {Mode} mode The block mode used in the ciphering operation.
	   * @property {Padding} padding The padding scheme used in the ciphering operation.
	   * @property {number} blockSize The block size of the cipher.
	   * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	   */
			var CipherParams = C_lib.CipherParams = Base.extend({
				/**
	    * Initializes a newly created cipher params object.
	    *
	    * @param {Object} cipherParams An object with any of the possible cipher parameters.
	    *
	    * @example
	    *
	    *     var cipherParams = CryptoJS.lib.CipherParams.create({
	    *         ciphertext: ciphertextWordArray,
	    *         key: keyWordArray,
	    *         iv: ivWordArray,
	    *         salt: saltWordArray,
	    *         algorithm: CryptoJS.algo.AES,
	    *         mode: CryptoJS.mode.CBC,
	    *         padding: CryptoJS.pad.PKCS7,
	    *         blockSize: 4,
	    *         formatter: CryptoJS.format.OpenSSL
	    *     });
	    */
				init: function init(cipherParams) {
					this.mixIn(cipherParams);
				},
	
				/**
	    * Converts this cipher params object to a string.
	    *
	    * @param {Format} formatter (Optional) The formatting strategy to use.
	    *
	    * @return {string} The stringified cipher params.
	    *
	    * @throws Error If neither the formatter nor the default formatter is set.
	    *
	    * @example
	    *
	    *     var string = cipherParams + '';
	    *     var string = cipherParams.toString();
	    *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	    */
				toString: function toString(formatter) {
					return (formatter || this.formatter).stringify(this);
				}
			});
	
			/**
	   * Format namespace.
	   */
			var C_format = C.format = {};
	
			/**
	   * OpenSSL formatting strategy.
	   */
			var OpenSSLFormatter = C_format.OpenSSL = {
				/**
	    * Converts a cipher params object to an OpenSSL-compatible string.
	    *
	    * @param {CipherParams} cipherParams The cipher params object.
	    *
	    * @return {string} The OpenSSL-compatible string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	    */
				stringify: function stringify(cipherParams) {
					// Shortcuts
					var ciphertext = cipherParams.ciphertext;
					var salt = cipherParams.salt;
	
					// Format
					if (salt) {
						var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
					} else {
						var wordArray = ciphertext;
					}
	
					return wordArray.toString(Base64);
				},
	
				/**
	    * Converts an OpenSSL-compatible string to a cipher params object.
	    *
	    * @param {string} openSSLStr The OpenSSL-compatible string.
	    *
	    * @return {CipherParams} The cipher params object.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	    */
				parse: function parse(openSSLStr) {
					// Parse base64
					var ciphertext = Base64.parse(openSSLStr);
	
					// Shortcut
					var ciphertextWords = ciphertext.words;
	
					// Test for salt
					if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
						// Extract salt
						var salt = WordArray.create(ciphertextWords.slice(2, 4));
	
						// Remove salt from ciphertext
						ciphertextWords.splice(0, 4);
						ciphertext.sigBytes -= 16;
					}
	
					return CipherParams.create({ ciphertext: ciphertext, salt: salt });
				}
			};
	
			/**
	   * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	   */
			var SerializableCipher = C_lib.SerializableCipher = Base.extend({
				/**
	    * Configuration options.
	    *
	    * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	    */
				cfg: Base.extend({
					format: OpenSSLFormatter
				}),
	
				/**
	    * Encrypts a message.
	    *
	    * @param {Cipher} cipher The cipher algorithm to use.
	    * @param {WordArray|string} message The message to encrypt.
	    * @param {WordArray} key The key.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {CipherParams} A cipher params object.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	    *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	    *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	    */
				encrypt: function encrypt(cipher, message, key, cfg) {
					// Apply config defaults
					cfg = this.cfg.extend(cfg);
	
					// Encrypt
					var encryptor = cipher.createEncryptor(key, cfg);
					var ciphertext = encryptor.finalize(message);
	
					// Shortcut
					var cipherCfg = encryptor.cfg;
	
					// Create and return serializable cipher params
					return CipherParams.create({
						ciphertext: ciphertext,
						key: key,
						iv: cipherCfg.iv,
						algorithm: cipher,
						mode: cipherCfg.mode,
						padding: cipherCfg.padding,
						blockSize: cipher.blockSize,
						formatter: cfg.format
					});
				},
	
				/**
	    * Decrypts serialized ciphertext.
	    *
	    * @param {Cipher} cipher The cipher algorithm to use.
	    * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	    * @param {WordArray} key The key.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {WordArray} The plaintext.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	    *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	    */
				decrypt: function decrypt(cipher, ciphertext, key, cfg) {
					// Apply config defaults
					cfg = this.cfg.extend(cfg);
	
					// Convert string to CipherParams
					ciphertext = this._parse(ciphertext, cfg.format);
	
					// Decrypt
					var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
	
					return plaintext;
				},
	
				/**
	    * Converts serialized ciphertext to CipherParams,
	    * else assumed CipherParams already and returns ciphertext unchanged.
	    *
	    * @param {CipherParams|string} ciphertext The ciphertext.
	    * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	    *
	    * @return {CipherParams} The unserialized ciphertext.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	    */
				_parse: function _parse(ciphertext, format) {
					if (typeof ciphertext == 'string') {
						return format.parse(ciphertext, this);
					} else {
						return ciphertext;
					}
				}
			});
	
			/**
	   * Key derivation function namespace.
	   */
			var C_kdf = C.kdf = {};
	
			/**
	   * OpenSSL key derivation function.
	   */
			var OpenSSLKdf = C_kdf.OpenSSL = {
				/**
	    * Derives a key and IV from a password.
	    *
	    * @param {string} password The password to derive from.
	    * @param {number} keySize The size in words of the key to generate.
	    * @param {number} ivSize The size in words of the IV to generate.
	    * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	    *
	    * @return {CipherParams} A cipher params object with the key, IV, and salt.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	    *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	    */
				execute: function execute(password, keySize, ivSize, salt) {
					// Generate random salt
					if (!salt) {
						salt = WordArray.random(64 / 8);
					}
	
					// Derive key and IV
					var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
	
					// Separate key and IV
					var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
					key.sigBytes = keySize * 4;
	
					// Return params
					return CipherParams.create({ key: key, iv: iv, salt: salt });
				}
			};
	
			/**
	   * A serializable cipher wrapper that derives the key from a password,
	   * and returns ciphertext as a serializable cipher params object.
	   */
			var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
				/**
	    * Configuration options.
	    *
	    * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	    */
				cfg: SerializableCipher.cfg.extend({
					kdf: OpenSSLKdf
				}),
	
				/**
	    * Encrypts a message using a password.
	    *
	    * @param {Cipher} cipher The cipher algorithm to use.
	    * @param {WordArray|string} message The message to encrypt.
	    * @param {string} password The password.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {CipherParams} A cipher params object.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	    *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	    */
				encrypt: function encrypt(cipher, message, password, cfg) {
					// Apply config defaults
					cfg = this.cfg.extend(cfg);
	
					// Derive key and other params
					var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
	
					// Add IV to config
					cfg.iv = derivedParams.iv;
	
					// Encrypt
					var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
	
					// Mix in derived params
					ciphertext.mixIn(derivedParams);
	
					return ciphertext;
				},
	
				/**
	    * Decrypts serialized ciphertext using a password.
	    *
	    * @param {Cipher} cipher The cipher algorithm to use.
	    * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	    * @param {string} password The password.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {WordArray} The plaintext.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	    *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	    */
				decrypt: function decrypt(cipher, ciphertext, password, cfg) {
					// Apply config defaults
					cfg = this.cfg.extend(cfg);
	
					// Convert string to CipherParams
					ciphertext = this._parse(ciphertext, cfg.format);
	
					// Derive key and other params
					var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
	
					// Add IV to config
					cfg.iv = derivedParams.iv;
	
					// Decrypt
					var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
	
					return plaintext;
				}
			});
		})();
	});

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory();
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define([], factory);
		} else {
			// Global (browser)
			root.CryptoJS = factory();
		}
	})(undefined, function () {
	
		/**
	  * CryptoJS core components.
	  */
		var CryptoJS = CryptoJS || (function (Math, undefined) {
			/**
	   * CryptoJS namespace.
	   */
			var C = {};
	
			/**
	   * Library namespace.
	   */
			var C_lib = C.lib = {};
	
			/**
	   * Base object for prototypal inheritance.
	   */
			var Base = C_lib.Base = (function () {
				function F() {}
	
				return {
					/**
	     * Creates a new object that inherits from this object.
	     *
	     * @param {Object} overrides Properties to copy into the new object.
	     *
	     * @return {Object} The new object.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var MyType = CryptoJS.lib.Base.extend({
	     *         field: 'value',
	     *
	     *         method: function () {
	     *         }
	     *     });
	     */
					extend: function extend(overrides) {
						// Spawn
						F.prototype = this;
						var subtype = new F();
	
						// Augment
						if (overrides) {
							subtype.mixIn(overrides);
						}
	
						// Create default initializer
						if (!subtype.hasOwnProperty('init')) {
							subtype.init = function () {
								subtype.$super.init.apply(this, arguments);
							};
						}
	
						// Initializer's prototype is the subtype object
						subtype.init.prototype = subtype;
	
						// Reference supertype
						subtype.$super = this;
	
						return subtype;
					},
	
					/**
	     * Extends this object and runs the init method.
	     * Arguments to create() will be passed to init().
	     *
	     * @return {Object} The new object.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var instance = MyType.create();
	     */
					create: function create() {
						var instance = this.extend();
						instance.init.apply(instance, arguments);
	
						return instance;
					},
	
					/**
	     * Initializes a newly created object.
	     * Override this method to add some logic when your objects are created.
	     *
	     * @example
	     *
	     *     var MyType = CryptoJS.lib.Base.extend({
	     *         init: function () {
	     *             // ...
	     *         }
	     *     });
	     */
					init: function init() {},
	
					/**
	     * Copies properties into this object.
	     *
	     * @param {Object} properties The properties to mix in.
	     *
	     * @example
	     *
	     *     MyType.mixIn({
	     *         field: 'value'
	     *     });
	     */
					mixIn: function mixIn(properties) {
						for (var propertyName in properties) {
							if (properties.hasOwnProperty(propertyName)) {
								this[propertyName] = properties[propertyName];
							}
						}
	
						// IE won't copy toString using the loop above
						if (properties.hasOwnProperty('toString')) {
							this.toString = properties.toString;
						}
					},
	
					/**
	     * Creates a copy of this object.
	     *
	     * @return {Object} The clone.
	     *
	     * @example
	     *
	     *     var clone = instance.clone();
	     */
					clone: function clone() {
						return this.init.prototype.extend(this);
					}
				};
			})();
	
			/**
	   * An array of 32-bit words.
	   *
	   * @property {Array} words The array of 32-bit words.
	   * @property {number} sigBytes The number of significant bytes in this word array.
	   */
			var WordArray = C_lib.WordArray = Base.extend({
				/**
	    * Initializes a newly created word array.
	    *
	    * @param {Array} words (Optional) An array of 32-bit words.
	    * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.lib.WordArray.create();
	    *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	    *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	    */
				init: function init(words, sigBytes) {
					words = this.words = words || [];
	
					if (sigBytes != undefined) {
						this.sigBytes = sigBytes;
					} else {
						this.sigBytes = words.length * 4;
					}
				},
	
				/**
	    * Converts this word array to a string.
	    *
	    * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	    *
	    * @return {string} The stringified word array.
	    *
	    * @example
	    *
	    *     var string = wordArray + '';
	    *     var string = wordArray.toString();
	    *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	    */
				toString: function toString(encoder) {
					return (encoder || Hex).stringify(this);
				},
	
				/**
	    * Concatenates a word array to this word array.
	    *
	    * @param {WordArray} wordArray The word array to append.
	    *
	    * @return {WordArray} This word array.
	    *
	    * @example
	    *
	    *     wordArray1.concat(wordArray2);
	    */
				concat: function concat(wordArray) {
					// Shortcuts
					var thisWords = this.words;
					var thatWords = wordArray.words;
					var thisSigBytes = this.sigBytes;
					var thatSigBytes = wordArray.sigBytes;
	
					// Clamp excess bits
					this.clamp();
	
					// Concat
					if (thisSigBytes % 4) {
						// Copy one byte at a time
						for (var i = 0; i < thatSigBytes; i++) {
							var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
							thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
						}
					} else {
						// Copy one word at a time
						for (var i = 0; i < thatSigBytes; i += 4) {
							thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
						}
					}
					this.sigBytes += thatSigBytes;
	
					// Chainable
					return this;
				},
	
				/**
	    * Removes insignificant bits.
	    *
	    * @example
	    *
	    *     wordArray.clamp();
	    */
				clamp: function clamp() {
					// Shortcuts
					var words = this.words;
					var sigBytes = this.sigBytes;
	
					// Clamp
					words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
					words.length = Math.ceil(sigBytes / 4);
				},
	
				/**
	    * Creates a copy of this word array.
	    *
	    * @return {WordArray} The clone.
	    *
	    * @example
	    *
	    *     var clone = wordArray.clone();
	    */
				clone: function clone() {
					var clone = Base.clone.call(this);
					clone.words = this.words.slice(0);
	
					return clone;
				},
	
				/**
	    * Creates a word array filled with random bytes.
	    *
	    * @param {number} nBytes The number of random bytes to generate.
	    *
	    * @return {WordArray} The random word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.lib.WordArray.random(16);
	    */
				random: function random(nBytes) {
					var words = [];
	
					var r = function r(m_w) {
						var m_w = m_w;
						var m_z = 0x3ade68b1;
						var mask = 0xffffffff;
	
						return function () {
							m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;
							m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;
							var result = (m_z << 0x10) + m_w & mask;
							result /= 0x100000000;
							result += 0.5;
							return result * (Math.random() > .5 ? 1 : -1);
						};
					};
	
					for (var i = 0, rcache; i < nBytes; i += 4) {
						var _r = r((rcache || Math.random()) * 0x100000000);
	
						rcache = _r() * 0x3ade67b7;
						words.push(_r() * 0x100000000 | 0);
					}
	
					return new WordArray.init(words, nBytes);
				}
			});
	
			/**
	   * Encoder namespace.
	   */
			var C_enc = C.enc = {};
	
			/**
	   * Hex encoding strategy.
	   */
			var Hex = C_enc.Hex = {
				/**
	    * Converts a word array to a hex string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The hex string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					// Shortcuts
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
	
					// Convert
					var hexChars = [];
					for (var i = 0; i < sigBytes; i++) {
						var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						hexChars.push((bite >>> 4).toString(16));
						hexChars.push((bite & 0x0f).toString(16));
					}
	
					return hexChars.join('');
				},
	
				/**
	    * Converts a hex string to a word array.
	    *
	    * @param {string} hexStr The hex string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	    */
				parse: function parse(hexStr) {
					// Shortcut
					var hexStrLength = hexStr.length;
	
					// Convert
					var words = [];
					for (var i = 0; i < hexStrLength; i += 2) {
						words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
					}
	
					return new WordArray.init(words, hexStrLength / 2);
				}
			};
	
			/**
	   * Latin1 encoding strategy.
	   */
			var Latin1 = C_enc.Latin1 = {
				/**
	    * Converts a word array to a Latin1 string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The Latin1 string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					// Shortcuts
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
	
					// Convert
					var latin1Chars = [];
					for (var i = 0; i < sigBytes; i++) {
						var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						latin1Chars.push(String.fromCharCode(bite));
					}
	
					return latin1Chars.join('');
				},
	
				/**
	    * Converts a Latin1 string to a word array.
	    *
	    * @param {string} latin1Str The Latin1 string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	    */
				parse: function parse(latin1Str) {
					// Shortcut
					var latin1StrLength = latin1Str.length;
	
					// Convert
					var words = [];
					for (var i = 0; i < latin1StrLength; i++) {
						words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
					}
	
					return new WordArray.init(words, latin1StrLength);
				}
			};
	
			/**
	   * UTF-8 encoding strategy.
	   */
			var Utf8 = C_enc.Utf8 = {
				/**
	    * Converts a word array to a UTF-8 string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The UTF-8 string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					try {
						return decodeURIComponent(escape(Latin1.stringify(wordArray)));
					} catch (e) {
						throw new Error('Malformed UTF-8 data');
					}
				},
	
				/**
	    * Converts a UTF-8 string to a word array.
	    *
	    * @param {string} utf8Str The UTF-8 string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	    */
				parse: function parse(utf8Str) {
					return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
				}
			};
	
			/**
	   * Abstract buffered block algorithm template.
	   *
	   * The property blockSize must be implemented in a concrete subtype.
	   *
	   * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	   */
			var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
				/**
	    * Resets this block algorithm's data buffer to its initial state.
	    *
	    * @example
	    *
	    *     bufferedBlockAlgorithm.reset();
	    */
				reset: function reset() {
					// Initial values
					this._data = new WordArray.init();
					this._nDataBytes = 0;
				},
	
				/**
	    * Adds new data to this block algorithm's buffer.
	    *
	    * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	    *
	    * @example
	    *
	    *     bufferedBlockAlgorithm._append('data');
	    *     bufferedBlockAlgorithm._append(wordArray);
	    */
				_append: function _append(data) {
					// Convert string to WordArray, else assume WordArray already
					if (typeof data == 'string') {
						data = Utf8.parse(data);
					}
	
					// Append
					this._data.concat(data);
					this._nDataBytes += data.sigBytes;
				},
	
				/**
	    * Processes available data blocks.
	    *
	    * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	    *
	    * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	    *
	    * @return {WordArray} The processed data.
	    *
	    * @example
	    *
	    *     var processedData = bufferedBlockAlgorithm._process();
	    *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	    */
				_process: function _process(doFlush) {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
					var dataSigBytes = data.sigBytes;
					var blockSize = this.blockSize;
					var blockSizeBytes = blockSize * 4;
	
					// Count blocks ready
					var nBlocksReady = dataSigBytes / blockSizeBytes;
					if (doFlush) {
						// Round up to include partial blocks
						nBlocksReady = Math.ceil(nBlocksReady);
					} else {
						// Round down to include only full blocks,
						// less the number of blocks that must remain in the buffer
						nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
					}
	
					// Count words ready
					var nWordsReady = nBlocksReady * blockSize;
	
					// Count bytes ready
					var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);
	
					// Process blocks
					if (nWordsReady) {
						for (var offset = 0; offset < nWordsReady; offset += blockSize) {
							// Perform concrete-algorithm logic
							this._doProcessBlock(dataWords, offset);
						}
	
						// Remove processed words
						var processedWords = dataWords.splice(0, nWordsReady);
						data.sigBytes -= nBytesReady;
					}
	
					// Return processed words
					return new WordArray.init(processedWords, nBytesReady);
				},
	
				/**
	    * Creates a copy of this object.
	    *
	    * @return {Object} The clone.
	    *
	    * @example
	    *
	    *     var clone = bufferedBlockAlgorithm.clone();
	    */
				clone: function clone() {
					var clone = Base.clone.call(this);
					clone._data = this._data.clone();
	
					return clone;
				},
	
				_minBufferSize: 0
			});
	
			/**
	   * Abstract hasher template.
	   *
	   * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	   */
			var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
				/**
	    * Configuration options.
	    */
				cfg: Base.extend(),
	
				/**
	    * Initializes a newly created hasher.
	    *
	    * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	    *
	    * @example
	    *
	    *     var hasher = CryptoJS.algo.SHA256.create();
	    */
				init: function init(cfg) {
					// Apply config defaults
					this.cfg = this.cfg.extend(cfg);
	
					// Set initial values
					this.reset();
				},
	
				/**
	    * Resets this hasher to its initial state.
	    *
	    * @example
	    *
	    *     hasher.reset();
	    */
				reset: function reset() {
					// Reset data buffer
					BufferedBlockAlgorithm.reset.call(this);
	
					// Perform concrete-hasher logic
					this._doReset();
				},
	
				/**
	    * Updates this hasher with a message.
	    *
	    * @param {WordArray|string} messageUpdate The message to append.
	    *
	    * @return {Hasher} This hasher.
	    *
	    * @example
	    *
	    *     hasher.update('message');
	    *     hasher.update(wordArray);
	    */
				update: function update(messageUpdate) {
					// Append
					this._append(messageUpdate);
	
					// Update the hash
					this._process();
	
					// Chainable
					return this;
				},
	
				/**
	    * Finalizes the hash computation.
	    * Note that the finalize operation is effectively a destructive, read-once operation.
	    *
	    * @param {WordArray|string} messageUpdate (Optional) A final message update.
	    *
	    * @return {WordArray} The hash.
	    *
	    * @example
	    *
	    *     var hash = hasher.finalize();
	    *     var hash = hasher.finalize('message');
	    *     var hash = hasher.finalize(wordArray);
	    */
				finalize: function finalize(messageUpdate) {
					// Final message update
					if (messageUpdate) {
						this._append(messageUpdate);
					}
	
					// Perform concrete-hasher logic
					var hash = this._doFinalize();
	
					return hash;
				},
	
				blockSize: 512 / 32,
	
				/**
	    * Creates a shortcut function to a hasher's object interface.
	    *
	    * @param {Hasher} hasher The hasher to create a helper for.
	    *
	    * @return {Function} The shortcut function.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	    */
				_createHelper: function _createHelper(hasher) {
					return function (message, cfg) {
						return new hasher.init(cfg).finalize(message);
					};
				},
	
				/**
	    * Creates a shortcut function to the HMAC's object interface.
	    *
	    * @param {Hasher} hasher The hasher to use in this HMAC helper.
	    *
	    * @return {Function} The shortcut function.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	    */
				_createHmacHelper: function _createHmacHelper(hasher) {
					return function (message, key) {
						return new C_algo.HMAC.init(hasher, key).finalize(message);
					};
				}
			});
	
			/**
	   * Algorithm namespace.
	   */
			var C_algo = C.algo = {};
	
			return C;
		})(Math);
	
		return CryptoJS;
	});

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function (undefined) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var X32WordArray = C_lib.WordArray;
	
			/**
	   * x64 namespace.
	   */
			var C_x64 = C.x64 = {};
	
			/**
	   * A 64-bit word.
	   */
			var X64Word = C_x64.Word = Base.extend({
				/**
	    * Initializes a newly created 64-bit word.
	    *
	    * @param {number} high The high 32 bits.
	    * @param {number} low The low 32 bits.
	    *
	    * @example
	    *
	    *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
	    */
				init: function init(high, low) {
					this.high = high;
					this.low = low;
				}
	
				/**
	    * Bitwise NOTs this word.
	    *
	    * @return {X64Word} A new x64-Word object after negating.
	    *
	    * @example
	    *
	    *     var negated = x64Word.not();
	    */
				// not: function () {
				// var high = ~this.high;
				// var low = ~this.low;
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Bitwise ANDs this word with the passed word.
	    *
	    * @param {X64Word} word The x64-Word to AND with this word.
	    *
	    * @return {X64Word} A new x64-Word object after ANDing.
	    *
	    * @example
	    *
	    *     var anded = x64Word.and(anotherX64Word);
	    */
				// and: function (word) {
				// var high = this.high & word.high;
				// var low = this.low & word.low;
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Bitwise ORs this word with the passed word.
	    *
	    * @param {X64Word} word The x64-Word to OR with this word.
	    *
	    * @return {X64Word} A new x64-Word object after ORing.
	    *
	    * @example
	    *
	    *     var ored = x64Word.or(anotherX64Word);
	    */
				// or: function (word) {
				// var high = this.high | word.high;
				// var low = this.low | word.low;
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Bitwise XORs this word with the passed word.
	    *
	    * @param {X64Word} word The x64-Word to XOR with this word.
	    *
	    * @return {X64Word} A new x64-Word object after XORing.
	    *
	    * @example
	    *
	    *     var xored = x64Word.xor(anotherX64Word);
	    */
				// xor: function (word) {
				// var high = this.high ^ word.high;
				// var low = this.low ^ word.low;
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Shifts this word n bits to the left.
	    *
	    * @param {number} n The number of bits to shift.
	    *
	    * @return {X64Word} A new x64-Word object after shifting.
	    *
	    * @example
	    *
	    *     var shifted = x64Word.shiftL(25);
	    */
				// shiftL: function (n) {
				// if (n < 32) {
				// var high = (this.high << n) | (this.low >>> (32 - n));
				// var low = this.low << n;
				// } else {
				// var high = this.low << (n - 32);
				// var low = 0;
				// }
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Shifts this word n bits to the right.
	    *
	    * @param {number} n The number of bits to shift.
	    *
	    * @return {X64Word} A new x64-Word object after shifting.
	    *
	    * @example
	    *
	    *     var shifted = x64Word.shiftR(7);
	    */
				// shiftR: function (n) {
				// if (n < 32) {
				// var low = (this.low >>> n) | (this.high << (32 - n));
				// var high = this.high >>> n;
				// } else {
				// var low = this.high >>> (n - 32);
				// var high = 0;
				// }
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Rotates this word n bits to the left.
	    *
	    * @param {number} n The number of bits to rotate.
	    *
	    * @return {X64Word} A new x64-Word object after rotating.
	    *
	    * @example
	    *
	    *     var rotated = x64Word.rotL(25);
	    */
				// rotL: function (n) {
				// return this.shiftL(n).or(this.shiftR(64 - n));
				// },
	
				/**
	    * Rotates this word n bits to the right.
	    *
	    * @param {number} n The number of bits to rotate.
	    *
	    * @return {X64Word} A new x64-Word object after rotating.
	    *
	    * @example
	    *
	    *     var rotated = x64Word.rotR(7);
	    */
				// rotR: function (n) {
				// return this.shiftR(n).or(this.shiftL(64 - n));
				// },
	
				/**
	    * Adds this word with the passed word.
	    *
	    * @param {X64Word} word The x64-Word to add with this word.
	    *
	    * @return {X64Word} A new x64-Word object after adding.
	    *
	    * @example
	    *
	    *     var added = x64Word.add(anotherX64Word);
	    */
				// add: function (word) {
				// var low = (this.low + word.low) | 0;
				// var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
				// var high = (this.high + word.high + carry) | 0;
	
				// return X64Word.create(high, low);
				// }
			});
	
			/**
	   * An array of 64-bit words.
	   *
	   * @property {Array} words The array of CryptoJS.x64.Word objects.
	   * @property {number} sigBytes The number of significant bytes in this word array.
	   */
			var X64WordArray = C_x64.WordArray = Base.extend({
				/**
	    * Initializes a newly created word array.
	    *
	    * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
	    * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.x64.WordArray.create();
	    *
	    *     var wordArray = CryptoJS.x64.WordArray.create([
	    *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	    *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	    *     ]);
	    *
	    *     var wordArray = CryptoJS.x64.WordArray.create([
	    *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	    *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	    *     ], 10);
	    */
				init: function init(words, sigBytes) {
					words = this.words = words || [];
	
					if (sigBytes != undefined) {
						this.sigBytes = sigBytes;
					} else {
						this.sigBytes = words.length * 8;
					}
				},
	
				/**
	    * Converts this 64-bit word array to a 32-bit word array.
	    *
	    * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
	    *
	    * @example
	    *
	    *     var x32WordArray = x64WordArray.toX32();
	    */
				toX32: function toX32() {
					// Shortcuts
					var x64Words = this.words;
					var x64WordsLength = x64Words.length;
	
					// Convert
					var x32Words = [];
					for (var i = 0; i < x64WordsLength; i++) {
						var x64Word = x64Words[i];
						x32Words.push(x64Word.high);
						x32Words.push(x64Word.low);
					}
	
					return X32WordArray.create(x32Words, this.sigBytes);
				},
	
				/**
	    * Creates a copy of this word array.
	    *
	    * @return {X64WordArray} The clone.
	    *
	    * @example
	    *
	    *     var clone = x64WordArray.clone();
	    */
				clone: function clone() {
					var clone = Base.clone.call(this);
	
					// Clone "words" array
					var words = clone.words = this.words.slice(0);
	
					// Clone each X64Word object
					var wordsLength = words.length;
					for (var i = 0; i < wordsLength; i++) {
						words[i] = words[i].clone();
					}
	
					return clone;
				}
			});
		})();
	
		return CryptoJS;
	});

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Check if typed arrays are supported
			if (typeof ArrayBuffer != 'function') {
				return;
			}
	
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
	
			// Reference original init
			var superInit = WordArray.init;
	
			// Augment WordArray.init to handle typed arrays
			var subInit = WordArray.init = function (typedArray) {
				// Convert buffers to uint8
				if (typedArray instanceof ArrayBuffer) {
					typedArray = new Uint8Array(typedArray);
				}
	
				// Convert other array views to uint8
				if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
					typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
				}
	
				// Handle Uint8Array
				if (typedArray instanceof Uint8Array) {
					// Shortcut
					var typedArrayByteLength = typedArray.byteLength;
	
					// Extract bytes
					var words = [];
					for (var i = 0; i < typedArrayByteLength; i++) {
						words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
					}
	
					// Initialize this word array
					superInit.call(this, words, typedArrayByteLength);
				} else {
					// Else call normal init
					superInit.apply(this, arguments);
				}
			};
	
			subInit.prototype = WordArray;
		})();
	
		return CryptoJS.lib.WordArray;
	});

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var C_enc = C.enc;
	
			/**
	   * UTF-16 BE encoding strategy.
	   */
			var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
				/**
	    * Converts a word array to a UTF-16 BE string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The UTF-16 BE string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					// Shortcuts
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
	
					// Convert
					var utf16Chars = [];
					for (var i = 0; i < sigBytes; i += 2) {
						var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;
						utf16Chars.push(String.fromCharCode(codePoint));
					}
	
					return utf16Chars.join('');
				},
	
				/**
	    * Converts a UTF-16 BE string to a word array.
	    *
	    * @param {string} utf16Str The UTF-16 BE string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
	    */
				parse: function parse(utf16Str) {
					// Shortcut
					var utf16StrLength = utf16Str.length;
	
					// Convert
					var words = [];
					for (var i = 0; i < utf16StrLength; i++) {
						words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
					}
	
					return WordArray.create(words, utf16StrLength * 2);
				}
			};
	
			/**
	   * UTF-16 LE encoding strategy.
	   */
			C_enc.Utf16LE = {
				/**
	    * Converts a word array to a UTF-16 LE string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The UTF-16 LE string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					// Shortcuts
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
	
					// Convert
					var utf16Chars = [];
					for (var i = 0; i < sigBytes; i += 2) {
						var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);
						utf16Chars.push(String.fromCharCode(codePoint));
					}
	
					return utf16Chars.join('');
				},
	
				/**
	    * Converts a UTF-16 LE string to a word array.
	    *
	    * @param {string} utf16Str The UTF-16 LE string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
	    */
				parse: function parse(utf16Str) {
					// Shortcut
					var utf16StrLength = utf16Str.length;
	
					// Convert
					var words = [];
					for (var i = 0; i < utf16StrLength; i++) {
						words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
					}
	
					return WordArray.create(words, utf16StrLength * 2);
				}
			};
	
			function swapEndian(word) {
				return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;
			}
		})();
	
		return CryptoJS.enc.Utf16;
	});

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var C_enc = C.enc;
	
			/**
	   * Base64 encoding strategy.
	   */
			var Base64 = C_enc.Base64 = {
				/**
	    * Converts a word array to a Base64 string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The Base64 string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					// Shortcuts
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
					var map = this._map;
	
					// Clamp excess bits
					wordArray.clamp();
	
					// Convert
					var base64Chars = [];
					for (var i = 0; i < sigBytes; i += 3) {
						var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
						var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
	
						var triplet = byte1 << 16 | byte2 << 8 | byte3;
	
						for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
							base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
						}
					}
	
					// Add padding
					var paddingChar = map.charAt(64);
					if (paddingChar) {
						while (base64Chars.length % 4) {
							base64Chars.push(paddingChar);
						}
					}
	
					return base64Chars.join('');
				},
	
				/**
	    * Converts a Base64 string to a word array.
	    *
	    * @param {string} base64Str The Base64 string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	    */
				parse: function parse(base64Str) {
					// Shortcuts
					var base64StrLength = base64Str.length;
					var map = this._map;
	
					// Ignore padding
					var paddingChar = map.charAt(64);
					if (paddingChar) {
						var paddingIndex = base64Str.indexOf(paddingChar);
						if (paddingIndex != -1) {
							base64StrLength = paddingIndex;
						}
					}
	
					// Convert
					var words = [];
					var nBytes = 0;
					for (var i = 0; i < base64StrLength; i++) {
						if (i % 4) {
							var bits1 = map.indexOf(base64Str.charAt(i - 1)) << i % 4 * 2;
							var bits2 = map.indexOf(base64Str.charAt(i)) >>> 6 - i % 4 * 2;
							words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
							nBytes++;
						}
					}
	
					return WordArray.create(words, nBytes);
				},
	
				_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
			};
		})();
	
		return CryptoJS.enc.Base64;
	});

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function (Math) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_algo = C.algo;
	
			// Constants table
			var T = [];
	
			// Compute constants
			(function () {
				for (var i = 0; i < 64; i++) {
					T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
				}
			})();
	
			/**
	   * MD5 hash algorithm.
	   */
			var MD5 = C_algo.MD5 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Swap endian
					for (var i = 0; i < 16; i++) {
						// Shortcuts
						var offset_i = offset + i;
						var M_offset_i = M[offset_i];
	
						M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
					}
	
					// Shortcuts
					var H = this._hash.words;
	
					var M_offset_0 = M[offset + 0];
					var M_offset_1 = M[offset + 1];
					var M_offset_2 = M[offset + 2];
					var M_offset_3 = M[offset + 3];
					var M_offset_4 = M[offset + 4];
					var M_offset_5 = M[offset + 5];
					var M_offset_6 = M[offset + 6];
					var M_offset_7 = M[offset + 7];
					var M_offset_8 = M[offset + 8];
					var M_offset_9 = M[offset + 9];
					var M_offset_10 = M[offset + 10];
					var M_offset_11 = M[offset + 11];
					var M_offset_12 = M[offset + 12];
					var M_offset_13 = M[offset + 13];
					var M_offset_14 = M[offset + 14];
					var M_offset_15 = M[offset + 15];
	
					// Working varialbes
					var a = H[0];
					var b = H[1];
					var c = H[2];
					var d = H[3];
	
					// Computation
					a = FF(a, b, c, d, M_offset_0, 7, T[0]);
					d = FF(d, a, b, c, M_offset_1, 12, T[1]);
					c = FF(c, d, a, b, M_offset_2, 17, T[2]);
					b = FF(b, c, d, a, M_offset_3, 22, T[3]);
					a = FF(a, b, c, d, M_offset_4, 7, T[4]);
					d = FF(d, a, b, c, M_offset_5, 12, T[5]);
					c = FF(c, d, a, b, M_offset_6, 17, T[6]);
					b = FF(b, c, d, a, M_offset_7, 22, T[7]);
					a = FF(a, b, c, d, M_offset_8, 7, T[8]);
					d = FF(d, a, b, c, M_offset_9, 12, T[9]);
					c = FF(c, d, a, b, M_offset_10, 17, T[10]);
					b = FF(b, c, d, a, M_offset_11, 22, T[11]);
					a = FF(a, b, c, d, M_offset_12, 7, T[12]);
					d = FF(d, a, b, c, M_offset_13, 12, T[13]);
					c = FF(c, d, a, b, M_offset_14, 17, T[14]);
					b = FF(b, c, d, a, M_offset_15, 22, T[15]);
	
					a = GG(a, b, c, d, M_offset_1, 5, T[16]);
					d = GG(d, a, b, c, M_offset_6, 9, T[17]);
					c = GG(c, d, a, b, M_offset_11, 14, T[18]);
					b = GG(b, c, d, a, M_offset_0, 20, T[19]);
					a = GG(a, b, c, d, M_offset_5, 5, T[20]);
					d = GG(d, a, b, c, M_offset_10, 9, T[21]);
					c = GG(c, d, a, b, M_offset_15, 14, T[22]);
					b = GG(b, c, d, a, M_offset_4, 20, T[23]);
					a = GG(a, b, c, d, M_offset_9, 5, T[24]);
					d = GG(d, a, b, c, M_offset_14, 9, T[25]);
					c = GG(c, d, a, b, M_offset_3, 14, T[26]);
					b = GG(b, c, d, a, M_offset_8, 20, T[27]);
					a = GG(a, b, c, d, M_offset_13, 5, T[28]);
					d = GG(d, a, b, c, M_offset_2, 9, T[29]);
					c = GG(c, d, a, b, M_offset_7, 14, T[30]);
					b = GG(b, c, d, a, M_offset_12, 20, T[31]);
	
					a = HH(a, b, c, d, M_offset_5, 4, T[32]);
					d = HH(d, a, b, c, M_offset_8, 11, T[33]);
					c = HH(c, d, a, b, M_offset_11, 16, T[34]);
					b = HH(b, c, d, a, M_offset_14, 23, T[35]);
					a = HH(a, b, c, d, M_offset_1, 4, T[36]);
					d = HH(d, a, b, c, M_offset_4, 11, T[37]);
					c = HH(c, d, a, b, M_offset_7, 16, T[38]);
					b = HH(b, c, d, a, M_offset_10, 23, T[39]);
					a = HH(a, b, c, d, M_offset_13, 4, T[40]);
					d = HH(d, a, b, c, M_offset_0, 11, T[41]);
					c = HH(c, d, a, b, M_offset_3, 16, T[42]);
					b = HH(b, c, d, a, M_offset_6, 23, T[43]);
					a = HH(a, b, c, d, M_offset_9, 4, T[44]);
					d = HH(d, a, b, c, M_offset_12, 11, T[45]);
					c = HH(c, d, a, b, M_offset_15, 16, T[46]);
					b = HH(b, c, d, a, M_offset_2, 23, T[47]);
	
					a = II(a, b, c, d, M_offset_0, 6, T[48]);
					d = II(d, a, b, c, M_offset_7, 10, T[49]);
					c = II(c, d, a, b, M_offset_14, 15, T[50]);
					b = II(b, c, d, a, M_offset_5, 21, T[51]);
					a = II(a, b, c, d, M_offset_12, 6, T[52]);
					d = II(d, a, b, c, M_offset_3, 10, T[53]);
					c = II(c, d, a, b, M_offset_10, 15, T[54]);
					b = II(b, c, d, a, M_offset_1, 21, T[55]);
					a = II(a, b, c, d, M_offset_8, 6, T[56]);
					d = II(d, a, b, c, M_offset_15, 10, T[57]);
					c = II(c, d, a, b, M_offset_6, 15, T[58]);
					b = II(b, c, d, a, M_offset_13, 21, T[59]);
					a = II(a, b, c, d, M_offset_4, 6, T[60]);
					d = II(d, a, b, c, M_offset_11, 10, T[61]);
					c = II(c, d, a, b, M_offset_2, 15, T[62]);
					b = II(b, c, d, a, M_offset_9, 21, T[63]);
	
					// Intermediate hash value
					H[0] = H[0] + a | 0;
					H[1] = H[1] + b | 0;
					H[2] = H[2] + c | 0;
					H[3] = H[3] + d | 0;
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
	
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
	
					var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
					var nBitsTotalL = nBitsTotal;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
	
					data.sigBytes = (dataWords.length + 1) * 4;
	
					// Hash final blocks
					this._process();
	
					// Shortcuts
					var hash = this._hash;
					var H = hash.words;
	
					// Swap endian
					for (var i = 0; i < 4; i++) {
						// Shortcut
						var H_i = H[i];
	
						H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
					}
	
					// Return final computed hash
					return hash;
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
	
					return clone;
				}
			});
	
			function FF(a, b, c, d, x, s, t) {
				var n = a + (b & c | ~b & d) + x + t;
				return (n << s | n >>> 32 - s) + b;
			}
	
			function GG(a, b, c, d, x, s, t) {
				var n = a + (b & d | c & ~d) + x + t;
				return (n << s | n >>> 32 - s) + b;
			}
	
			function HH(a, b, c, d, x, s, t) {
				var n = a + (b ^ c ^ d) + x + t;
				return (n << s | n >>> 32 - s) + b;
			}
	
			function II(a, b, c, d, x, s, t) {
				var n = a + (c ^ (b | ~d)) + x + t;
				return (n << s | n >>> 32 - s) + b;
			}
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.MD5('message');
	   *     var hash = CryptoJS.MD5(wordArray);
	   */
			C.MD5 = Hasher._createHelper(MD5);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacMD5(message, key);
	   */
			C.HmacMD5 = Hasher._createHmacHelper(MD5);
		})(Math);
	
		return CryptoJS.MD5;
	});

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_algo = C.algo;
	
			// Reusable object
			var W = [];
	
			/**
	   * SHA-1 hash algorithm.
	   */
			var SHA1 = C_algo.SHA1 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcut
					var H = this._hash.words;
	
					// Working variables
					var a = H[0];
					var b = H[1];
					var c = H[2];
					var d = H[3];
					var e = H[4];
	
					// Computation
					for (var i = 0; i < 80; i++) {
						if (i < 16) {
							W[i] = M[offset + i] | 0;
						} else {
							var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
							W[i] = n << 1 | n >>> 31;
						}
	
						var t = (a << 5 | a >>> 27) + e + W[i];
						if (i < 20) {
							t += (b & c | ~b & d) + 0x5a827999;
						} else if (i < 40) {
							t += (b ^ c ^ d) + 0x6ed9eba1;
						} else if (i < 60) {
							t += (b & c | b & d | c & d) - 0x70e44324;
						} else /* if (i < 80) */{
								t += (b ^ c ^ d) - 0x359d3e2a;
							}
	
						e = d;
						d = c;
						c = b << 30 | b >>> 2;
						b = a;
						a = t;
					}
	
					// Intermediate hash value
					H[0] = H[0] + a | 0;
					H[1] = H[1] + b | 0;
					H[2] = H[2] + c | 0;
					H[3] = H[3] + d | 0;
					H[4] = H[4] + e | 0;
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
	
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
					data.sigBytes = dataWords.length * 4;
	
					// Hash final blocks
					this._process();
	
					// Return final computed hash
					return this._hash;
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
	
					return clone;
				}
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA1('message');
	   *     var hash = CryptoJS.SHA1(wordArray);
	   */
			C.SHA1 = Hasher._createHelper(SHA1);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA1(message, key);
	   */
			C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
		})();
	
		return CryptoJS.SHA1;
	});

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function (Math) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_algo = C.algo;
	
			// Initialization and round constants tables
			var H = [];
			var K = [];
	
			// Compute constants
			(function () {
				function isPrime(n) {
					var sqrtN = Math.sqrt(n);
					for (var factor = 2; factor <= sqrtN; factor++) {
						if (!(n % factor)) {
							return false;
						}
					}
	
					return true;
				}
	
				function getFractionalBits(n) {
					return (n - (n | 0)) * 0x100000000 | 0;
				}
	
				var n = 2;
				var nPrime = 0;
				while (nPrime < 64) {
					if (isPrime(n)) {
						if (nPrime < 8) {
							H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
						}
						K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
	
						nPrime++;
					}
	
					n++;
				}
			})();
	
			// Reusable object
			var W = [];
	
			/**
	   * SHA-256 hash algorithm.
	   */
			var SHA256 = C_algo.SHA256 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = new WordArray.init(H.slice(0));
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcut
					var H = this._hash.words;
	
					// Working variables
					var a = H[0];
					var b = H[1];
					var c = H[2];
					var d = H[3];
					var e = H[4];
					var f = H[5];
					var g = H[6];
					var h = H[7];
	
					// Computation
					for (var i = 0; i < 64; i++) {
						if (i < 16) {
							W[i] = M[offset + i] | 0;
						} else {
							var gamma0x = W[i - 15];
							var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
	
							var gamma1x = W[i - 2];
							var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
	
							W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
						}
	
						var ch = e & f ^ ~e & g;
						var maj = a & b ^ a & c ^ b & c;
	
						var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
						var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
	
						var t1 = h + sigma1 + ch + K[i] + W[i];
						var t2 = sigma0 + maj;
	
						h = g;
						g = f;
						f = e;
						e = d + t1 | 0;
						d = c;
						c = b;
						b = a;
						a = t1 + t2 | 0;
					}
	
					// Intermediate hash value
					H[0] = H[0] + a | 0;
					H[1] = H[1] + b | 0;
					H[2] = H[2] + c | 0;
					H[3] = H[3] + d | 0;
					H[4] = H[4] + e | 0;
					H[5] = H[5] + f | 0;
					H[6] = H[6] + g | 0;
					H[7] = H[7] + h | 0;
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
	
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
					data.sigBytes = dataWords.length * 4;
	
					// Hash final blocks
					this._process();
	
					// Return final computed hash
					return this._hash;
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
	
					return clone;
				}
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA256('message');
	   *     var hash = CryptoJS.SHA256(wordArray);
	   */
			C.SHA256 = Hasher._createHelper(SHA256);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA256(message, key);
	   */
			C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
		})(Math);
	
		return CryptoJS.SHA256;
	});

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(54));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha256"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var C_algo = C.algo;
			var SHA256 = C_algo.SHA256;
	
			/**
	   * SHA-224 hash algorithm.
	   */
			var SHA224 = C_algo.SHA224 = SHA256.extend({
				_doReset: function _doReset() {
					this._hash = new WordArray.init([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);
				},
	
				_doFinalize: function _doFinalize() {
					var hash = SHA256._doFinalize.call(this);
	
					hash.sigBytes -= 4;
	
					return hash;
				}
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA224('message');
	   *     var hash = CryptoJS.SHA224(wordArray);
	   */
			C.SHA224 = SHA256._createHelper(SHA224);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA224(message, key);
	   */
			C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
		})();
	
		return CryptoJS.SHA224;
	});

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(48));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Hasher = C_lib.Hasher;
			var C_x64 = C.x64;
			var X64Word = C_x64.Word;
			var X64WordArray = C_x64.WordArray;
			var C_algo = C.algo;
	
			function X64Word_create() {
				return X64Word.create.apply(X64Word, arguments);
			}
	
			// Constants
			var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];
	
			// Reusable objects
			var W = [];
			(function () {
				for (var i = 0; i < 80; i++) {
					W[i] = X64Word_create();
				}
			})();
	
			/**
	   * SHA-512 hash algorithm.
	   */
			var SHA512 = C_algo.SHA512 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcuts
					var H = this._hash.words;
	
					var H0 = H[0];
					var H1 = H[1];
					var H2 = H[2];
					var H3 = H[3];
					var H4 = H[4];
					var H5 = H[5];
					var H6 = H[6];
					var H7 = H[7];
	
					var H0h = H0.high;
					var H0l = H0.low;
					var H1h = H1.high;
					var H1l = H1.low;
					var H2h = H2.high;
					var H2l = H2.low;
					var H3h = H3.high;
					var H3l = H3.low;
					var H4h = H4.high;
					var H4l = H4.low;
					var H5h = H5.high;
					var H5l = H5.low;
					var H6h = H6.high;
					var H6l = H6.low;
					var H7h = H7.high;
					var H7l = H7.low;
	
					// Working variables
					var ah = H0h;
					var al = H0l;
					var bh = H1h;
					var bl = H1l;
					var ch = H2h;
					var cl = H2l;
					var dh = H3h;
					var dl = H3l;
					var eh = H4h;
					var el = H4l;
					var fh = H5h;
					var fl = H5l;
					var gh = H6h;
					var gl = H6l;
					var hh = H7h;
					var hl = H7l;
	
					// Rounds
					for (var i = 0; i < 80; i++) {
						// Shortcut
						var Wi = W[i];
	
						// Extend message
						if (i < 16) {
							var Wih = Wi.high = M[offset + i * 2] | 0;
							var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
						} else {
							// Gamma0
							var gamma0x = W[i - 15];
							var gamma0xh = gamma0x.high;
							var gamma0xl = gamma0x.low;
							var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
							var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
	
							// Gamma1
							var gamma1x = W[i - 2];
							var gamma1xh = gamma1x.high;
							var gamma1xl = gamma1x.low;
							var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
							var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
	
							// W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
							var Wi7 = W[i - 7];
							var Wi7h = Wi7.high;
							var Wi7l = Wi7.low;
	
							var Wi16 = W[i - 16];
							var Wi16h = Wi16.high;
							var Wi16l = Wi16.low;
	
							var Wil = gamma0l + Wi7l;
							var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
							var Wil = Wil + gamma1l;
							var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
							var Wil = Wil + Wi16l;
							var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
	
							Wi.high = Wih;
							Wi.low = Wil;
						}
	
						var chh = eh & fh ^ ~eh & gh;
						var chl = el & fl ^ ~el & gl;
						var majh = ah & bh ^ ah & ch ^ bh & ch;
						var majl = al & bl ^ al & cl ^ bl & cl;
	
						var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
						var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
						var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
						var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
	
						// t1 = h + sigma1 + ch + K[i] + W[i]
						var Ki = K[i];
						var Kih = Ki.high;
						var Kil = Ki.low;
	
						var t1l = hl + sigma1l;
						var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
						var t1l = t1l + chl;
						var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
						var t1l = t1l + Kil;
						var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
						var t1l = t1l + Wil;
						var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
	
						// t2 = sigma0 + maj
						var t2l = sigma0l + majl;
						var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
	
						// Update working variables
						hh = gh;
						hl = gl;
						gh = fh;
						gl = fl;
						fh = eh;
						fl = el;
						el = dl + t1l | 0;
						eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
						dh = ch;
						dl = cl;
						ch = bh;
						cl = bl;
						bh = ah;
						bl = al;
						al = t1l + t2l | 0;
						ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
					}
	
					// Intermediate hash value
					H0l = H0.low = H0l + al;
					H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
					H1l = H1.low = H1l + bl;
					H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
					H2l = H2.low = H2l + cl;
					H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
					H3l = H3.low = H3l + dl;
					H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
					H4l = H4.low = H4l + el;
					H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
					H5l = H5.low = H5l + fl;
					H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
					H6l = H6.low = H6l + gl;
					H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
					H7l = H7.low = H7l + hl;
					H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
	
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
					dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
					dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
					data.sigBytes = dataWords.length * 4;
	
					// Hash final blocks
					this._process();
	
					// Convert hash to 32-bit word array before returning
					var hash = this._hash.toX32();
	
					// Return final computed hash
					return hash;
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
	
					return clone;
				},
	
				blockSize: 1024 / 32
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA512('message');
	   *     var hash = CryptoJS.SHA512(wordArray);
	   */
			C.SHA512 = Hasher._createHelper(SHA512);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA512(message, key);
	   */
			C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
		})();
	
		return CryptoJS.SHA512;
	});

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(48), __webpack_require__(56));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core", "./sha512"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_x64 = C.x64;
			var X64Word = C_x64.Word;
			var X64WordArray = C_x64.WordArray;
			var C_algo = C.algo;
			var SHA512 = C_algo.SHA512;
	
			/**
	   * SHA-384 hash algorithm.
	   */
			var SHA384 = C_algo.SHA384 = SHA512.extend({
				_doReset: function _doReset() {
					this._hash = new X64WordArray.init([new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507), new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939), new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511), new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);
				},
	
				_doFinalize: function _doFinalize() {
					var hash = SHA512._doFinalize.call(this);
	
					hash.sigBytes -= 16;
	
					return hash;
				}
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA384('message');
	   *     var hash = CryptoJS.SHA384(wordArray);
	   */
			C.SHA384 = SHA512._createHelper(SHA384);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA384(message, key);
	   */
			C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
		})();
	
		return CryptoJS.SHA384;
	});

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(48));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function (Math) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_x64 = C.x64;
			var X64Word = C_x64.Word;
			var C_algo = C.algo;
	
			// Constants tables
			var RHO_OFFSETS = [];
			var PI_INDEXES = [];
			var ROUND_CONSTANTS = [];
	
			// Compute Constants
			(function () {
				// Compute rho offset constants
				var x = 1,
				    y = 0;
				for (var t = 0; t < 24; t++) {
					RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
	
					var newX = y % 5;
					var newY = (2 * x + 3 * y) % 5;
					x = newX;
					y = newY;
				}
	
				// Compute pi index constants
				for (var x = 0; x < 5; x++) {
					for (var y = 0; y < 5; y++) {
						PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
					}
				}
	
				// Compute round constants
				var LFSR = 0x01;
				for (var i = 0; i < 24; i++) {
					var roundConstantMsw = 0;
					var roundConstantLsw = 0;
	
					for (var j = 0; j < 7; j++) {
						if (LFSR & 0x01) {
							var bitPosition = (1 << j) - 1;
							if (bitPosition < 32) {
								roundConstantLsw ^= 1 << bitPosition;
							} else /* if (bitPosition >= 32) */{
									roundConstantMsw ^= 1 << bitPosition - 32;
								}
						}
	
						// Compute next LFSR
						if (LFSR & 0x80) {
							// Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
							LFSR = LFSR << 1 ^ 0x71;
						} else {
							LFSR <<= 1;
						}
					}
	
					ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
				}
			})();
	
			// Reusable objects for temporary values
			var T = [];
			(function () {
				for (var i = 0; i < 25; i++) {
					T[i] = X64Word.create();
				}
			})();
	
			/**
	   * SHA-3 hash algorithm.
	   */
			var SHA3 = C_algo.SHA3 = Hasher.extend({
				/**
	    * Configuration options.
	    *
	    * @property {number} outputLength
	    *   The desired number of bits in the output hash.
	    *   Only values permitted are: 224, 256, 384, 512.
	    *   Default: 512
	    */
				cfg: Hasher.cfg.extend({
					outputLength: 512
				}),
	
				_doReset: function _doReset() {
					var state = this._state = [];
					for (var i = 0; i < 25; i++) {
						state[i] = new X64Word.init();
					}
	
					this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcuts
					var state = this._state;
					var nBlockSizeLanes = this.blockSize / 2;
	
					// Absorb
					for (var i = 0; i < nBlockSizeLanes; i++) {
						// Shortcuts
						var M2i = M[offset + 2 * i];
						var M2i1 = M[offset + 2 * i + 1];
	
						// Swap endian
						M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;
						M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;
	
						// Absorb message into state
						var lane = state[i];
						lane.high ^= M2i1;
						lane.low ^= M2i;
					}
	
					// Rounds
					for (var round = 0; round < 24; round++) {
						// Theta
						for (var x = 0; x < 5; x++) {
							// Mix column lanes
							var tMsw = 0,
							    tLsw = 0;
							for (var y = 0; y < 5; y++) {
								var lane = state[x + 5 * y];
								tMsw ^= lane.high;
								tLsw ^= lane.low;
							}
	
							// Temporary values
							var Tx = T[x];
							Tx.high = tMsw;
							Tx.low = tLsw;
						}
						for (var x = 0; x < 5; x++) {
							// Shortcuts
							var Tx4 = T[(x + 4) % 5];
							var Tx1 = T[(x + 1) % 5];
							var Tx1Msw = Tx1.high;
							var Tx1Lsw = Tx1.low;
	
							// Mix surrounding columns
							var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
							var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
							for (var y = 0; y < 5; y++) {
								var lane = state[x + 5 * y];
								lane.high ^= tMsw;
								lane.low ^= tLsw;
							}
						}
	
						// Rho Pi
						for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
							// Shortcuts
							var lane = state[laneIndex];
							var laneMsw = lane.high;
							var laneLsw = lane.low;
							var rhoOffset = RHO_OFFSETS[laneIndex];
	
							// Rotate lanes
							if (rhoOffset < 32) {
								var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
								var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
							} else /* if (rhoOffset >= 32) */{
									var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
									var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
								}
	
							// Transpose lanes
							var TPiLane = T[PI_INDEXES[laneIndex]];
							TPiLane.high = tMsw;
							TPiLane.low = tLsw;
						}
	
						// Rho pi at x = y = 0
						var T0 = T[0];
						var state0 = state[0];
						T0.high = state0.high;
						T0.low = state0.low;
	
						// Chi
						for (var x = 0; x < 5; x++) {
							for (var y = 0; y < 5; y++) {
								// Shortcuts
								var laneIndex = x + 5 * y;
								var lane = state[laneIndex];
								var TLane = T[laneIndex];
								var Tx1Lane = T[(x + 1) % 5 + 5 * y];
								var Tx2Lane = T[(x + 2) % 5 + 5 * y];
	
								// Mix rows
								lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
								lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
							}
						}
	
						// Iota
						var lane = state[0];
						var roundConstant = ROUND_CONSTANTS[round];
						lane.high ^= roundConstant.high;
						lane.low ^= roundConstant.low;;
					}
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
					var blockSizeBits = this.blockSize * 32;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;
					dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;
					data.sigBytes = dataWords.length * 4;
	
					// Hash final blocks
					this._process();
	
					// Shortcuts
					var state = this._state;
					var outputLengthBytes = this.cfg.outputLength / 8;
					var outputLengthLanes = outputLengthBytes / 8;
	
					// Squeeze
					var hashWords = [];
					for (var i = 0; i < outputLengthLanes; i++) {
						// Shortcuts
						var lane = state[i];
						var laneMsw = lane.high;
						var laneLsw = lane.low;
	
						// Swap endian
						laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;
						laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;
	
						// Squeeze state to retrieve hash
						hashWords.push(laneLsw);
						hashWords.push(laneMsw);
					}
	
					// Return final computed hash
					return new WordArray.init(hashWords, outputLengthBytes);
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
	
					var state = clone._state = this._state.slice(0);
					for (var i = 0; i < 25; i++) {
						state[i] = state[i].clone();
					}
	
					return clone;
				}
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA3('message');
	   *     var hash = CryptoJS.SHA3(wordArray);
	   */
			C.SHA3 = Hasher._createHelper(SHA3);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA3(message, key);
	   */
			C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
		})(Math);
	
		return CryptoJS.SHA3;
	});

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/** @preserve
	 (c) 2012 by Cédric Mesnil. All rights reserved.
	 	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
	 	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	     - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
		(function (Math) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_algo = C.algo;
	
			// Constants table
			var _zl = WordArray.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);
			var _zr = WordArray.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);
			var _sl = WordArray.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);
			var _sr = WordArray.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);
	
			var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
			var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);
	
			/**
	   * RIPEMD160 hash algorithm.
	   */
			var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
	
					// Swap endian
					for (var i = 0; i < 16; i++) {
						// Shortcuts
						var offset_i = offset + i;
						var M_offset_i = M[offset_i];
	
						// Swap
						M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
					}
					// Shortcut
					var H = this._hash.words;
					var hl = _hl.words;
					var hr = _hr.words;
					var zl = _zl.words;
					var zr = _zr.words;
					var sl = _sl.words;
					var sr = _sr.words;
	
					// Working variables
					var al, bl, cl, dl, el;
					var ar, br, cr, dr, er;
	
					ar = al = H[0];
					br = bl = H[1];
					cr = cl = H[2];
					dr = dl = H[3];
					er = el = H[4];
					// Computation
					var t;
					for (var i = 0; i < 80; i += 1) {
						t = al + M[offset + zl[i]] | 0;
						if (i < 16) {
							t += f1(bl, cl, dl) + hl[0];
						} else if (i < 32) {
							t += f2(bl, cl, dl) + hl[1];
						} else if (i < 48) {
							t += f3(bl, cl, dl) + hl[2];
						} else if (i < 64) {
							t += f4(bl, cl, dl) + hl[3];
						} else {
							// if (i<80) {
							t += f5(bl, cl, dl) + hl[4];
						}
						t = t | 0;
						t = rotl(t, sl[i]);
						t = t + el | 0;
						al = el;
						el = dl;
						dl = rotl(cl, 10);
						cl = bl;
						bl = t;
	
						t = ar + M[offset + zr[i]] | 0;
						if (i < 16) {
							t += f5(br, cr, dr) + hr[0];
						} else if (i < 32) {
							t += f4(br, cr, dr) + hr[1];
						} else if (i < 48) {
							t += f3(br, cr, dr) + hr[2];
						} else if (i < 64) {
							t += f2(br, cr, dr) + hr[3];
						} else {
							// if (i<80) {
							t += f1(br, cr, dr) + hr[4];
						}
						t = t | 0;
						t = rotl(t, sr[i]);
						t = t + er | 0;
						ar = er;
						er = dr;
						dr = rotl(cr, 10);
						cr = br;
						br = t;
					}
					// Intermediate hash value
					t = H[1] + cl + dr | 0;
					H[1] = H[2] + dl + er | 0;
					H[2] = H[3] + el + ar | 0;
					H[3] = H[4] + al + br | 0;
					H[4] = H[0] + bl + cr | 0;
					H[0] = t;
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
	
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;
					data.sigBytes = (dataWords.length + 1) * 4;
	
					// Hash final blocks
					this._process();
	
					// Shortcuts
					var hash = this._hash;
					var H = hash.words;
	
					// Swap endian
					for (var i = 0; i < 5; i++) {
						// Shortcut
						var H_i = H[i];
	
						// Swap
						H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
					}
	
					// Return final computed hash
					return hash;
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
	
					return clone;
				}
			});
	
			function f1(x, y, z) {
				return x ^ y ^ z;
			}
	
			function f2(x, y, z) {
				return x & y | ~x & z;
			}
	
			function f3(x, y, z) {
				return (x | ~y) ^ z;
			}
	
			function f4(x, y, z) {
				return x & z | y & ~z;
			}
	
			function f5(x, y, z) {
				return x ^ (y | ~z);
			}
	
			function rotl(x, n) {
				return x << n | x >>> 32 - n;
			}
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.RIPEMD160('message');
	   *     var hash = CryptoJS.RIPEMD160(wordArray);
	   */
			C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
	   */
			C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
		})(Math);
	
		return CryptoJS.RIPEMD160;
	});

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var C_enc = C.enc;
			var Utf8 = C_enc.Utf8;
			var C_algo = C.algo;
	
			/**
	   * HMAC algorithm.
	   */
			var HMAC = C_algo.HMAC = Base.extend({
				/**
	    * Initializes a newly created HMAC.
	    *
	    * @param {Hasher} hasher The hash algorithm to use.
	    * @param {WordArray|string} key The secret key.
	    *
	    * @example
	    *
	    *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	    */
				init: function init(hasher, key) {
					// Init hasher
					hasher = this._hasher = new hasher.init();
	
					// Convert string to WordArray, else assume WordArray already
					if (typeof key == 'string') {
						key = Utf8.parse(key);
					}
	
					// Shortcuts
					var hasherBlockSize = hasher.blockSize;
					var hasherBlockSizeBytes = hasherBlockSize * 4;
	
					// Allow arbitrary length keys
					if (key.sigBytes > hasherBlockSizeBytes) {
						key = hasher.finalize(key);
					}
	
					// Clamp excess bits
					key.clamp();
	
					// Clone key for inner and outer pads
					var oKey = this._oKey = key.clone();
					var iKey = this._iKey = key.clone();
	
					// Shortcuts
					var oKeyWords = oKey.words;
					var iKeyWords = iKey.words;
	
					// XOR keys with pad constants
					for (var i = 0; i < hasherBlockSize; i++) {
						oKeyWords[i] ^= 0x5c5c5c5c;
						iKeyWords[i] ^= 0x36363636;
					}
					oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
	
					// Set initial values
					this.reset();
				},
	
				/**
	    * Resets this HMAC to its initial state.
	    *
	    * @example
	    *
	    *     hmacHasher.reset();
	    */
				reset: function reset() {
					// Shortcut
					var hasher = this._hasher;
	
					// Reset
					hasher.reset();
					hasher.update(this._iKey);
				},
	
				/**
	    * Updates this HMAC with a message.
	    *
	    * @param {WordArray|string} messageUpdate The message to append.
	    *
	    * @return {HMAC} This HMAC instance.
	    *
	    * @example
	    *
	    *     hmacHasher.update('message');
	    *     hmacHasher.update(wordArray);
	    */
				update: function update(messageUpdate) {
					this._hasher.update(messageUpdate);
	
					// Chainable
					return this;
				},
	
				/**
	    * Finalizes the HMAC computation.
	    * Note that the finalize operation is effectively a destructive, read-once operation.
	    *
	    * @param {WordArray|string} messageUpdate (Optional) A final message update.
	    *
	    * @return {WordArray} The HMAC.
	    *
	    * @example
	    *
	    *     var hmac = hmacHasher.finalize();
	    *     var hmac = hmacHasher.finalize('message');
	    *     var hmac = hmacHasher.finalize(wordArray);
	    */
				finalize: function finalize(messageUpdate) {
					// Shortcut
					var hasher = this._hasher;
	
					// Compute HMAC
					var innerHash = hasher.finalize(messageUpdate);
					hasher.reset();
					var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
	
					return hmac;
				}
			});
		})();
	});

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(53), __webpack_require__(60));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha1", "./hmac"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var WordArray = C_lib.WordArray;
			var C_algo = C.algo;
			var SHA1 = C_algo.SHA1;
			var HMAC = C_algo.HMAC;
	
			/**
	   * Password-Based Key Derivation Function 2 algorithm.
	   */
			var PBKDF2 = C_algo.PBKDF2 = Base.extend({
				/**
	    * Configuration options.
	    *
	    * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	    * @property {Hasher} hasher The hasher to use. Default: SHA1
	    * @property {number} iterations The number of iterations to perform. Default: 1
	    */
				cfg: Base.extend({
					keySize: 128 / 32,
					hasher: SHA1,
					iterations: 1
				}),
	
				/**
	    * Initializes a newly created key derivation function.
	    *
	    * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	    *
	    * @example
	    *
	    *     var kdf = CryptoJS.algo.PBKDF2.create();
	    *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
	    *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
	    */
				init: function init(cfg) {
					this.cfg = this.cfg.extend(cfg);
				},
	
				/**
	    * Computes the Password-Based Key Derivation Function 2.
	    *
	    * @param {WordArray|string} password The password.
	    * @param {WordArray|string} salt A salt.
	    *
	    * @return {WordArray} The derived key.
	    *
	    * @example
	    *
	    *     var key = kdf.compute(password, salt);
	    */
				compute: function compute(password, salt) {
					// Shortcut
					var cfg = this.cfg;
	
					// Init HMAC
					var hmac = HMAC.create(cfg.hasher, password);
	
					// Initial values
					var derivedKey = WordArray.create();
					var blockIndex = WordArray.create([0x00000001]);
	
					// Shortcuts
					var derivedKeyWords = derivedKey.words;
					var blockIndexWords = blockIndex.words;
					var keySize = cfg.keySize;
					var iterations = cfg.iterations;
	
					// Generate key
					while (derivedKeyWords.length < keySize) {
						var block = hmac.update(salt).finalize(blockIndex);
						hmac.reset();
	
						// Shortcuts
						var blockWords = block.words;
						var blockWordsLength = blockWords.length;
	
						// Iterations
						var intermediate = block;
						for (var i = 1; i < iterations; i++) {
							intermediate = hmac.finalize(intermediate);
							hmac.reset();
	
							// Shortcut
							var intermediateWords = intermediate.words;
	
							// XOR intermediate with block
							for (var j = 0; j < blockWordsLength; j++) {
								blockWords[j] ^= intermediateWords[j];
							}
						}
	
						derivedKey.concat(block);
						blockIndexWords[0]++;
					}
					derivedKey.sigBytes = keySize * 4;
	
					return derivedKey;
				}
			});
	
			/**
	   * Computes the Password-Based Key Derivation Function 2.
	   *
	   * @param {WordArray|string} password The password.
	   * @param {WordArray|string} salt A salt.
	   * @param {Object} cfg (Optional) The configuration options to use for this computation.
	   *
	   * @return {WordArray} The derived key.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var key = CryptoJS.PBKDF2(password, salt);
	   *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
	   *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
	   */
			C.PBKDF2 = function (password, salt, cfg) {
				return PBKDF2.create(cfg).compute(password, salt);
			};
		})();
	
		return CryptoJS.PBKDF2;
	});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(53), __webpack_require__(60));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha1", "./hmac"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var WordArray = C_lib.WordArray;
			var C_algo = C.algo;
			var MD5 = C_algo.MD5;
	
			/**
	   * This key derivation function is meant to conform with EVP_BytesToKey.
	   * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	   */
			var EvpKDF = C_algo.EvpKDF = Base.extend({
				/**
	    * Configuration options.
	    *
	    * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	    * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	    * @property {number} iterations The number of iterations to perform. Default: 1
	    */
				cfg: Base.extend({
					keySize: 128 / 32,
					hasher: MD5,
					iterations: 1
				}),
	
				/**
	    * Initializes a newly created key derivation function.
	    *
	    * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	    *
	    * @example
	    *
	    *     var kdf = CryptoJS.algo.EvpKDF.create();
	    *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	    *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	    */
				init: function init(cfg) {
					this.cfg = this.cfg.extend(cfg);
				},
	
				/**
	    * Derives a key from a password.
	    *
	    * @param {WordArray|string} password The password.
	    * @param {WordArray|string} salt A salt.
	    *
	    * @return {WordArray} The derived key.
	    *
	    * @example
	    *
	    *     var key = kdf.compute(password, salt);
	    */
				compute: function compute(password, salt) {
					// Shortcut
					var cfg = this.cfg;
	
					// Init hasher
					var hasher = cfg.hasher.create();
	
					// Initial values
					var derivedKey = WordArray.create();
	
					// Shortcuts
					var derivedKeyWords = derivedKey.words;
					var keySize = cfg.keySize;
					var iterations = cfg.iterations;
	
					// Generate key
					while (derivedKeyWords.length < keySize) {
						if (block) {
							hasher.update(block);
						}
						var block = hasher.update(password).finalize(salt);
						hasher.reset();
	
						// Iterations
						for (var i = 1; i < iterations; i++) {
							block = hasher.finalize(block);
							hasher.reset();
						}
	
						derivedKey.concat(block);
					}
					derivedKey.sigBytes = keySize * 4;
	
					return derivedKey;
				}
			});
	
			/**
	   * Derives a key from a password.
	   *
	   * @param {WordArray|string} password The password.
	   * @param {WordArray|string} salt A salt.
	   * @param {Object} cfg (Optional) The configuration options to use for this computation.
	   *
	   * @return {WordArray} The derived key.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var key = CryptoJS.EvpKDF(password, salt);
	   *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	   *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	   */
			C.EvpKDF = function (password, salt, cfg) {
				return EvpKDF.create(cfg).compute(password, salt);
			};
		})();
	
		return CryptoJS.EvpKDF;
	});

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Cipher Feedback block mode.
	  */
		CryptoJS.mode.CFB = (function () {
			var CFB = CryptoJS.lib.BlockCipherMode.extend();
	
			CFB.Encryptor = CFB.extend({
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;
	
					generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
	
					// Remember this block to use with next block
					this._prevBlock = words.slice(offset, offset + blockSize);
				}
			});
	
			CFB.Decryptor = CFB.extend({
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;
	
					// Remember this block to use with next block
					var thisBlock = words.slice(offset, offset + blockSize);
	
					generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
	
					// This block becomes the previous block
					this._prevBlock = thisBlock;
				}
			});
	
			function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
				// Shortcut
				var iv = this._iv;
	
				// Generate keystream
				if (iv) {
					var keystream = iv.slice(0);
	
					// Remove IV for subsequent blocks
					this._iv = undefined;
				} else {
					var keystream = this._prevBlock;
				}
				cipher.encryptBlock(keystream, 0);
	
				// Encrypt
				for (var i = 0; i < blockSize; i++) {
					words[offset + i] ^= keystream[i];
				}
			}
	
			return CFB;
		})();
	
		return CryptoJS.mode.CFB;
	});

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Counter block mode.
	  */
		CryptoJS.mode.CTR = (function () {
			var CTR = CryptoJS.lib.BlockCipherMode.extend();
	
			var Encryptor = CTR.Encryptor = CTR.extend({
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;
					var iv = this._iv;
					var counter = this._counter;
	
					// Generate keystream
					if (iv) {
						counter = this._counter = iv.slice(0);
	
						// Remove IV for subsequent blocks
						this._iv = undefined;
					}
					var keystream = counter.slice(0);
					cipher.encryptBlock(keystream, 0);
	
					// Increment counter
					counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
	
					// Encrypt
					for (var i = 0; i < blockSize; i++) {
						words[offset + i] ^= keystream[i];
					}
				}
			});
	
			CTR.Decryptor = Encryptor;
	
			return CTR;
		})();
	
		return CryptoJS.mode.CTR;
	});

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/** @preserve
	  * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	  * derived from CryptoJS.mode.CTR
	  * Jan Hruby jhruby.web@gmail.com
	  */
		CryptoJS.mode.CTRGladman = (function () {
			var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
	
			function incWord(word) {
				if ((word >> 24 & 0xff) === 0xff) {
					//overflow
					var b1 = word >> 16 & 0xff;
					var b2 = word >> 8 & 0xff;
					var b3 = word & 0xff;
	
					if (b1 === 0xff) // overflow b1
						{
							b1 = 0;
							if (b2 === 0xff) {
								b2 = 0;
								if (b3 === 0xff) {
									b3 = 0;
								} else {
									++b3;
								}
							} else {
								++b2;
							}
						} else {
						++b1;
					}
	
					word = 0;
					word += b1 << 16;
					word += b2 << 8;
					word += b3;
				} else {
					word += 0x01 << 24;
				}
				return word;
			}
	
			function incCounter(counter) {
				if ((counter[0] = incWord(counter[0])) === 0) {
					// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
					counter[1] = incWord(counter[1]);
				}
				return counter;
			}
	
			var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;
					var iv = this._iv;
					var counter = this._counter;
	
					// Generate keystream
					if (iv) {
						counter = this._counter = iv.slice(0);
	
						// Remove IV for subsequent blocks
						this._iv = undefined;
					}
	
					incCounter(counter);
	
					var keystream = counter.slice(0);
					cipher.encryptBlock(keystream, 0);
	
					// Encrypt
					for (var i = 0; i < blockSize; i++) {
						words[offset + i] ^= keystream[i];
					}
				}
			});
	
			CTRGladman.Decryptor = Encryptor;
	
			return CTRGladman;
		})();
	
		return CryptoJS.mode.CTRGladman;
	});

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Output Feedback block mode.
	  */
		CryptoJS.mode.OFB = (function () {
			var OFB = CryptoJS.lib.BlockCipherMode.extend();
	
			var Encryptor = OFB.Encryptor = OFB.extend({
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;
					var iv = this._iv;
					var keystream = this._keystream;
	
					// Generate keystream
					if (iv) {
						keystream = this._keystream = iv.slice(0);
	
						// Remove IV for subsequent blocks
						this._iv = undefined;
					}
					cipher.encryptBlock(keystream, 0);
	
					// Encrypt
					for (var i = 0; i < blockSize; i++) {
						words[offset + i] ^= keystream[i];
					}
				}
			});
	
			OFB.Decryptor = Encryptor;
	
			return OFB;
		})();
	
		return CryptoJS.mode.OFB;
	});

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Electronic Codebook block mode.
	  */
		CryptoJS.mode.ECB = (function () {
			var ECB = CryptoJS.lib.BlockCipherMode.extend();
	
			ECB.Encryptor = ECB.extend({
				processBlock: function processBlock(words, offset) {
					this._cipher.encryptBlock(words, offset);
				}
			});
	
			ECB.Decryptor = ECB.extend({
				processBlock: function processBlock(words, offset) {
					this._cipher.decryptBlock(words, offset);
				}
			});
	
			return ECB;
		})();
	
		return CryptoJS.mode.ECB;
	});

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * ANSI X.923 padding strategy.
	  */
		CryptoJS.pad.AnsiX923 = {
			pad: function pad(data, blockSize) {
				// Shortcuts
				var dataSigBytes = data.sigBytes;
				var blockSizeBytes = blockSize * 4;
	
				// Count padding bytes
				var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
	
				// Compute last byte position
				var lastBytePos = dataSigBytes + nPaddingBytes - 1;
	
				// Pad
				data.clamp();
				data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
				data.sigBytes += nPaddingBytes;
			},
	
			unpad: function unpad(data) {
				// Get number of padding bytes from last byte
				var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;
	
				// Remove padding
				data.sigBytes -= nPaddingBytes;
			}
		};
	
		return CryptoJS.pad.Ansix923;
	});

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * ISO 10126 padding strategy.
	  */
		CryptoJS.pad.Iso10126 = {
			pad: function pad(data, blockSize) {
				// Shortcut
				var blockSizeBytes = blockSize * 4;
	
				// Count padding bytes
				var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
	
				// Pad
				data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
			},
	
			unpad: function unpad(data) {
				// Get number of padding bytes from last byte
				var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;
	
				// Remove padding
				data.sigBytes -= nPaddingBytes;
			}
		};
	
		return CryptoJS.pad.Iso10126;
	});

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * ISO/IEC 9797-1 Padding Method 2.
	  */
		CryptoJS.pad.Iso97971 = {
			pad: function pad(data, blockSize) {
				// Add 0x80 byte
				data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));
	
				// Zero pad the rest
				CryptoJS.pad.ZeroPadding.pad(data, blockSize);
			},
	
			unpad: function unpad(data) {
				// Remove zero padding
				CryptoJS.pad.ZeroPadding.unpad(data);
	
				// Remove one more byte -- the 0x80 byte
				data.sigBytes--;
			}
		};
	
		return CryptoJS.pad.Iso97971;
	});

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Zero padding strategy.
	  */
		CryptoJS.pad.ZeroPadding = {
			pad: function pad(data, blockSize) {
				// Shortcut
				var blockSizeBytes = blockSize * 4;
	
				// Pad
				data.clamp();
				data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
			},
	
			unpad: function unpad(data) {
				// Shortcut
				var dataWords = data.words;
	
				// Unpad
				var i = data.sigBytes - 1;
				while (!(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)) {
					i--;
				}
				data.sigBytes = i + 1;
			}
		};
	
		return CryptoJS.pad.ZeroPadding;
	});

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * A noop padding strategy.
	  */
		CryptoJS.pad.NoPadding = {
			pad: function pad() {},
	
			unpad: function unpad() {}
		};
	
		return CryptoJS.pad.NoPadding;
	});

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function (undefined) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var CipherParams = C_lib.CipherParams;
			var C_enc = C.enc;
			var Hex = C_enc.Hex;
			var C_format = C.format;
	
			var HexFormatter = C_format.Hex = {
				/**
	    * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
	    *
	    * @param {CipherParams} cipherParams The cipher params object.
	    *
	    * @return {string} The hexadecimally encoded string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
	    */
				stringify: function stringify(cipherParams) {
					return cipherParams.ciphertext.toString(Hex);
				},
	
				/**
	    * Converts a hexadecimally encoded ciphertext string to a cipher params object.
	    *
	    * @param {string} input The hexadecimally encoded string.
	    *
	    * @return {CipherParams} The cipher params object.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
	    */
				parse: function parse(input) {
					var ciphertext = Hex.parse(input);
					return CipherParams.create({ ciphertext: ciphertext });
				}
			};
		})();
	
		return CryptoJS.format.Hex;
	});

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(51), __webpack_require__(52), __webpack_require__(62), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var BlockCipher = C_lib.BlockCipher;
			var C_algo = C.algo;
	
			// Lookup tables
			var SBOX = [];
			var INV_SBOX = [];
			var SUB_MIX_0 = [];
			var SUB_MIX_1 = [];
			var SUB_MIX_2 = [];
			var SUB_MIX_3 = [];
			var INV_SUB_MIX_0 = [];
			var INV_SUB_MIX_1 = [];
			var INV_SUB_MIX_2 = [];
			var INV_SUB_MIX_3 = [];
	
			// Compute lookup tables
			(function () {
				// Compute double table
				var d = [];
				for (var i = 0; i < 256; i++) {
					if (i < 128) {
						d[i] = i << 1;
					} else {
						d[i] = i << 1 ^ 0x11b;
					}
				}
	
				// Walk GF(2^8)
				var x = 0;
				var xi = 0;
				for (var i = 0; i < 256; i++) {
					// Compute sbox
					var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
					sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
					SBOX[x] = sx;
					INV_SBOX[sx] = x;
	
					// Compute multiplication
					var x2 = d[x];
					var x4 = d[x2];
					var x8 = d[x4];
	
					// Compute sub bytes, mix columns tables
					var t = d[sx] * 0x101 ^ sx * 0x1010100;
					SUB_MIX_0[x] = t << 24 | t >>> 8;
					SUB_MIX_1[x] = t << 16 | t >>> 16;
					SUB_MIX_2[x] = t << 8 | t >>> 24;
					SUB_MIX_3[x] = t;
	
					// Compute inv sub bytes, inv mix columns tables
					var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
					INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
					INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
					INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
					INV_SUB_MIX_3[sx] = t;
	
					// Compute next counter
					if (!x) {
						x = xi = 1;
					} else {
						x = x2 ^ d[d[d[x8 ^ x2]]];
						xi ^= d[d[xi]];
					}
				}
			})();
	
			// Precomputed Rcon lookup
			var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
	
			/**
	   * AES block cipher algorithm.
	   */
			var AES = C_algo.AES = BlockCipher.extend({
				_doReset: function _doReset() {
					// Shortcuts
					var key = this._key;
					var keyWords = key.words;
					var keySize = key.sigBytes / 4;
	
					// Compute number of rounds
					var nRounds = this._nRounds = keySize + 6;
	
					// Compute number of key schedule rows
					var ksRows = (nRounds + 1) * 4;
	
					// Compute key schedule
					var keySchedule = this._keySchedule = [];
					for (var ksRow = 0; ksRow < ksRows; ksRow++) {
						if (ksRow < keySize) {
							keySchedule[ksRow] = keyWords[ksRow];
						} else {
							var t = keySchedule[ksRow - 1];
	
							if (!(ksRow % keySize)) {
								// Rot word
								t = t << 8 | t >>> 24;
	
								// Sub word
								t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
	
								// Mix Rcon
								t ^= RCON[ksRow / keySize | 0] << 24;
							} else if (keySize > 6 && ksRow % keySize == 4) {
								// Sub word
								t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
							}
	
							keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
						}
					}
	
					// Compute inv key schedule
					var invKeySchedule = this._invKeySchedule = [];
					for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
						var ksRow = ksRows - invKsRow;
	
						if (invKsRow % 4) {
							var t = keySchedule[ksRow];
						} else {
							var t = keySchedule[ksRow - 4];
						}
	
						if (invKsRow < 4 || ksRow <= 4) {
							invKeySchedule[invKsRow] = t;
						} else {
							invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
						}
					}
				},
	
				encryptBlock: function encryptBlock(M, offset) {
					this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
				},
	
				decryptBlock: function decryptBlock(M, offset) {
					// Swap 2nd and 4th rows
					var t = M[offset + 1];
					M[offset + 1] = M[offset + 3];
					M[offset + 3] = t;
	
					this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
	
					// Inv swap 2nd and 4th rows
					var t = M[offset + 1];
					M[offset + 1] = M[offset + 3];
					M[offset + 3] = t;
				},
	
				_doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
					// Shortcut
					var nRounds = this._nRounds;
	
					// Get input, add round key
					var s0 = M[offset] ^ keySchedule[0];
					var s1 = M[offset + 1] ^ keySchedule[1];
					var s2 = M[offset + 2] ^ keySchedule[2];
					var s3 = M[offset + 3] ^ keySchedule[3];
	
					// Key schedule row counter
					var ksRow = 4;
	
					// Rounds
					for (var round = 1; round < nRounds; round++) {
						// Shift rows, sub bytes, mix columns, add round key
						var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
						var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
						var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
						var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];
	
						// Update state
						s0 = t0;
						s1 = t1;
						s2 = t2;
						s3 = t3;
					}
	
					// Shift rows, sub bytes, add round key
					var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
					var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
					var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
					var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
	
					// Set output
					M[offset] = t0;
					M[offset + 1] = t1;
					M[offset + 2] = t2;
					M[offset + 3] = t3;
				},
	
				keySize: 256 / 32
			});
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	   */
			C.AES = BlockCipher._createHelper(AES);
		})();
	
		return CryptoJS.AES;
	});

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(51), __webpack_require__(52), __webpack_require__(62), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var BlockCipher = C_lib.BlockCipher;
			var C_algo = C.algo;
	
			// Permuted Choice 1 constants
			var PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4];
	
			// Permuted Choice 2 constants
			var PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32];
	
			// Cumulative bit shift constants
			var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
	
			// SBOXes and round permutation constants
			var SBOX_P = [{
				0x0: 0x808200,
				0x10000000: 0x8000,
				0x20000000: 0x808002,
				0x30000000: 0x2,
				0x40000000: 0x200,
				0x50000000: 0x808202,
				0x60000000: 0x800202,
				0x70000000: 0x800000,
				0x80000000: 0x202,
				0x90000000: 0x800200,
				0xa0000000: 0x8200,
				0xb0000000: 0x808000,
				0xc0000000: 0x8002,
				0xd0000000: 0x800002,
				0xe0000000: 0x0,
				0xf0000000: 0x8202,
				0x8000000: 0x0,
				0x18000000: 0x808202,
				0x28000000: 0x8202,
				0x38000000: 0x8000,
				0x48000000: 0x808200,
				0x58000000: 0x200,
				0x68000000: 0x808002,
				0x78000000: 0x2,
				0x88000000: 0x800200,
				0x98000000: 0x8200,
				0xa8000000: 0x808000,
				0xb8000000: 0x800202,
				0xc8000000: 0x800002,
				0xd8000000: 0x8002,
				0xe8000000: 0x202,
				0xf8000000: 0x800000,
				0x1: 0x8000,
				0x10000001: 0x2,
				0x20000001: 0x808200,
				0x30000001: 0x800000,
				0x40000001: 0x808002,
				0x50000001: 0x8200,
				0x60000001: 0x200,
				0x70000001: 0x800202,
				0x80000001: 0x808202,
				0x90000001: 0x808000,
				0xa0000001: 0x800002,
				0xb0000001: 0x8202,
				0xc0000001: 0x202,
				0xd0000001: 0x800200,
				0xe0000001: 0x8002,
				0xf0000001: 0x0,
				0x8000001: 0x808202,
				0x18000001: 0x808000,
				0x28000001: 0x800000,
				0x38000001: 0x200,
				0x48000001: 0x8000,
				0x58000001: 0x800002,
				0x68000001: 0x2,
				0x78000001: 0x8202,
				0x88000001: 0x8002,
				0x98000001: 0x800202,
				0xa8000001: 0x202,
				0xb8000001: 0x808200,
				0xc8000001: 0x800200,
				0xd8000001: 0x0,
				0xe8000001: 0x8200,
				0xf8000001: 0x808002
			}, {
				0x0: 0x40084010,
				0x1000000: 0x4000,
				0x2000000: 0x80000,
				0x3000000: 0x40080010,
				0x4000000: 0x40000010,
				0x5000000: 0x40084000,
				0x6000000: 0x40004000,
				0x7000000: 0x10,
				0x8000000: 0x84000,
				0x9000000: 0x40004010,
				0xa000000: 0x40000000,
				0xb000000: 0x84010,
				0xc000000: 0x80010,
				0xd000000: 0x0,
				0xe000000: 0x4010,
				0xf000000: 0x40080000,
				0x800000: 0x40004000,
				0x1800000: 0x84010,
				0x2800000: 0x10,
				0x3800000: 0x40004010,
				0x4800000: 0x40084010,
				0x5800000: 0x40000000,
				0x6800000: 0x80000,
				0x7800000: 0x40080010,
				0x8800000: 0x80010,
				0x9800000: 0x0,
				0xa800000: 0x4000,
				0xb800000: 0x40080000,
				0xc800000: 0x40000010,
				0xd800000: 0x84000,
				0xe800000: 0x40084000,
				0xf800000: 0x4010,
				0x10000000: 0x0,
				0x11000000: 0x40080010,
				0x12000000: 0x40004010,
				0x13000000: 0x40084000,
				0x14000000: 0x40080000,
				0x15000000: 0x10,
				0x16000000: 0x84010,
				0x17000000: 0x4000,
				0x18000000: 0x4010,
				0x19000000: 0x80000,
				0x1a000000: 0x80010,
				0x1b000000: 0x40000010,
				0x1c000000: 0x84000,
				0x1d000000: 0x40004000,
				0x1e000000: 0x40000000,
				0x1f000000: 0x40084010,
				0x10800000: 0x84010,
				0x11800000: 0x80000,
				0x12800000: 0x40080000,
				0x13800000: 0x4000,
				0x14800000: 0x40004000,
				0x15800000: 0x40084010,
				0x16800000: 0x10,
				0x17800000: 0x40000000,
				0x18800000: 0x40084000,
				0x19800000: 0x40000010,
				0x1a800000: 0x40004010,
				0x1b800000: 0x80010,
				0x1c800000: 0x0,
				0x1d800000: 0x4010,
				0x1e800000: 0x40080010,
				0x1f800000: 0x84000
			}, {
				0x0: 0x104,
				0x100000: 0x0,
				0x200000: 0x4000100,
				0x300000: 0x10104,
				0x400000: 0x10004,
				0x500000: 0x4000004,
				0x600000: 0x4010104,
				0x700000: 0x4010000,
				0x800000: 0x4000000,
				0x900000: 0x4010100,
				0xa00000: 0x10100,
				0xb00000: 0x4010004,
				0xc00000: 0x4000104,
				0xd00000: 0x10000,
				0xe00000: 0x4,
				0xf00000: 0x100,
				0x80000: 0x4010100,
				0x180000: 0x4010004,
				0x280000: 0x0,
				0x380000: 0x4000100,
				0x480000: 0x4000004,
				0x580000: 0x10000,
				0x680000: 0x10004,
				0x780000: 0x104,
				0x880000: 0x4,
				0x980000: 0x100,
				0xa80000: 0x4010000,
				0xb80000: 0x10104,
				0xc80000: 0x10100,
				0xd80000: 0x4000104,
				0xe80000: 0x4010104,
				0xf80000: 0x4000000,
				0x1000000: 0x4010100,
				0x1100000: 0x10004,
				0x1200000: 0x10000,
				0x1300000: 0x4000100,
				0x1400000: 0x100,
				0x1500000: 0x4010104,
				0x1600000: 0x4000004,
				0x1700000: 0x0,
				0x1800000: 0x4000104,
				0x1900000: 0x4000000,
				0x1a00000: 0x4,
				0x1b00000: 0x10100,
				0x1c00000: 0x4010000,
				0x1d00000: 0x104,
				0x1e00000: 0x10104,
				0x1f00000: 0x4010004,
				0x1080000: 0x4000000,
				0x1180000: 0x104,
				0x1280000: 0x4010100,
				0x1380000: 0x0,
				0x1480000: 0x10004,
				0x1580000: 0x4000100,
				0x1680000: 0x100,
				0x1780000: 0x4010004,
				0x1880000: 0x10000,
				0x1980000: 0x4010104,
				0x1a80000: 0x10104,
				0x1b80000: 0x4000004,
				0x1c80000: 0x4000104,
				0x1d80000: 0x4010000,
				0x1e80000: 0x4,
				0x1f80000: 0x10100
			}, {
				0x0: 0x80401000,
				0x10000: 0x80001040,
				0x20000: 0x401040,
				0x30000: 0x80400000,
				0x40000: 0x0,
				0x50000: 0x401000,
				0x60000: 0x80000040,
				0x70000: 0x400040,
				0x80000: 0x80000000,
				0x90000: 0x400000,
				0xa0000: 0x40,
				0xb0000: 0x80001000,
				0xc0000: 0x80400040,
				0xd0000: 0x1040,
				0xe0000: 0x1000,
				0xf0000: 0x80401040,
				0x8000: 0x80001040,
				0x18000: 0x40,
				0x28000: 0x80400040,
				0x38000: 0x80001000,
				0x48000: 0x401000,
				0x58000: 0x80401040,
				0x68000: 0x0,
				0x78000: 0x80400000,
				0x88000: 0x1000,
				0x98000: 0x80401000,
				0xa8000: 0x400000,
				0xb8000: 0x1040,
				0xc8000: 0x80000000,
				0xd8000: 0x400040,
				0xe8000: 0x401040,
				0xf8000: 0x80000040,
				0x100000: 0x400040,
				0x110000: 0x401000,
				0x120000: 0x80000040,
				0x130000: 0x0,
				0x140000: 0x1040,
				0x150000: 0x80400040,
				0x160000: 0x80401000,
				0x170000: 0x80001040,
				0x180000: 0x80401040,
				0x190000: 0x80000000,
				0x1a0000: 0x80400000,
				0x1b0000: 0x401040,
				0x1c0000: 0x80001000,
				0x1d0000: 0x400000,
				0x1e0000: 0x40,
				0x1f0000: 0x1000,
				0x108000: 0x80400000,
				0x118000: 0x80401040,
				0x128000: 0x0,
				0x138000: 0x401000,
				0x148000: 0x400040,
				0x158000: 0x80000000,
				0x168000: 0x80001040,
				0x178000: 0x40,
				0x188000: 0x80000040,
				0x198000: 0x1000,
				0x1a8000: 0x80001000,
				0x1b8000: 0x80400040,
				0x1c8000: 0x1040,
				0x1d8000: 0x80401000,
				0x1e8000: 0x400000,
				0x1f8000: 0x401040
			}, {
				0x0: 0x80,
				0x1000: 0x1040000,
				0x2000: 0x40000,
				0x3000: 0x20000000,
				0x4000: 0x20040080,
				0x5000: 0x1000080,
				0x6000: 0x21000080,
				0x7000: 0x40080,
				0x8000: 0x1000000,
				0x9000: 0x20040000,
				0xa000: 0x20000080,
				0xb000: 0x21040080,
				0xc000: 0x21040000,
				0xd000: 0x0,
				0xe000: 0x1040080,
				0xf000: 0x21000000,
				0x800: 0x1040080,
				0x1800: 0x21000080,
				0x2800: 0x80,
				0x3800: 0x1040000,
				0x4800: 0x40000,
				0x5800: 0x20040080,
				0x6800: 0x21040000,
				0x7800: 0x20000000,
				0x8800: 0x20040000,
				0x9800: 0x0,
				0xa800: 0x21040080,
				0xb800: 0x1000080,
				0xc800: 0x20000080,
				0xd800: 0x21000000,
				0xe800: 0x1000000,
				0xf800: 0x40080,
				0x10000: 0x40000,
				0x11000: 0x80,
				0x12000: 0x20000000,
				0x13000: 0x21000080,
				0x14000: 0x1000080,
				0x15000: 0x21040000,
				0x16000: 0x20040080,
				0x17000: 0x1000000,
				0x18000: 0x21040080,
				0x19000: 0x21000000,
				0x1a000: 0x1040000,
				0x1b000: 0x20040000,
				0x1c000: 0x40080,
				0x1d000: 0x20000080,
				0x1e000: 0x0,
				0x1f000: 0x1040080,
				0x10800: 0x21000080,
				0x11800: 0x1000000,
				0x12800: 0x1040000,
				0x13800: 0x20040080,
				0x14800: 0x20000000,
				0x15800: 0x1040080,
				0x16800: 0x80,
				0x17800: 0x21040000,
				0x18800: 0x40080,
				0x19800: 0x21040080,
				0x1a800: 0x0,
				0x1b800: 0x21000000,
				0x1c800: 0x1000080,
				0x1d800: 0x40000,
				0x1e800: 0x20040000,
				0x1f800: 0x20000080
			}, {
				0x0: 0x10000008,
				0x100: 0x2000,
				0x200: 0x10200000,
				0x300: 0x10202008,
				0x400: 0x10002000,
				0x500: 0x200000,
				0x600: 0x200008,
				0x700: 0x10000000,
				0x800: 0x0,
				0x900: 0x10002008,
				0xa00: 0x202000,
				0xb00: 0x8,
				0xc00: 0x10200008,
				0xd00: 0x202008,
				0xe00: 0x2008,
				0xf00: 0x10202000,
				0x80: 0x10200000,
				0x180: 0x10202008,
				0x280: 0x8,
				0x380: 0x200000,
				0x480: 0x202008,
				0x580: 0x10000008,
				0x680: 0x10002000,
				0x780: 0x2008,
				0x880: 0x200008,
				0x980: 0x2000,
				0xa80: 0x10002008,
				0xb80: 0x10200008,
				0xc80: 0x0,
				0xd80: 0x10202000,
				0xe80: 0x202000,
				0xf80: 0x10000000,
				0x1000: 0x10002000,
				0x1100: 0x10200008,
				0x1200: 0x10202008,
				0x1300: 0x2008,
				0x1400: 0x200000,
				0x1500: 0x10000000,
				0x1600: 0x10000008,
				0x1700: 0x202000,
				0x1800: 0x202008,
				0x1900: 0x0,
				0x1a00: 0x8,
				0x1b00: 0x10200000,
				0x1c00: 0x2000,
				0x1d00: 0x10002008,
				0x1e00: 0x10202000,
				0x1f00: 0x200008,
				0x1080: 0x8,
				0x1180: 0x202000,
				0x1280: 0x200000,
				0x1380: 0x10000008,
				0x1480: 0x10002000,
				0x1580: 0x2008,
				0x1680: 0x10202008,
				0x1780: 0x10200000,
				0x1880: 0x10202000,
				0x1980: 0x10200008,
				0x1a80: 0x2000,
				0x1b80: 0x202008,
				0x1c80: 0x200008,
				0x1d80: 0x0,
				0x1e80: 0x10000000,
				0x1f80: 0x10002008
			}, {
				0x0: 0x100000,
				0x10: 0x2000401,
				0x20: 0x400,
				0x30: 0x100401,
				0x40: 0x2100401,
				0x50: 0x0,
				0x60: 0x1,
				0x70: 0x2100001,
				0x80: 0x2000400,
				0x90: 0x100001,
				0xa0: 0x2000001,
				0xb0: 0x2100400,
				0xc0: 0x2100000,
				0xd0: 0x401,
				0xe0: 0x100400,
				0xf0: 0x2000000,
				0x8: 0x2100001,
				0x18: 0x0,
				0x28: 0x2000401,
				0x38: 0x2100400,
				0x48: 0x100000,
				0x58: 0x2000001,
				0x68: 0x2000000,
				0x78: 0x401,
				0x88: 0x100401,
				0x98: 0x2000400,
				0xa8: 0x2100000,
				0xb8: 0x100001,
				0xc8: 0x400,
				0xd8: 0x2100401,
				0xe8: 0x1,
				0xf8: 0x100400,
				0x100: 0x2000000,
				0x110: 0x100000,
				0x120: 0x2000401,
				0x130: 0x2100001,
				0x140: 0x100001,
				0x150: 0x2000400,
				0x160: 0x2100400,
				0x170: 0x100401,
				0x180: 0x401,
				0x190: 0x2100401,
				0x1a0: 0x100400,
				0x1b0: 0x1,
				0x1c0: 0x0,
				0x1d0: 0x2100000,
				0x1e0: 0x2000001,
				0x1f0: 0x400,
				0x108: 0x100400,
				0x118: 0x2000401,
				0x128: 0x2100001,
				0x138: 0x1,
				0x148: 0x2000000,
				0x158: 0x100000,
				0x168: 0x401,
				0x178: 0x2100400,
				0x188: 0x2000001,
				0x198: 0x2100000,
				0x1a8: 0x0,
				0x1b8: 0x2100401,
				0x1c8: 0x100401,
				0x1d8: 0x400,
				0x1e8: 0x2000400,
				0x1f8: 0x100001
			}, {
				0x0: 0x8000820,
				0x1: 0x20000,
				0x2: 0x8000000,
				0x3: 0x20,
				0x4: 0x20020,
				0x5: 0x8020820,
				0x6: 0x8020800,
				0x7: 0x800,
				0x8: 0x8020000,
				0x9: 0x8000800,
				0xa: 0x20800,
				0xb: 0x8020020,
				0xc: 0x820,
				0xd: 0x0,
				0xe: 0x8000020,
				0xf: 0x20820,
				0x80000000: 0x800,
				0x80000001: 0x8020820,
				0x80000002: 0x8000820,
				0x80000003: 0x8000000,
				0x80000004: 0x8020000,
				0x80000005: 0x20800,
				0x80000006: 0x20820,
				0x80000007: 0x20,
				0x80000008: 0x8000020,
				0x80000009: 0x820,
				0x8000000a: 0x20020,
				0x8000000b: 0x8020800,
				0x8000000c: 0x0,
				0x8000000d: 0x8020020,
				0x8000000e: 0x8000800,
				0x8000000f: 0x20000,
				0x10: 0x20820,
				0x11: 0x8020800,
				0x12: 0x20,
				0x13: 0x800,
				0x14: 0x8000800,
				0x15: 0x8000020,
				0x16: 0x8020020,
				0x17: 0x20000,
				0x18: 0x0,
				0x19: 0x20020,
				0x1a: 0x8020000,
				0x1b: 0x8000820,
				0x1c: 0x8020820,
				0x1d: 0x20800,
				0x1e: 0x820,
				0x1f: 0x8000000,
				0x80000010: 0x20000,
				0x80000011: 0x800,
				0x80000012: 0x8020020,
				0x80000013: 0x20820,
				0x80000014: 0x20,
				0x80000015: 0x8020000,
				0x80000016: 0x8000000,
				0x80000017: 0x8000820,
				0x80000018: 0x8020820,
				0x80000019: 0x8000020,
				0x8000001a: 0x8000800,
				0x8000001b: 0x0,
				0x8000001c: 0x20800,
				0x8000001d: 0x820,
				0x8000001e: 0x20020,
				0x8000001f: 0x8020800
			}];
	
			// Masks that select the SBOX input
			var SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];
	
			/**
	   * DES block cipher algorithm.
	   */
			var DES = C_algo.DES = BlockCipher.extend({
				_doReset: function _doReset() {
					// Shortcuts
					var key = this._key;
					var keyWords = key.words;
	
					// Select 56 bits according to PC1
					var keyBits = [];
					for (var i = 0; i < 56; i++) {
						var keyBitPos = PC1[i] - 1;
						keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
					}
	
					// Assemble 16 subkeys
					var subKeys = this._subKeys = [];
					for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
						// Create subkey
						var subKey = subKeys[nSubKey] = [];
	
						// Shortcut
						var bitShift = BIT_SHIFTS[nSubKey];
	
						// Select 48 bits according to PC2
						for (var i = 0; i < 24; i++) {
							// Select from the left 28 key bits
							subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
	
							// Select from the right 28 key bits
							subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
						}
	
						// Since each subkey is applied to an expanded 32-bit input,
						// the subkey can be broken into 8 values scaled to 32-bits,
						// which allows the key to be used without expansion
						subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
						for (var i = 1; i < 7; i++) {
							subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
						}
						subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
					}
	
					// Compute inverse subkeys
					var invSubKeys = this._invSubKeys = [];
					for (var i = 0; i < 16; i++) {
						invSubKeys[i] = subKeys[15 - i];
					}
				},
	
				encryptBlock: function encryptBlock(M, offset) {
					this._doCryptBlock(M, offset, this._subKeys);
				},
	
				decryptBlock: function decryptBlock(M, offset) {
					this._doCryptBlock(M, offset, this._invSubKeys);
				},
	
				_doCryptBlock: function _doCryptBlock(M, offset, subKeys) {
					// Get input
					this._lBlock = M[offset];
					this._rBlock = M[offset + 1];
	
					// Initial permutation
					exchangeLR.call(this, 4, 0x0f0f0f0f);
					exchangeLR.call(this, 16, 0x0000ffff);
					exchangeRL.call(this, 2, 0x33333333);
					exchangeRL.call(this, 8, 0x00ff00ff);
					exchangeLR.call(this, 1, 0x55555555);
	
					// Rounds
					for (var round = 0; round < 16; round++) {
						// Shortcuts
						var subKey = subKeys[round];
						var lBlock = this._lBlock;
						var rBlock = this._rBlock;
	
						// Feistel function
						var f = 0;
						for (var i = 0; i < 8; i++) {
							f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
						}
						this._lBlock = rBlock;
						this._rBlock = lBlock ^ f;
					}
	
					// Undo swap from last round
					var t = this._lBlock;
					this._lBlock = this._rBlock;
					this._rBlock = t;
	
					// Final permutation
					exchangeLR.call(this, 1, 0x55555555);
					exchangeRL.call(this, 8, 0x00ff00ff);
					exchangeRL.call(this, 2, 0x33333333);
					exchangeLR.call(this, 16, 0x0000ffff);
					exchangeLR.call(this, 4, 0x0f0f0f0f);
	
					// Set output
					M[offset] = this._lBlock;
					M[offset + 1] = this._rBlock;
				},
	
				keySize: 64 / 32,
	
				ivSize: 64 / 32,
	
				blockSize: 64 / 32
			});
	
			// Swap bits across the left and right words
			function exchangeLR(offset, mask) {
				var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
				this._rBlock ^= t;
				this._lBlock ^= t << offset;
			}
	
			function exchangeRL(offset, mask) {
				var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
				this._lBlock ^= t;
				this._rBlock ^= t << offset;
			}
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
	   */
			C.DES = BlockCipher._createHelper(DES);
	
			/**
	   * Triple-DES block cipher algorithm.
	   */
			var TripleDES = C_algo.TripleDES = BlockCipher.extend({
				_doReset: function _doReset() {
					// Shortcuts
					var key = this._key;
					var keyWords = key.words;
	
					// Create DES instances
					this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
					this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
					this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
				},
	
				encryptBlock: function encryptBlock(M, offset) {
					this._des1.encryptBlock(M, offset);
					this._des2.decryptBlock(M, offset);
					this._des3.encryptBlock(M, offset);
				},
	
				decryptBlock: function decryptBlock(M, offset) {
					this._des3.decryptBlock(M, offset);
					this._des2.encryptBlock(M, offset);
					this._des1.decryptBlock(M, offset);
				},
	
				keySize: 192 / 32,
	
				ivSize: 64 / 32,
	
				blockSize: 64 / 32
			});
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
	   */
			C.TripleDES = BlockCipher._createHelper(TripleDES);
		})();
	
		return CryptoJS.TripleDES;
	});

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(51), __webpack_require__(52), __webpack_require__(62), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var StreamCipher = C_lib.StreamCipher;
			var C_algo = C.algo;
	
			/**
	   * RC4 stream cipher algorithm.
	   */
			var RC4 = C_algo.RC4 = StreamCipher.extend({
				_doReset: function _doReset() {
					// Shortcuts
					var key = this._key;
					var keyWords = key.words;
					var keySigBytes = key.sigBytes;
	
					// Init sbox
					var S = this._S = [];
					for (var i = 0; i < 256; i++) {
						S[i] = i;
					}
	
					// Key setup
					for (var i = 0, j = 0; i < 256; i++) {
						var keyByteIndex = i % keySigBytes;
						var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;
	
						j = (j + S[i] + keyByte) % 256;
	
						// Swap
						var t = S[i];
						S[i] = S[j];
						S[j] = t;
					}
	
					// Counters
					this._i = this._j = 0;
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					M[offset] ^= generateKeystreamWord.call(this);
				},
	
				keySize: 256 / 32,
	
				ivSize: 0
			});
	
			function generateKeystreamWord() {
				// Shortcuts
				var S = this._S;
				var i = this._i;
				var j = this._j;
	
				// Generate keystream word
				var keystreamWord = 0;
				for (var n = 0; n < 4; n++) {
					i = (i + 1) % 256;
					j = (j + S[i]) % 256;
	
					// Swap
					var t = S[i];
					S[i] = S[j];
					S[j] = t;
	
					keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
				}
	
				// Update counters
				this._i = i;
				this._j = j;
	
				return keystreamWord;
			}
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
	   */
			C.RC4 = StreamCipher._createHelper(RC4);
	
			/**
	   * Modified RC4 stream cipher algorithm.
	   */
			var RC4Drop = C_algo.RC4Drop = RC4.extend({
				/**
	    * Configuration options.
	    *
	    * @property {number} drop The number of keystream words to drop. Default 192
	    */
				cfg: RC4.cfg.extend({
					drop: 192
				}),
	
				_doReset: function _doReset() {
					RC4._doReset.call(this);
	
					// Drop
					for (var i = this.cfg.drop; i > 0; i--) {
						generateKeystreamWord.call(this);
					}
				}
			});
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
	   */
			C.RC4Drop = StreamCipher._createHelper(RC4Drop);
		})();
	
		return CryptoJS.RC4;
	});

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(51), __webpack_require__(52), __webpack_require__(62), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var StreamCipher = C_lib.StreamCipher;
			var C_algo = C.algo;
	
			// Reusable objects
			var S = [];
			var C_ = [];
			var G = [];
	
			/**
	   * Rabbit stream cipher algorithm
	   */
			var Rabbit = C_algo.Rabbit = StreamCipher.extend({
				_doReset: function _doReset() {
					// Shortcuts
					var K = this._key.words;
					var iv = this.cfg.iv;
	
					// Swap endian
					for (var i = 0; i < 4; i++) {
						K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff | (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;
					}
	
					// Generate initial state values
					var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];
	
					// Generate initial counter values
					var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];
	
					// Carry bit
					this._b = 0;
	
					// Iterate the system four times
					for (var i = 0; i < 4; i++) {
						nextState.call(this);
					}
	
					// Modify the counters
					for (var i = 0; i < 8; i++) {
						C[i] ^= X[i + 4 & 7];
					}
	
					// IV setup
					if (iv) {
						// Shortcuts
						var IV = iv.words;
						var IV_0 = IV[0];
						var IV_1 = IV[1];
	
						// Generate four subvectors
						var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
						var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
						var i1 = i0 >>> 16 | i2 & 0xffff0000;
						var i3 = i2 << 16 | i0 & 0x0000ffff;
	
						// Modify counter values
						C[0] ^= i0;
						C[1] ^= i1;
						C[2] ^= i2;
						C[3] ^= i3;
						C[4] ^= i0;
						C[5] ^= i1;
						C[6] ^= i2;
						C[7] ^= i3;
	
						// Iterate the system four times
						for (var i = 0; i < 4; i++) {
							nextState.call(this);
						}
					}
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcut
					var X = this._X;
	
					// Iterate the system
					nextState.call(this);
	
					// Generate four keystream words
					S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
					S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
					S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
					S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
	
					for (var i = 0; i < 4; i++) {
						// Swap endian
						S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;
	
						// Encrypt
						M[offset + i] ^= S[i];
					}
				},
	
				blockSize: 128 / 32,
	
				ivSize: 64 / 32
			});
	
			function nextState() {
				// Shortcuts
				var X = this._X;
				var C = this._C;
	
				// Save old counter values
				for (var i = 0; i < 8; i++) {
					C_[i] = C[i];
				}
	
				// Calculate new counter values
				C[0] = C[0] + 0x4d34d34d + this._b | 0;
				C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
				C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
				C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
				C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
				C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
				C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
				C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
				this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
	
				// Calculate the g-values
				for (var i = 0; i < 8; i++) {
					var gx = X[i] + C[i];
	
					// Construct high and low argument for squaring
					var ga = gx & 0xffff;
					var gb = gx >>> 16;
	
					// Calculate high and low result of squaring
					var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
					var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);
	
					// High XOR low
					G[i] = gh ^ gl;
				}
	
				// Calculate new state values
				X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
				X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
				X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
				X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
				X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
				X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
				X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
				X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
			}
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
	   */
			C.Rabbit = StreamCipher._createHelper(Rabbit);
		})();
	
		return CryptoJS.Rabbit;
	});

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(47), __webpack_require__(51), __webpack_require__(52), __webpack_require__(62), __webpack_require__(46));
		} else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var StreamCipher = C_lib.StreamCipher;
			var C_algo = C.algo;
	
			// Reusable objects
			var S = [];
			var C_ = [];
			var G = [];
	
			/**
	   * Rabbit stream cipher algorithm.
	   *
	   * This is a legacy version that neglected to convert the key to little-endian.
	   * This error doesn't affect the cipher's security,
	   * but it does affect its compatibility with other implementations.
	   */
			var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
				_doReset: function _doReset() {
					// Shortcuts
					var K = this._key.words;
					var iv = this.cfg.iv;
	
					// Generate initial state values
					var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];
	
					// Generate initial counter values
					var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];
	
					// Carry bit
					this._b = 0;
	
					// Iterate the system four times
					for (var i = 0; i < 4; i++) {
						nextState.call(this);
					}
	
					// Modify the counters
					for (var i = 0; i < 8; i++) {
						C[i] ^= X[i + 4 & 7];
					}
	
					// IV setup
					if (iv) {
						// Shortcuts
						var IV = iv.words;
						var IV_0 = IV[0];
						var IV_1 = IV[1];
	
						// Generate four subvectors
						var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
						var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
						var i1 = i0 >>> 16 | i2 & 0xffff0000;
						var i3 = i2 << 16 | i0 & 0x0000ffff;
	
						// Modify counter values
						C[0] ^= i0;
						C[1] ^= i1;
						C[2] ^= i2;
						C[3] ^= i3;
						C[4] ^= i0;
						C[5] ^= i1;
						C[6] ^= i2;
						C[7] ^= i3;
	
						// Iterate the system four times
						for (var i = 0; i < 4; i++) {
							nextState.call(this);
						}
					}
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcut
					var X = this._X;
	
					// Iterate the system
					nextState.call(this);
	
					// Generate four keystream words
					S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
					S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
					S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
					S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
	
					for (var i = 0; i < 4; i++) {
						// Swap endian
						S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;
	
						// Encrypt
						M[offset + i] ^= S[i];
					}
				},
	
				blockSize: 128 / 32,
	
				ivSize: 64 / 32
			});
	
			function nextState() {
				// Shortcuts
				var X = this._X;
				var C = this._C;
	
				// Save old counter values
				for (var i = 0; i < 8; i++) {
					C_[i] = C[i];
				}
	
				// Calculate new counter values
				C[0] = C[0] + 0x4d34d34d + this._b | 0;
				C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
				C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
				C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
				C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
				C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
				C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
				C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
				this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
	
				// Calculate the g-values
				for (var i = 0; i < 8; i++) {
					var gx = X[i] + C[i];
	
					// Construct high and low argument for squaring
					var ga = gx & 0xffff;
					var gb = gx >>> 16;
	
					// Calculate high and low result of squaring
					var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
					var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);
	
					// High XOR low
					G[i] = gh ^ gl;
				}
	
				// Calculate new state values
				X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
				X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
				X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
				X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
				X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
				X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
				X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
				X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
			}
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
	   */
			C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
		})();
	
		return CryptoJS.RabbitLegacy;
	});

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,